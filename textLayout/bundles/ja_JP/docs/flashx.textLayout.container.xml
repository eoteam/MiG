<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiDetail/><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><shortdesc> セキュリティサンドボックス内の TLF 管理コンテナをサポートするためのインターフェイスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> セキュリティサンドボックス内の TLF 管理コンテナをサポートするためのインターフェイスです。
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送開始をクライアントに要求する場合に呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送開始をクライアントに要求する場合に呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送が不要になったことをクライアントに通知する場合に呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送が不要になったことをクライアントに通知する場合に呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> セキュリティサンドボックス外からの mouseMove イベントを転送するためのクライアント呼び出しです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> セキュリティサンドボックス外からの mouseMove イベントを転送するためのクライアント呼び出しです。マウス移動の座標は不要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> セキュリティサンドボックス外からの mouseUp イベントを転送するためのクライアント呼び出しです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> セキュリティサンドボックス外からの mouseUp イベントを転送するためのクライアント呼び出しです。マウスを離したときの座標は不要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> コンテナ内のテキストを管理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="callInContext"/><Exclude kind="method" name="getBaseSWFContext"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> コンテナ内のテキストを管理します。これがコンテナのすべての子を管理していると想定します。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> コンテナに新規の DisplayObjects が追加されたり、構成の結果としてコンテナが更新されるたびに、TextFlow オブジェクトにより送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> コンテナに新規の DisplayObjects が追加されたり、構成の結果としてコンテナが更新されるたびに、TextFlow オブジェクトにより送出されます。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> TextFlow オブジェクトが損傷されるたびに、TextFlow オブジェクトにより送出されます。 
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> TextFlow オブジェクトが損傷されるたびに、TextFlow オブジェクトにより送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> テキストがコントローラーコンテナ内でスクロールされると、TextFlow オブジェクトにより送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> テキストがコントローラーコンテナ内でスクロールされると、TextFlow オブジェクトにより送出されます。  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> 幅または高さが auto またはパーセントに指定されてグラフィックのロードが完了したために InlineGraphicElement のサイズが変更された場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 幅または高さが auto またはパーセントに指定されてグラフィックのロードが完了したために InlineGraphicElement のサイズが変更された場合に送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> リンクがクリックされると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> リンクがクリックされると送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> マウスがリンクの領域から離れると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> マウスがリンクの領域から離れると送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> マウスがリンクの領域に入ると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> マウスがリンクの領域に入ると送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> マウスがリンクの上を通過すると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> マウスがリンクの上を通過すると送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> マウスボタンがリンク上で離されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> マウスボタンがリンク上で離されると送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> マウスボタンがリンク上で押されると送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> マウスボタンがリンク上で押されると送出されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> 再構成されるたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 再構成されるたびに送出されます。 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> 選択が変更されるたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 選択が変更されるたびに送出されます。主に選択依存ユーザーインターフェイスを更新するために使用されます。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.container:TextContainerManager:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> コンストラクター関数 - TextContainerManager インスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>テキスト行を管理するための DisplayObjectContainer です。
		 </apiDesc></apiParam><apiParam><apiItemName>configuration</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>- この TextContainerManager インスタンスとともに使用する IConfiguration インスタンスです。 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> コンストラクター関数 - TextContainerManager インスタンスを作成します。最適な結果を得るには：
		 <ol>
		 <li>TextContainerManager.defaultConfiguration で開始して、これを変更します。</li>   
		 <li>多数の InputManager 間で同じ構成を共有します。</li>
		 </ol>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:TextContainerManager:activateHandler"><apiName>activateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginInteraction"><apiName>beginInteraction</apiName><shortdesc> 現在の ISelectionManager インスタンスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この TextContainerManager インスタンスの操作マネージャーです。
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 現在の ISelectionManager インスタンスを返します。TextFlow インスタンスへの変換、および必要に応じてその作成を行います。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送開始をクライアントに要求する場合に呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送開始をクライアントに要求する場合に呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:compose"><apiName>compose</apiName><shortdesc> コンテナテキストを構成し、ファクトリまたは updateAllControllers() のいずれかを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> コンテナテキストを構成し、ファクトリまたは <codeph>updateAllControllers()</codeph> のいずれかを呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> TextContainerManager の ContextMenu を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>作成されたコンテキストメニューです。
		 
		 </apiDesc><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> TextContainerManager の ContextMenu を作成します。ContextMenu クラスのメソッドを使用して、メニューにアイテムを追加します。 
		 <p>このメソッドをオーバーライドしてカスタムのコンテキストメニューを定義できます。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createEditManager"><apiName>createEditManager</apiName><shortdesc>編集に使用する編集マネージャーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>この TextContainerManager インスタンスの編集マネージャーです。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:IEditManager</apiOperationClassifier></apiReturn><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>作成する EditManager の IUndoManager インスタンスです。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>編集に使用する編集マネージャーを作成します。デフォルトの代わりに使用するカスタム EditManager がある場合は、このメソッドをオーバーライドします。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createSelectionManager"><apiName>createSelectionManager</apiName><shortdesc>選択に使用する選択マネージャーを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>新しい SelectionManager インスタンスです。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>選択に使用する選択マネージャーを作成します。デフォルトの代わりに使用するカスタム SelectionManager がある場合は、このメソッドをオーバーライドします。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:drawBackgroundAndSetScrollRect"><apiName>drawBackgroundAndSetScrollRect</apiName><shortdesc>   
		 コンテナの scrollRect プロパティでこれが設定されると、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>scrollRect</codeph> オブジェクトが作成された場合、<codeph>true</codeph> です。
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>scrollX</apiItemName><apiType value="Number"/><apiDesc>スクロール矩形の水平方向の開始位置です。
		 </apiDesc></apiParam><apiParam><apiItemName>scrollY</apiItemName><apiType value="Number"/><apiDesc>スクロール矩形の垂直方向の開始位置です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>   
		 コンテナの scrollRect プロパティでこれが設定されると、<codeph>true</codeph> を返します。このメソッドを使用すると、パフォーマンス上の問題を起こす可能性がある <codeph>scrollRect</codeph> プロパティに実際にアクセスしなくても、<codeph>scrollRect</codeph> が設定されているかどうかをテストできます。 
		 <p>背景または境界線を描く場合は、このメソッドをオーバーライドします。scrollRect は指定済みとして設定する<b>必要がある</b>ので、このメソッドをオーバーライドするのは難しい場合があります。</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:editHandler"><apiName>editHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endInteraction"><apiName>endInteraction</apiName><shortdesc> 操作を終了します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 操作を終了します。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送が不要になったことをクライアントに通知する場合に呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送が不要になったことをクライアントに通知する場合に呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> focusIn イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> focusIn イベントを処理します。
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> compose() メソッドまたは updateContainer() メソッドの最後の呼び出しでテキストが配置された場所を示す矩形を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテンツの境界です。
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> <codeph>compose()</codeph> メソッドまたは <codeph>updateContainer()</codeph> メソッドの最後の呼び出しでテキストが配置された場所を示す矩形を作成します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.container.xml#TextContainerManager/compose()"><linktext>compose()</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager/updateContainer()"><linktext>updateContainer()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getFocusedSelectionFormat"><apiName>getFocusedSelectionFormat</apiName><shortdesc> focusedSelectionFormat を返します。デフォルトで、これは構成から取得されます。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> focusedSelectionFormat を返します。デフォルトで、これは構成から取得されます。サブクラスで異なる SelectionFormat を設定する場合、これをオーバーライドできます。
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getInactiveSelectionFormat"><apiName>getInactiveSelectionFormat</apiName><shortdesc> inactiveSelectionFormat を返します。デフォルトで、これは構成から取得されます。サブクラスで異なる SelectionFormat を設定する場合、これをオーバーライドできます。
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> inactiveSelectionFormat を返します。デフォルトで、これは構成から取得されます。サブクラスで異なる SelectionFormat を設定する場合、これをオーバーライドできます。
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getLineAt"><apiName>getLineAt</apiName><shortdesc> 構成済みの行の配列から、インデックス位置にある TextLine を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたインデックス位置で発生している TextLine です。
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>テキストのこのインデックス位置で行を検出します。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 構成済みの行の配列から、インデックス位置にある TextLine を返します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>スクロールする必要がある超過領域の量
		
		</apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>スクロールする必要がある行数です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getTextFlow"><apiName>getTextFlow</apiName><shortdesc> 現在の TextFlow です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在の TextFlow オブジェクトです。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 現在の TextFlow です。これが完全な TextFlow 表現でなくなっている場合は、完全な TextFlow 表現に変換します。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getText"><apiName>getText</apiName><shortdesc>
		 段落間にセパレーターを使用して現在のテキストを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>separator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>段落間に設定する文字列。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 段落間にセパレーターを使用して現在のテキストを返します。セパレーターは <codeph>separator</codeph> 引数で指定できます。<codeph>separator</codeph> 引数のデフォルト値は、Unicode 文字の <codeph>'PARAGRAPH SEPARATOR' (U+2029)</codeph> です。
		 
		 <p>setter を呼び出すと、添付された TextFlow が破棄されます。選択はすべて失われます。</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUndoManager"><apiName>getUndoManager</apiName><shortdesc> 
		 使用する undo マネージャーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>新しい IUndoManager インスタンスです。
		 
		 </apiDesc><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
		 使用する undo マネージャーを返します。デフォルトで、一意の undo マネージャーを作成します。undo マネージャーをカスタマイズする場合（例えば、複数の TextContainerManager インスタンスで undo マネージャーが共有して使用されるようにカスタマイズする場合）は、このメソッドをサブクラスでオーバーライドします。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUnfocusedSelectionFormat"><apiName>getUnfocusedSelectionFormat</apiName><shortdesc> unfocusedSelectionFormat を返します。デフォルトでは、これは構成から取得されます。サブクラスで異なる SelectionFormat を設定する場合、このメソッドをオーバーライドできます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> unfocusedSelectionFormat を返します。デフォルトでは、これは構成から取得されます。サブクラスで異なる SelectionFormat を設定する場合、このメソッドをオーバーライドできます。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> クライアントによるイベントの管理時に、IME.START_COMPOSITION イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> IMEEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>IME.START_COMPOSITION </codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#IMEEvent/START_COMPOSITION"><linktext>IMEEvent.START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateSelectionFormats"><apiName>invalidateSelectionFormats</apiName><shortdesc> 選択形式（SelectionFormat）を変更していて、interactionManager を更新したい場合、これを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 選択形式（SelectionFormat）を変更していて、interactionManager を更新したい場合、これを呼び出します。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateUndoManager"><apiName>invalidateUndoManager</apiName><shortdesc> 編集中に、編集に使用している undo マネージャーをリセットしたい場合、これを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 編集中に、編集に使用している undo マネージャーをリセットしたい場合、これを呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:isDamaged"><apiName>isDamaged</apiName><shortdesc> コンテンツに構成が必要な場合、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテンツに構成が必要な場合は <codeph>true</codeph>、必要でない場合は <codeph>false</codeph> を返します。
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> コンテンツに構成が必要な場合は、<codeph>true</codeph> を返します。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> セキュリティサンドボックス外からの mouseMove イベントを転送するためのクライアント呼び出しです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> セキュリティサンドボックス外からの mouseMove イベントを転送するためのクライアント呼び出しです。マウス移動の座標は不要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> mouseOver イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> mouseOver イベントを処理します。
		</apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> セキュリティサンドボックス外からの mouseUp イベントを転送するためのクライアント呼び出しです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> セキュリティサンドボックス外からの mouseUp イベントを転送するためのクライアント呼び出しです。マウスを離したときの座標は不要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>選択範囲の拡張時に変更された選択範囲の端。選択範囲の先頭または末尾のいずれかを指定でき、テキストフローの先頭からのオフセットとして表します。
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	選択範囲の拡張時に変更されなかった選択範囲の端です。選択範囲の先頭または末尾のいずれかを指定できます。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setTextFlow"><apiName>setTextFlow</apiName><shortdesc> この TextContainerManager に TextFlow を設定します。既存の TextFlow がある場合はそれに置き換えて、現在のテキストを破棄します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> この TextContainerManager に TextFlow を設定します。既存の TextFlow がある場合はそれに置き換えて、現在のテキストを破棄します。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setText"><apiName>setText</apiName><shortdesc>
		 text プロパティを指定した文字列に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>設定する文字列です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph>text</codeph> プロパティを指定した文字列に設定します。追加された TextFlow をすべて破棄します。選択はすべて失われます。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> TextEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:updateContainer"><apiName>updateContainer</apiName><shortdesc> 表示を更新します。ファクトリまたは updateAllControllers() のいずれかを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 表示を更新します。ファクトリまたは updateAllControllers() のいずれかを呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:TextContainerManager:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> コンテナ内でテキストに使用できる垂直方向の範囲を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> コンテナ内でテキストに使用できる垂直方向の範囲を返します。値はピクセル単位で指定します。 
		 <p>このプロパティを設定すると、コンテナ内のテキストが損傷され、構成が必要になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> コンテナ内でテキストに使用できる水平方向の範囲を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> コンテナ内でテキストに使用できる水平方向の範囲を返します。値はピクセル単位で指定します。
		 
		 <p>このプロパティを設定すると、コンテナ内のテキストが損傷され、構成が必要になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:configuration:get"><apiName>configuration</apiName><shortdesc> この TextContainerManager の Configuration オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> この TextContainerManager の Configuration オブジェクトです。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.IConfiguration.xml"><linktext>IConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:container:get"><apiName>container</apiName><shortdesc> この TextContainerManager が管理するテキストを含むコンテナ（DisplayObjectContainer）を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> この TextContainerManager が管理するテキストを含むコンテナ（DisplayObjectContainer）を返します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>ContainerController.container</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> この TextContainerManager のデフォルトの構成です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> この TextContainerManager のデフォルトの構成です。列およびパディングの属性は、<codeph>FormatValue.INHERIT</codeph> に設定されます。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:editingMode:get"><apiName>editingMode</apiName><shortdesc> この TextContainerManager の編集モードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> この TextContainerManager の編集モードです。モードには、読み取り専用、読み取りと選択を許可、および編集（読み取り、選択および書き込み）を許可があります。EditingMode クラスの定数値を使用して、このプロパティを設定します。 
		 <p>デフォルト値は READ_WRITE です。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 ファクトリによりすべてのテキスト行を生成するか、またはコンテナの境界が埋まった際に停止するかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 ファクトリによりすべてのテキスト行を生成するか、またはコンテナの境界が埋まった際に停止するかを制御します。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> 文字列のみを表示する場合にこのフォーマットを設定します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 文字列のみを表示する場合にこのフォーマットを設定します。TextFlow を表示する場合には、これによる即時的な効果はありません。設定した ITextLayoutFormat はコピーされません。この setter を呼び出さずにこれを変更した場合、安定した結果は得られません。 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:numLines:get"><apiName>numLines</apiName><shortdesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		適切な swf コンテキストで必要に応じて実行する FTE 呼び出しで使用されるオプションの ISWFContext インスタンスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		適切な swf コンテキストで必要に応じて実行する FTE 呼び出しで使用されるオプションの ISWFContext インスタンスです。 
		
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 ファクトリによりすべてのテキスト行を生成するか、またはコンテナの境界が埋まった際に停止するかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 ファクトリによりすべてのテキスト行を生成するか、またはコンテナの境界が埋まった際に停止するかを制御します。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
	  ScrollPolicy クラスは、テキストフローコンテナを定義する ContainerController クラスの horizontalScrollPolicy プロパティおよび verticalScrollPolicy プロパティを設定するための値を定義する列挙クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  ScrollPolicy クラスは、テキストフローコンテナを定義する ContainerController クラスの <codeph>horizontalScrollPolicy</codeph> プロパティおよび <codeph>verticalScrollPolicy</codeph> プロパティを設定するための値を定義する列挙クラスです。 
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/horizontalScrollPolicy"><linktext>ContainerController.horizontalScrollPolicy</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/verticalScrollPolicy"><linktext>ContainerController.verticalScrollPolicy</linktext></link></related-links><apiValue id="flashx.textLayout.container:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 コンテンツがコンテナのサイズを超えた場合にスクロールを表示するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 コンテンツがコンテナのサイズを超えた場合にスクロールを表示するかどうかを指定します。ランタイムは、コンテナをオーバーフローする行の数を計算します。ユーザーは、カーソルキーでドラッグ選択するか、マウスホイールを回転させてそれらの行に移動できます。対応する位置の値、<codeph>ContainerController.horizontalScrollPosition</codeph> または <codeph>ContainerController.verticalScrollPosition</codeph> のいずれかを設定してスクロールを表示させることもできます。また、ランタイムは、編集時にコンテナのコンテンツを自動的にスクロールできます。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc> 
		 ランタイムがオーバーフローした行を表示しないようにします。これにより、ユーザーはそれらの行に移動できません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 ランタイムがオーバーフローした行を表示しないようにします。これにより、ユーザーはそれらの行に移動できません。この場合、対応する <codeph>ContainerController.horizontalScrollPosition</codeph> および <codeph>ContainerController.verticalScrollPosition</codeph> プロパティを設定しても効果はありません。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc> 
		 スクロールによりコンテナのサイズを超えているコンテンツにアクセスできるよう指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 スクロールによりコンテナのサイズを超えているコンテンツにアクセスできるよう指定します。ランタイムは、コンテナをオーバーフローする行の数を計算します。これにより、ユーザーは、カーソルキーでドラッグ選択するか、マウスホイールを回転させて、それらをスクロールして表示できます。対応する位置の値、<codeph>ContainerController.horizontalScrollPosition</codeph> または <codeph>ContainerController.verticalScrollPosition</codeph> のいずれかを設定してスクロールすることもできます。また、ランタイムは、編集時にコンテナのコンテンツを自動的にスクロールできます。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><shortdesc> 
	 ColumnState クラスは、コンテナの幅とコンテナ属性を使用して、列のサイズと位置を計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 ColumnState クラスは、コンテナの幅とコンテナ属性を使用して、列のサイズと位置を計算します。このクラスのインスタンスを個別に作成して列の値を計算できます。またコンテナが構成または更新（再描画）された後に、テキストに使用された列の値を取得できます。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ColumnState:ColumnState"><apiName>ColumnState</apiName><shortdesc>
		 コンストラクター関数 - ColumnState オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>blockProgression</apiItemName><apiType value="String"/><apiDesc>テキストフローの行の方向で、BlockProgression.TB（上から下）と BlockProgression.RL（右から左）があります。
		 </apiDesc></apiParam><apiParam><apiItemName>columnDirection</apiItemName><apiType value="String"/><apiDesc>テキストフローの列レイアウトの方向で、Direction.RTL（右から左）と Direction.LTR（左から右）があります。
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>ContainerController のインスタンスです。この属性を使用して列の値を計算します。
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiDesc>コンテナ内でテキストに使用できる水平方向の範囲（ピクセル単位）です。
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiDesc>コンテナ内でテキストに使用できる垂直方向の範囲（ピクセル単位）です。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 コンストラクター関数 - ColumnState オブジェクトを作成します。<codeph>controller.compositionWidth</codeph> および <codeph>controller.compositionHeight</codeph> の値が <codeph>NaN</codeph>（非数）の場合、コンストラクターはコンテナのコンテンツを測定して、ColumnState に入力する実際の構成用の幅と高さを決定します。<codeph>flashx.textLayout.formats.BlockProgression</codeph> クラスで定義した定数を使用して、<codeph>blockProgression</codeph> パラメーターの値を指定します。<codeph>flashx.textLayout.formats.Direction</codeph> で定義した定数を使用して、<codeph>columnDirection</codeph> パラメーターの値を指定します。
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>BlockProgression</linktext></link><link href="flashx.textLayout.formats.xml#Direction"><linktext>Direction</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.container:ColumnState:getColumnAt"><apiName>getColumnAt</apiName><shortdesc> 
		 コンテナ内で列が使用する領域を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定した列の領域です。
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>コンテナ内のすべての列における列の相対位置です。1 列目が位置 0 となります。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 コンテナ内で列が使用する領域を返します。これを使用して、特定の列の領域にアクセスできます。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ColumnState:columnCount:get"><apiName>columnCount</apiName><shortdesc> 
		 コンテナ内の列の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 コンテナ内の列の数です。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnGap:get"><apiName>columnGap</apiName><shortdesc> 
		 コンテナ内の列間のスペースの量（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 コンテナ内の列間のスペースの量（ピクセル単位）です。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnWidth:get"><apiName>columnWidth</apiName><shortdesc> 
		 コンテナ内の列の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 コンテナ内の列の幅（ピクセル単位）です。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
	 ContainerController クラスは、TextFlow オブジェクトとコンテナ間の関係を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 ContainerController クラスは、TextFlow オブジェクトとコンテナ間の関係を定義します。TextFlow には IFlowComposer が含まれ、これが TextFlow のコンテナまたは一連のコンテナを管理します。IFlowComposer には、管理する各コンテナ用の ContainerController が含まれます。ContainerController は、コンテナ、コンテナ固有の属性、およびコンテナ内のテキストを管理します。
	 
	 <p><adobeimage alt="IContainerController" href="../../../images/textLayout_multiController.gif"/></p>
	 
	 </apiDesc><example conref="examples\ContainerControllerExample1.as"/><example conref="examples\ContainerControllerExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ContainerController:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
		 コンストラクター - ContainerController のインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>テキスト行を管理するための DisplayObjectContainer です。
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>コンテナ内にテキストを構成するための幅の初期値です。
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>コンテナ内にテキストを構成するための高さの初期値です。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 コンストラクター - ContainerController のインスタンスを作成します。ContainerController には、<codeph>compositionWidth</codeph> と <codeph>compositionHeight</codeph> のデフォルト値が設定されています。そのため、幅と高さを指定していない場合でも、テキストの一部がコンテナに表示されます。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:ContainerController:activateHandler"><apiName>activateHandler</apiName><shortdesc> クライアントによるイベントの管理時に Event.ACTIVATE イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に <codeph>Event.ACTIVATE</codeph> イベントを処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_activateHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addBackgroundShape"><apiName>addBackgroundShape</apiName><shortdesc>
		 背景シェイプ（背景色など）が描画される flash.display.Shape オブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc>追加する <codeph>flash.display.Shape</codeph> オブジェクト
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 背景シェイプ（背景色など）が描画される <codeph>flash.display.Shape</codeph> オブジェクトを追加します。このメソッドのデフォルト実装（オーバーライド可能）は、<codeph>flash.text.engine.TextLine</codeph> の子が存在する場合はその最初の子の直前の、存在しない場合は既存の最後の子の後ろの <codeph>container</codeph> にオブジェクトを追加します。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addSelectionContainer"><apiName>addSelectionContainer</apiName><shortdesc>
		 選択シェイプ（ブロック選択ハイライトやカーソルなど）が追加される flash.display.DisplayObjectContainer オブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>追加する <codeph>flash.display.DisplayObjectContainer</codeph> オブジェクト
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 選択シェイプ（ブロック選択ハイライトやカーソルなど）が追加される <codeph>flash.display.DisplayObjectContainer</codeph> オブジェクトを追加します。このメソッドのデフォルト実装（オーバーライド可能）では、<codeph>container</codeph> の <codeph>flash.text.engine.TextLine</codeph> の最初の子（存在する場合）の直前にオブジェクトが追加されます。オブジェクトは不透明で、normal ブレンドモードに設定されます。これ以外のケースでは、オブジェクトは <codeph>container</codeph> の最後の子として追加されます。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addTextLine"><apiName>addTextLine</apiName><shortdesc>
		 コンテナの子孫として flash.text.engine.TextLine オブジェクトを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>追加する <codeph>flash.text.engine.TextLine</codeph> オブジェクト
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>親内のテキスト行の挿入インデックス 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph>container</codeph> の子孫として <codeph>flash.text.engine.TextLine</codeph> オブジェクトを追加します。このメソッドのデフォルト実装（オーバーライド可能）は、<codeph>container</codeph> の直接の子として、オブジェクトを指定されたインデックスに追加します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:autoScrollIfNecessary"><apiName>autoScrollIfNecessary</apiName><shortdesc> 
		 ドラッグによる選択時にスクロールイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mouseX</apiItemName><apiType value="int"/><apiDesc>マウスカーソルのステージ上の水平位置です。
		 </apiDesc></apiParam><apiParam><apiItemName>mouseY</apiItemName><apiType value="int"/><apiDesc>マウスカーソルのステージ上の垂直位置です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 ドラッグによる選択時にスクロールイベントを処理します。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送開始をクライアントに要求する場合に呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送開始をクライアントに要求する場合に呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:clearStyle"><apiName>clearStyle</apiName><shortdesc> この FlowElement から、styleProp により指定されたスタイルをクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> この FlowElement から、<codeph>styleProp</codeph> により指定されたスタイルをクリアします。値を <codeph>undefined</codeph> に設定します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> 
		 ContainerController のコンテキストメニューを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> 
		 ContainerController のコンテキストメニューを作成します。ContextMenu クラスのメソッドを使用して、メニューにアイテムを追加します。
		 <p>このメソッドをオーバーライドしてカスタムのコンテキストメニューを定義できます。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> クライアントによるイベントの管理時に Event.DEACTIVATE イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に <codeph>Event.DEACTIVATE</codeph> イベントを処理します。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:editHandler"><apiName>editHandler</apiName><shortdesc>
		 クライアントによるイベントの管理時に編集イベント（CUT、COPY、PASTE、SELECT_ALL）を処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 クライアントによるイベントの管理時に編集イベント（CUT、COPY、PASTE、SELECT_ALL）を処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_editHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送が不要になったことをクライアントに通知する場合に呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 セキュリティサンドボックス外からの mouseup イベントおよび mousemove イベントの転送が不要になったことをクライアントに通知する場合に呼び出します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 クライアントによるイベントの管理時に FocusEvent.KEY_FOCUS_CHANGE イベントおよび FocusEvent.MOUSE_FOCUS_CHANGE イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 クライアントによるイベントの管理時に <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> イベントおよび <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> クライアントによるイベントの管理時に FocusEvent.FOCUS_IN イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に <codeph>FocusEvent.FOCUS_IN</codeph> イベントを処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_focusInHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FocusEvent.FOCUS_IN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> クライアントによるイベントの管理時に FocusEvent.FOCUS_OUT イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に <codeph>FocusEvent.FOCUS_OUT</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> 
		 直近の構成または更新操作が反映されたものとして、テキストが占める領域を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>テキストが占める領域を表します。
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 直近の構成または更新操作が反映されたものとして、テキストが占める領域を返します。コンテナがスクロール可能でテキストが表示可能領域を超える場合、幅と高さを推定できます。
		 
		 </apiDesc><example conref="examples\ContainerController_getContentBoundsExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:getFirstTextLineChildIndex"><apiName>getFirstTextLineChildIndex</apiName><shortdesc>
		 親内で最初のテキスト行を表示させるインデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>親内で最初のテキスト行を表示させるインデックスです。
		 
		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 親内で最初のテキスト行を表示させるインデックスを取得します。このメソッドのデフォルト実装（オーバーライド可能）は、<codeph>container</codeph> の <codeph>flash.text.engine.TextLine</codeph> の子が存在する場合はその最初の子のインデックス、存在しない場合は <codeph>container</codeph> の最後の子のインデックスを返します。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		指定した行数により、画面上下へのスクロールに必要なスクロール距離を計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>スクロールする必要がある超過領域の量
		
		</apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>スクロールする必要がある行数です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		指定した行数により、画面上下へのスクロールに必要なスクロール距離を計算します。正の数値で上にスクロールされ、TextFlow の上部がより多く表示されます。正の数値で下にスクロールされ、最下部の次の行が完全に表示されます。
		
		<p>例えば上にスクロールしても、このメソッドでは次の行が完全に表示されます。次の行の一部が表示されず、指定されている行数が 1 の場合、一部が表示されていなかった行は完全に表示されるようになります。</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getStyle"><apiName>getStyle</apiName><shortdesc> styleProp パラメーターにより指定されたスタイルの値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたスタイルの現在の値です。
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>必要な値を含むスタイルプロパティの名前です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> <codeph>styleProp</codeph> パラメーターにより指定されたスタイルの値を返します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> クライアントによるイベントの管理時に、IMEEvent.IME_START_COMPOSITION イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> IMEEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>IMEEvent.IME_START_COMPOSITION</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.IMEEvent.IME_START_COMPOSITION.xml"><linktext>flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:invalidateContents"><apiName>invalidateContents</apiName><shortdesc> 
		 このコンテナ内のすべてのテキストを、構成の必要があるものとしてマーキングします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 このコンテナ内のすべてのテキストを、構成の必要があるものとしてマーキングします。 
		 
		 </apiDesc><example conref="examples\ContainerController_invalidateContentsExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 構成を必要とするテキストがコンテナに含まれているかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテナが構成を必要としている場合は、true です。
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 構成を必要とするテキストがコンテナに含まれているかどうかを判別します。 
		 
		 </apiDesc><example conref="examples\ContainerController_isDamagedExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> クライアントによるイベントの管理時に、KeyboardEvent.KEY_DOWN イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>KeyboardEvent.KEY_DOWN</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> クライアントによるイベントの管理時に、FocusEvent.KEY_FOCUS_CHANGE イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>FocusEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> クライアントによるイベントの管理時に、Keyboard.KEY_UP イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>Keyboard.KEY_UP</codeph> イベントを処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_keyUpHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 クライアントによるイベントの管理時に、ContextMenuEvent.MENU_SELECT イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 クライアントによるイベントの管理時に、<codeph>ContextMenuEvent.MENU_SELECT</codeph> イベントを処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_menuSelectHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> クライアントによるイベントの管理時に、MouseEvent.DOUBLE_CLICK イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>MouseEvent.DOUBLE_CLICK</codeph> イベントを処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_mouseDoubleClickHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> クライアントによるイベントの管理時に、MouseEvent.MOUSE_DOWN イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>MouseEvent.MOUSE_DOWN</codeph> イベントを処理します。 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 クライアントによるイベントの管理時に、MouseEvent.MOUSE_MOVE イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 クライアントによるイベントの管理時に、<codeph>MouseEvent.MOUSE_MOVE</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> セキュリティサンドボックス外からの mouseMove イベントを転送するためのクライアント呼び出しです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> セキュリティサンドボックス外からの mouseMove イベントを転送するためのクライアント呼び出しです。マウス移動の座標は不要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> クライアントによるイベントの管理時に、MouseEvent.MOUSE_OUT イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>MouseEvent.MOUSE_OUT</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 クライアントによるイベントの管理時に、MouseEvent.MOUSE_OVER イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 クライアントによるイベントの管理時に、<codeph>MouseEvent.MOUSE_OVER</codeph> イベントを処理します。 
		 
		 </apiDesc><example conref="examples\ContainerController_mouseOverHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 クライアントによるイベントの管理時に、MouseEvent.MOUSE_UP イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 クライアントによるイベントの管理時に、<codeph>MouseEvent.MOUSE_UP</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> セキュリティサンドボックス外からの mouseUp イベントを転送するためのクライアント呼び出しです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> セキュリティサンドボックス外からの mouseUp イベントを転送するためのクライアント呼び出しです。マウスを離したときの座標は不要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> クライアントによるイベントの管理時に、MouseEvent.MOUSE_WHEEL イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>MouseEvent.MOUSE_WHEEL</codeph> イベントを処理します。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeSelectionContainer"><apiName>removeSelectionContainer</apiName><shortdesc>
		 選択シェイプ（ブロック選択ハイライトやカーソルなど）を格納する flash.display.DisplayObjectContainer オブジェクトを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>削除する <codeph>flash.display.DisplayObjectContainer</codeph> オブジェクト
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 選択シェイプ（ブロック選択ハイライトやカーソルなど）を格納する <codeph>flash.display.DisplayObjectContainer</codeph> オブジェクトを削除します。このメソッドのデフォルト実装（オーバーライド可能）は、オブジェクトを親から削除します（存在する場合）。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeTextLine"><apiName>removeTextLine</apiName><shortdesc>
		 flash.text.engine.TextLine オブジェクトを親から削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>削除する <codeph>flash.text.engine.TextLine</codeph> オブジェクト 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph>flash.text.engine.TextLine</codeph> オブジェクトを親から削除します。このメソッドのデフォルト実装（オーバーライド可能）は、オブジェクトがコンテナの直接の子である場合、そのオブジェクトを <codeph>container</codeph> から削除します。オブジェクトが <codeph>container</codeph> の子孫でなくても、このメソッドは呼び出し可能です。このメソッドを実装する場合は、このような場合に何のアクションも実行されないようにする必要があります。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 テキスト範囲がコンテナ内に表示されるようにスクロールします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>選択範囲の拡張時に変更された選択範囲の端。選択範囲の先頭または末尾のいずれかを指定でき、テキストフローの先頭からのオフセットとして表します。
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	選択範囲の拡張時に変更されなかった選択範囲の端です。選択範囲の先頭または末尾のいずれかを指定できます。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 テキスト範囲がコンテナ内に表示されるようにスクロールします。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:selectRange"><apiName>selectRange</apiName><shortdesc> 
		 ITextSupport を実装するコンポーネントに、選択したテキストの範囲を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>選択のアンカー終点位置にある文字の、ゼロベースのインデックス値
		 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>選択のアクティブ終点位置にある文字の、ゼロベースのインデックス値
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 ITextSupport を実装するコンポーネントに、選択したテキストの範囲を設定します。いずれかの引数が範囲外である場合、選択は変更されません。インライン IME をサポートするコンポーネントでは、このメソッドへの呼び出しが必要です。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setCompositionSize"><apiName>setCompositionSize</apiName><shortdesc> 
		 コンテナ内でテキストに使用できる幅と高さを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>コンテナ内でテキストに使用できる幅（ピクセル単位）です。
		 </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>コンテナ内でテキストに使用できる高さ（ピクセル単位）です。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 コンテナ内でテキストに使用できる幅と高さを設定します。 
		 
		 </apiDesc><example conref="examples\ContainerController_setCompositionSizeExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setStyle"><apiName>setStyle</apiName><shortdesc> 
		styleProp パラメーターにより指定されたスタイルの値を、newValue パラメーターで指定する値に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>設定する値を含むスタイルプロパティの名前です。
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>スタイルに割り当てる値です。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		<codeph>styleProp</codeph> パラメーターにより指定されたスタイルの値を、<codeph>newValue</codeph> パラメーターで指定する値に設定します。
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> クライアントによるイベントの管理時に、TextEvent.TEXT_INPUT イベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> TextEvent オブジェクトです。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> クライアントによるイベントの管理時に、<codeph>TextEvent.TEXT_INPUT</codeph> イベントを処理します。
		 
		 </apiDesc><example conref="examples\ContainerController_textInputHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:updateVisibleRectangle"><apiName>updateVisibleRectangle</apiName><shortdesc> 
		 スクロールする場合、途中までしか表示されない行がスクロール可能な領域内に収まるよう、スクロール矩形をコンテナ矩形に設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 スクロールする場合、途中までしか表示されない行がスクロール可能な領域内に収まるよう、スクロール矩形をコンテナ矩形に設定します。スクロールしない場合、クリッピングが行われないよう、スクロール矩形を解除します。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ContainerController:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 コンテナ内の最初の文字を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 コンテナ内の最初の文字を返します。これがフロー内の 1 つ目のコンテナでない場合、この値は、テキストの構成時、つまり IFlowComposer の <codeph>compose()</codeph> または <codeph>updateAllControllers()</codeph> メソッドが呼び出される際に、更新されます。
		 
	 	 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat：行の基準を揃えるベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：行の基準を揃えるベースラインを指定します。例えば、<codeph>dominantBaseline</codeph> を ASCENT に設定し、<codeph>alignmentBaseline</codeph> を DESCENT に設定すると、テキスト上部が DESCENT ベースライン上またはラインの下に揃えられます。一般に、ベースラインは行内の最大エレメントにより決定されます。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>有効な値は、flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM、flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は USE_DOMINANT_BASELINE になります。</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat：背景のアルファ（透明）値です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：背景のアルファ（透明）値です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。値 0 は完全に透明、値 1 は完全に不透明です。alpha が 0 に設定されている表示オブジェクトは、表示されない場合でも、アクティブです。
		 <p>有効な値は、0 ～ 1 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は 1 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat：テキストの背景色です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの背景色です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。<codeph>BackgroundColor.TRANSPARENT</codeph> の定数値、または 3 つの 8 ビットの RGB（赤、緑、青）値を指定する 16 進値のいずれかを指定できます。例えば、0xFF0000 は赤、0x00FF00 は緑です。
		 <p>有効な値は、flashx.textLayout.formats.BackgroundColor.TRANSPARENT、flashx.textLayout.formats.FormatValue.INHERIT の文字列、および 0x0 から 0xffffffff の uint です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は TRANSPARENT になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat：ベースラインを dominantBaseline 値から移動させる量です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：ベースラインを <codeph>dominantBaseline</codeph> 値から移動させる量です。単位は、ピクセルまたは <codeph>fontSize</codeph> のパーセント値（この場合は 140％のように文字列値を入力）です。正の値を指定すると、行は横書きの場合は上に（縦書きの場合は右に）移動し、負の値を指定すると、行は横書きの場合は下に（縦書きの場合は左に）移動します。 
		 <p>有効な値は、flashx.textLayout.formats.BaselineShift.SUPERSCRIPT、flashx.textLayout.formats.BaselineShift.SUBSCRIPT および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>有効な数値は、-1000 ～ 1000 です。</p>
		 <p>有効なパーセント値は、-1000 ～ 1000 の数値です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0.0 になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat：垂直方向または並行方向の行配置を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：垂直方向または並行方向の行配置を指定します。行は、上から下（横書用の <codeph>BlockProgression.TB</codeph>）または右から左（縦書用の <codeph>BlockProgression.RL</codeph>）に配置されます。
		 <p>有効な値は、flashx.textLayout.formats.BlockProgression.RL、flashx.textLayout.formats.BlockProgression.TB および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は TB になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat：折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：折り返しのあるテキストを複数行に分割する際の、改行可能位置を制御します。テキストを標準的に改行する場合は、<codeph>BreakOpportunity.AUTO</codeph> に設定します。テキストがサイズを超過し、改行する場所が他にない場合<i>以外</i>は改行しない場合は、<codeph>BreakOpportunity.NONE</codeph> に設定します。単語間のみでなく、どの位置でも改行を許可する場合は、<codeph>BreakOpportunity.ANY</codeph> に設定します。タイポグラフィッククラスタごとに改行する場合は、<codeph>BreakOpportunity.ALL</codeph> に設定します（パス上のテキストに有効）。
		 <p>有効な値は、flash.text.engine.BreakOpportunity.ALL、flash.text.engine.BreakOpportunity.ANY、flash.text.engine.BreakOpportunity.AUTO、flash.text.engine.BreakOpportunity.NONE および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat：このテキストに使用される CFF ヒンティングのタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：このテキストに使用される CFF ヒンティングのタイプです。CFF ヒンティングによって、Flash ランタイムで太い水平線がサブピクセルグリッドに合わされるか合わされないかが決定されます。このプロパティは、<codeph>renderingMode</codeph> プロパティが <codeph>RenderingMode.CFF</codeph> に設定されていて、フォントが埋め込まれている（<codeph>fontLookup</codeph> プロパティが <codeph>FontLookup.EMBEDDED_CFF</codeph> に設定されている）場合にのみ適用されます。スクリーンサイズが小さい場合は、ヒンティングによって、鮮明で読みやすいテキストの表示が可能になります。
		 <p>有効な値は、flash.text.engine.CFFHinting.NONE、flash.text.engine.CFFHinting.HORIZONTAL_STEM および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は HORIZONTAL_STEM になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat：テキストの色です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの色です。3 つの 8 ビットの RGB（赤、緑、青）値を指定する 16 進値を指定できます。例えば、0xFF0000 は赤、0x00FF00 は緑です。 
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat：テキスト列の数です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキスト列の数です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。列数は、列の他の設定をオーバーライドします。値は整数か、指定されない場合は <codeph>FormatValue.AUTO</codeph> になります。<codeph>columnCount</codeph> が指定されない場合は、<codeph>columnWidth</codeph> により、コンテナに収まる最大数の列が作成されます。
		 <p>有効な値は、flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT の文字列および 1 ～ 50 の int です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat：列間のふち取り領域をピクセル単位で指定します（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：列間のふち取り領域をピクセル単位で指定します（カスケード時に定義されていない場合、デフォルトの値が採用されます）。値は数値で指定します。
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は 20 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnState:get"><apiName>columnState</apiName><shortdesc> 
		 コンテナ内の列の数および特性を表す ColumnState オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ColumnState</apiValueClassifier></apiValueDef><apiDesc> 
		 コンテナ内の列の数および特性を表す ColumnState オブジェクトを返します。<codeph>IFlowComposer.compose()</codeph> または <codeph>IFlowComposer.updateAllControllers()</codeph> のいずれかの結果としてテキストが再構成されると、これらの値は更新されます。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ColumnState"><linktext>ColumnState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat：列幅（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：列幅（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。列の幅を指定して列の数を指定しない場合、TextLayout により、コンテナ幅と <codeph>columnGap</codeph> の設定に基づき、その幅の列が可能な限り最大数作成されます。余りのスペースがある場合は、最後の列の後に置かれます。値は数値で指定します。
		 <p>有効な値は、flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT の文字列および 0 ～ 8000 の数値です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> 
		 コンテナ内でテキストに使用できる垂直方向の範囲を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 コンテナ内でテキストに使用できる垂直方向の範囲を返します。値はピクセル単位で指定します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> 
		 コンテナ内でテキストに使用できる水平方向の範囲を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 コンテナ内でテキストに使用できる水平方向の範囲を返します。値はピクセル単位で指定します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 このコンテナに適用された属性（ルートエレメントから継承された属性を含む）とともに ITextLayoutFormat インスタンスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 このコンテナに適用された属性（ルートエレメントから継承された属性を含む）とともに ITextLayoutFormat インスタンスを返します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/rootElement"><linktext>rootElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:container:get"><apiName>container</apiName><shortdesc> 
		 この ContainerController インスタンスのテキスト行を含むコンテナ表示オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> 
		 この ContainerController インスタンスのテキスト行を含むコンテナ表示オブジェクトを返します。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/ContainerController()"><linktext>ContainerController()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> この ContainerController の coreStyles を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> この ContainerController の <codeph>coreStyles</codeph> を返します。getter によりコアスタイルのディクショナリが作成されることに注意してください。coreStyles オブジェクトは、TextLayoutFormat により定義されたこれらのフォーマットをカプセル化します。<codeph>coreStyles</codeph> オブジェクトは、<i>stylename-value</i> ペアの配列により構成されています。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat：このテキストに使用される数字の大文字小文字区別のタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：このテキストに使用される数字の大文字小文字区別のタイプです。値を <codeph>DigitCase.OLD_STYLE</codeph> に設定すると、様々なアセンダとディセンダを持つ小文字の書体に近づきます。その文字幅は形状によって設定されます。このスタイルは、選択した書体（最も一般的には Supplemental フォントまたは Expert フォント）でのみ有効です。<codeph>DigitCase.LINING</codeph> に設定すると、大文字全体の高さとなり、一般にグラフで整列させる場合に文字幅が等幅になります。<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>有効な値は、flash.text.engine.DigitCase.DEFAULT、flash.text.engine.DigitCase.LINING、flash.text.engine.DigitCase.OLD_STYLE および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は DEFAULT になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat：このテキストに使用される数字の幅のタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：このテキストに使用される数字の幅のタイプです。値は、個々の数字を表示する場合に最適な <codeph>DigitWidth.PROPORTIONAL</codeph> と、表、グラフおよび縦の列に数字を表示する場合に最適な <codeph>DigitWidth.TABULAR</codeph> があります。<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>有効な値は、flash.text.engine.DigitWidth.DEFAULT、flash.text.engine.DigitWidth.PROPORTIONAL、flash.text.engine.DigitWidth.TABULAR および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は DEFAULT になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat：テキストブロック内のテキストのデフォルトの双方向埋め込みレベルを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストブロック内のテキストのデフォルトの双方向埋め込みレベルを指定します。ラテン文字などでは左から右の読み順、アラビア文字やヘブライ文字などでは右から左の読み順となります。このプロパティは、コンテナレベルで適用された場合、列の方向にも影響します。列もテキストと同様、左から右、または右から左のいずれかに設定できます。以下に例を示します。<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>有効な値は、flashx.textLayout.formats.Direction.LTR、flashx.textLayout.formats.Direction.RTL および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は LTR になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat：行のエレメントの垂直座標を決定するために alignmentBaseline に吸着させるエレメントのベースラインを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：行のエレメントの垂直座標を決定するために <codeph>alignmentBaseline</codeph> に吸着させるエレメントのベースラインを指定します。<codeph>TextBaseline.AUTO</codeph> を指定した場合、親段落の <codeph>locale</codeph> プロパティに基づいて、行の基準が選択されます。日本語と中国語の場合、選択されるベースラインの値は <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph> で、他のすべての言語では <codeph>TextBaseline.ROMAN</codeph> となります。ベースラインに関するこれらの選択は、フォントおよびフォントサイズの選択によって決定されます。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>有効な値は、flashx.textLayout.formats.FormatValue.AUTO、flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は flashx.textLayout.formats.FormatValue.AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat：コンテナ内の最初の行のベースライン位置を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：コンテナ内の最初の行のベースライン位置を指定します。このプロパティがどのベースラインを参照するかは、コンテナレベルのロケールにより異なります。これは、日本語と中国語で <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>、他のすべての言語で <codeph>TextBaseline.ROMAN</codeph> となります。コンテナの上部のインセット（<codeph>blockProgression</codeph> が RL の場合は右側のインセット）から 1 行目のベースラインへのオフセットの値には、<codeph>BaselineOffset.ASCENT</codeph>（行のアセント）、<codeph>BaselineOffset.LINE_HEIGHT</codeph>（1 行目の高さ）、または絶対距離を指定する任意の固定数値を指定できます。<codeph>BaselineOffset.AUTO</codeph> に指定すると、行のアセントとコンテナの上部のインセットが揃えられます。<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>有効な値は、flashx.textLayout.formats.BaselineOffset.AUTO、flashx.textLayout.formats.BaselineOffset.ASCENT、flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT、flashx.textLayout.formats.FormatValue.INHERIT の文字列および 0 ～ 1000 の数値です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 
		 テキストを構成およびハイライトするフローコンポーザーオブジェクトを、このコントローラーが管理するコンテナに返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 
		 テキストを構成およびハイライトするフローコンポーザーオブジェクトを、このコントローラーが管理するコンテナに返します。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat：使用するフォント名またはフォント名のカンマ区切りリストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：使用するフォント名またはフォント名のカンマ区切りリストです。リスト内の使用できる先頭のフォントを使用してエレメントをレンダリングします。例えば、「Arial」、「Helvetica」、「_sans」の場合は、「Arial」が検索され、Arial が見つからないときは「Helvetica」が、それらがいずれも見つからないときは「_sans」が検索されます。
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は Arial になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat：使用するフォント参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：使用するフォント参照です。<codeph>FontLookup.DEVICE</codeph> に指定すると、SWF ファイルが実行されるシステムにインストールされているフォントが使用されます。デバイスフォントを使用するとムービーサイズが小さくなりますが、異なるシステムおよびプラットフォームで、テキストが必ずしも同じようにレンダリングされる訳ではありません。<codeph>FontLookup.EMBEDDED_CFF</codeph> に指定すると、パブリッシュされた SWF ファイルに埋め込まれたフォントのアウトラインが使用されます。埋め込みフォントを使用すると、SWF ファイルのサイズが（ときには大幅に）大きくなりますが、テキストは常に選択されたフォントで表示されます。
		 <p>有効な値は、flash.text.engine.FontLookup.DEVICE、flash.text.engine.FontLookup.EMBEDDED_CFF および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は DEVICE になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat：テキストのサイズ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストのサイズ（ピクセル単位）です。
		 <p>有効な値は、1 ～ 720 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 12 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat：テキストのスタイルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストのスタイルです。プレーンテキストには <codeph>FontPosture.NORMAL</codeph>、イタリックには <codeph>FontPosture.ITALIC</codeph> を使用します。このプロパティは、デバイスフォント（<codeph>fontLookup</codeph> プロパティが flash.text.engine.FontLookup.DEVICE に設定されている場合）にのみ適用されます。
		 <p>有効な値は、flash.text.engine.FontPosture.NORMAL、flash.text.engine.FontPosture.ITALIC および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は NORMAL になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat：テキストの太さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの太さです。プレーンテキスト用の <codeph>FontWeight.NORMAL</codeph>、または <codeph>FontWeight.BOLD</codeph> を使用します。デバイスフォント（<codeph>fontLookup</codeph> プロパティが flash.text.engine.FontLookup.DEVICE に設定されている場合）にのみ適用されます。
		 <p>有効な値は、flash.text.engine.FontWeight.NORMAL、flash.text.engine.FontWeight.BOLD および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は NORMAL になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:format:get"><apiName>format</apiName><shortdesc> 
		 このコンテナの属性を含む ITextLayoutFormat オブジェクトを格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 このコンテナの属性を含む ITextLayoutFormat オブジェクトを格納します。このコントローラーは、コンテナが含まれる TextFlow からコンテナのプロパティを継承します。このプロパティは、同じテキストフロー内で複数のコントローラーが異なる列設定やパディングなどを指定することを許可します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 水平方向のスクロールポリシーを指定します。ScrollPolicy クラスの定数、ON、OFF または AUTO のいずれかを割り当てて設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 水平方向のスクロールポリシーを指定します。ScrollPolicy クラスの定数、ON、OFF または AUTO のいずれかを割り当てて設定します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> ステージ上の現在の水平方向のスクロール位置を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> ステージ上の現在の水平方向のスクロール位置を指定します。この値は、左からのピクセル数を指定します。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:interactionManager:get"><apiName>interactionManager</apiName><shortdesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat：段落のテキストの均等配置に使用するルールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落のテキストの均等配置に使用するルールです。デフォルト値は <codeph>FormatValue.AUTO</codeph> で、段落の <codeph>locale</codeph> プロパティに基づいてテキストの均等配置が行われます。日本語と中国語以外のすべての言語では、<codeph>FormatValue.AUTO</codeph> は <codeph>JustificationRule.SPACE</codeph> になり、空白文字に追加のスペースが追加されます。日本語と中国語の場合、<codeph>FormatValue.AUTO</codeph> は <codeph>JustficationRule.EAST_ASIAN</codeph> になります。均等配置によって、句読点のスペース設定の一部が変更されます。ローマンテキストの場合、カンマと日本語の句点には 1 文字分の幅を使用しますが、日中韓のテキストでは半文字分しか使用しません。また、従来の日中韓の活字規則に従って、連続する句読点間のスペースは狭くなります。次の例の、段落の 2 行目に適用された行送りにも注目してください。日中韓では、最後の 2 行が左に寄せられます。ローマンでは、2 行目以降が左に寄せられます。<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>有効な値は、flashx.textLayout.formats.JustificationRule.EAST_ASIAN、flashx.textLayout.formats.JustificationRule.SPACE、flashx.textLayout.formats.FormatValue.AUTO および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は flashx.textLayout.formats.FormatValue.AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat：段落の均等配置に使用するスタイルです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落の均等配置に使用するスタイルです。<codeph>JustificationRule.EAST_ASIAN</codeph> の <codeph>justificationRule</codeph> 設定との連携でのみ使用します。デフォルト値の <codeph>FormatValue.AUTO</codeph> は、すべてのロケールで <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> に解決されます。JustificationStyle クラスで定義される定数値は、禁則文字の取扱いオプションを指定します。禁則文字とは日本語の文字で、行の最初や最後にすることのできない文字です。テキストの文字間隔を狭くしたくない場合は、<codeph>JustificationStyle.PUSH-OUT-ONLY</codeph> を指定します。<codeph>JustificationRule.SPACE</codeph> の <codeph>justificationRule</codeph> のような効果を得たい場合は、<codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph> を使用します。
		 <p>有効な値は、flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT、flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU、flash.text.engine.JustificationStyle.PUSH_OUT_ONLY、flashx.textLayout.formats.FormatValue.AUTO および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は flashx.textLayout.formats.FormatValue.AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat：カーニングでは、読みやすくするために、特定の文字ペア間でピクセルを調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：カーニングでは、読みやすくするために、特定の文字ペア間でピクセルを調整します。カーニングは、カーニングテーブルを持つすべてのフォントに対してサポートされています。
		 <p>有効な値は、flash.text.engine.Kerning.ON、flash.text.engine.Kerning.OFF、flash.text.engine.Kerning.AUTO および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat：行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：行送りの基準と行送り方向の組み合わせである、行送りモデルを指定します。行送り基準は、<codeph>lineHeight</codeph> プロパティが参照するベースラインです。行送り方向は、<codeph>lineHeight</codeph> プロパティが参照する特定の行までの距離が、その行の前の行のベースラインを基点とするのか、それともその行の後の行のベースラインを基点とするのかを決定します。デフォルト値の <codeph>FormatValue.AUTO</codeph> は、段落の <codeph>locale</codeph> プロパティに基づいて解決されます。これは、日本語と中国語で <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>、他のすべての言語で <codeph>LeadingModel.ROMAN_UP_UP</codeph> となります。<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>有効な値は、flashx.textLayout.formats.LeadingModel.ROMAN_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN、flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD、flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP、flashx.textLayout.formats.LeadingModel.AUTO および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat：フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：フォントで定義された合字のうち、どの合字がテキストで使用されるかを制御します。これらの各設定に出現する合字は、フォントによって異なります。2 つ以上の letter-form が 1 つの文字に結合された場合には、合字が起こります。合字は通常、「fi」、「fl」、「ae」などの文字の組の用に共通のコンポーネントを共有する連続した文字を置き換えます。合字は、ラテン語およびラテン語以外の文字セットの両方で使用されます。LigatureLevel クラス（<codeph>MINIMUM</codeph>、<codeph>COMMON</codeph>、<codeph>UNCOMMON</codeph>、<codeph>EXOTIC</codeph>）の値で有効化された合字は、追加的なものです。各値によって新しい合字が有効になりますが、以前からの型も含まれます。<p><b>メモ：</b>アラビア語またはシリア語フォントを使用する場合は、<codeph>ligatureLevel</codeph> を MINIMUM 以上に設定する必要があります。</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>有効な値は、flash.text.engine.LigatureLevel.MINIMUM、flash.text.engine.LigatureLevel.COMMON、flash.text.engine.LigatureLevel.UNCOMMON、flash.text.engine.LigatureLevel.EXOTIC および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は COMMON になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat：コンテナ内のテキスト折り返しを制御します（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：コンテナ内のテキスト折り返しを制御します（カスケード時に定義されていない場合、デフォルトの値が採用されます）。コンテナ内のテキストを、コンテナの幅に収まるよう設定（<codeph>LineBreak.TO_FIT</codeph>）するか、明示的な復帰またはラインフィード文字の箇所でのみ改行するよう設定（<codeph>LineBreak.EXPLICIT</codeph>）できます。
		 <p>有効な値は、flashx.textLayout.formats.LineBreak.EXPLICIT、flashx.textLayout.formats.LineBreak.TO_FIT および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は TO_FIT になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat：テキストの行送りを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの行送りを制御します。<codeph>LeadingModel</codeph> に基づいた、前または次の行のベースラインから現在の行のベースラインまでの距離は、行内の任意の文字に適用される最大行送り値と等しくなります。これは、数値またはパーセントのいずれかで指定します。パーセントで指定する場合、140％などのように文字列値を入力します。<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>有効な数値は、-720 ～ 720 です。</p>
		 <p>有効なパーセント値は、-1000 ～ 1000％の数値です。</p>
		 <p>有効な値には、flashx.textLayout.formats.FormatValue.INHERIT があります。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 120％になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat：true の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：<codeph>true</codeph> の場合、打ち消し線が適用されます。打ち消し線はテキストの中央に描画される線です。
		 <p>有効な値は、true、false および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は false になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat：テキストのロケールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストのロケールです。大文字小文字変換およびシェイピングを制御します。Unicode Technical Standard #35 に記述されている標準ロケール識別子が使用されます。例えば、「en」、「en_US」および「en-US」はすべて英語で、「ja」は日本語です。 
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は en になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat：下部のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：下部のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。コンテナの下端とテキストの間のスペースです。 値は数値で指定します。 <p> 複数列を含むスクロール可能なコンテナ内の横書きの場合、1 列目とそれに続く列にはコンテナの最下部に空白スペースとしてパディングが表示されますが、最後の列にテキストがすべて収まらない場合、パディングを表示するにはスクロールする必要があります。</p>
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat：左側のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：左側のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。コンテナの左端とテキストの間のスペースです。 値は数値で指定します。<p> 複数列を含むスクロール可能なコンテナ内の縦書きの場合、1 列目とそれに続く列にはコンテナの末尾に空白スペースとしてパディングが表示されますが、最後の列にテキストがすべて収まらない場合、パディングを表示するにはスクロールする必要があります。</p>
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat：右側のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：右側のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。コンテナの右端とテキストの間のスペースです。 値は数値で指定します。
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat：上部のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：上部のインセット（ピクセル単位）です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。コンテナの上端とテキストの間のスペースです。 値は数値で指定します。
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat：段落の終端をどれだけインデントするかを指定する数値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落の終端をどれだけインデントするかを指定する数値（ピクセル単位）です。左から右のテキストでは右端、右から左のテキストでは左端です。 
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat：段落の後に空けるスペースを指定する数値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落の後に空けるスペースを指定する数値（ピクセル単位）です。<codeph>paragraphSpaceBefore</codeph> と連動して折りたたみを行います。
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat：段落の前に空けるスペースを指定する数値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落の前に空けるスペースを指定する数値（ピクセル単位）です。<codeph>paragraphSpaceAfter</codeph> と連動して折りたたみを行います。
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat：段落の始端をどれだけインデントするかを指定する数値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落の始端をどれだけインデントするかを指定する数値（ピクセル単位）です。左から右のテキストでは左端、右から左のテキストでは右端です。 
		 <p>有効な値は、0 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat：このテキストに使用されるレンダリングモードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：このテキストに使用されるレンダリングモードです。埋め込みフォント（<codeph>fontLookup</codeph> プロパティが <codeph>FontLookup.EMBEDDED_CFF</codeph> に設定されている場合）にのみ適用されます。
		 <p>有効な値は、flash.text.engine.RenderingMode.NORMAL、flash.text.engine.RenderingMode.CFF および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は CFF になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 コンテナに表示されるルートエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 コンテナに表示されるルートエレメントを返します。ルートエレメントは、例えば DivElement または TextFlow インスタンスなどです。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>flashx.textLayout.elements.ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>flashx.textLayout.elements.DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat：段落に関連付けるタブストップを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落に関連付けるタブストップを指定します。Setter は、flashx.textLayout.formats.TabStopFormat の配列、圧縮されたストリング表現、未定義、または <codeph>FormatValue.INHERIT</codeph> を受け入れることができます。圧縮されたストリング表現は、常に flashx.textLayout.formats.TabStopFormat の配列に変換されます。 <p>文字列ベースのフォーマットはタブストップのリストです。リスト内で各タブストップは 1 つ以上のスペースにより区切られます。</p><p>タブストップの形式は、&lt;整列タイプ>&lt;整列位置>|&lt;整列トークン> です。</p><p>整列タイプは単一文字で、S、E、C または D（またはそれぞれの小文字）を指定できます。S または s で先頭、E または e で最後尾、C または c で中心、D または d で 10 進法に対応します。整列タイプはオプションで、指定しない場合は S にデフォルト設定されます。</p><p>整列位置は数値で、数値用の FXG スペック（10 進数表記または科学的表記）に従って指定します。整列位置は必須です。</p><p>垂直バーは、整列位置と整列トークンを区切るために使用され、整列トークンが存在する場合にのみ表示されます。</p><p> 整列トークンは、整列タイプが D の場合はオプションで、整列タイプが D 以外の場合は指定できません。整列トークンは、タブストップを終了させるスペースで終了する任意の一連の文字で指定できます（最後のタブストップでは、終了のためのスペースはオプションとなります。つまり整列トークンの終了が示唆されます）。スペースがバックスラッシュ（¥）によりエスケープされている場合、スペースは整列トークンの一部である可能性があります。バックスラッシュが他のバックスラッシュ（¥¥）によりエスケープされる場合、バックスラッシュは整列トークンの一部である可能性があります。整列タイプが D で、整列トークンが指定されない場合、null のデフォルト値が適用されます。</p><p>タブストップが指定されない場合、タブ操作は、行の最後にデフォルト設定されます。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は null になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat：均等配置テキストの、コンテナを基準とした段落内の最後（単一）の行の行揃えです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：均等配置テキストの、コンテナを基準とした段落内の最後（単一）の行の行揃えです。<codeph>textAlign</codeph> が <codeph>TextAlign.JUSTIFY</codeph> に設定されている場合、<codeph>textAlignLast</codeph> は、最後の行（または単一行ブロックの場合は単一行）をどのように行揃えするかを指定します。値は、<codeph>textAlign</codeph> と同じです。
		 <p>有効な値は、flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は START になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat：コンテナを基準とした段落内の行揃えです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：コンテナを基準とした段落内の行揃えです。<codeph>TextAlign.LEFT</codeph> に設定すると、コンテナの左端に沿って行揃えされます。<codeph>TextAlign.RIGHT</codeph> に設定すると、右端に行揃えされます。<codeph>TextAlign.CENTER</codeph> に設定すると、右端と左端から等距離になるよう行が配置されます。<codeph>TextAlign.JUSTIFY</codeph> に設定すると、行はスペースを埋めるよう拡がります。<codeph>TextAlign.START</codeph> は、左から右のテキストでの LEFT の指定、または右から左のテキストでの RIGHT の指定と同様です。<codeph>TextAlign.END</codeph> は、左から右のテキストでの RIGHT の指定、または右から左のテキストでの LEFT の指定と同様です。
		 <p>有効な値は、flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は START になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat：テキストのアルファ（透明）値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストのアルファ（透明）値です。値 0 は完全に透明、値 1 は完全に不透明です。<codeph>textAlpha</codeph> が 0 に設定されている表示オブジェクトは、表示されない場合でも、アクティブです。
		 <p>有効な値は、0 ～ 1 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 1 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat：テキストの装飾です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの装飾です。アンダーラインを適用する場合に使用します。デフォルトは、なしです。
		 <p>有効な値は、flashx.textLayout.formats.TextDecoration.NONE、flashx.textLayout.formats.TextDecoration.UNDERLINE および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は NONE になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 コンテナにコンテンツが表示されている TextFlow オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 コンテナにコンテンツが表示されている TextFlow オブジェクトを返します。<codeph>textFlow</codeph> と <codeph>rootElement</codeph> の値が同じか、またはこれはルートエレメントの TextFlow オブジェクトです。例えば、コンテナのルートエレメントが DivElement の場合、値は、DivElement が属する TextFlow オブジェクトになります。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat：段落の一行目をどれだけインデントするかを指定する数値（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落の一行目をどれだけインデントするかを指定する数値（ピクセル単位）です。一行目インデントをマイナスに指定すると、行はインデント内に寄せられ、コンテナより外に押し出される場合もあります。
		 <p>有効な値は、-1000 ～ 1000 の数値および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat：テキストの均等配置オプションを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの均等配置オプションを指定します。デフォルト値は <codeph>TextJustify.INTER_WORD</codeph> で、空白文字に追加のスペースが追加されます。<codeph>TextJustify.DISTRIBUTE</codeph> は、空白文字や個々の文字間に追加のスペースを追加します。<codeph>JustificationRule.SPACE</codeph> の <codeph>justificationRule</codeph> 値との連携でのみ使用します。
		 <p>有効な値は、flashx.textLayout.formats.TextJustify.INTER_WORD、flashx.textLayout.formats.TextJustify.DISTRIBUTE および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は INTER_WORD になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textLength:get"><apiName>textLength</apiName><shortdesc> コンテナ内の文字数を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> コンテナ内の文字数を返します。コンテナがスクロール可能な場合は、現在表示されていないテキストも含まれる場合があります。この値は、テキストが構成されると（IFlowComposer の <codeph>compose()</codeph> または <codeph>updateAllControllers()</codeph> メソッドが呼び出されると）更新されます。
		 
	 	 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat：テキストの回転角度を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストの回転角度を決定します。
		 <p>有効な値は、flash.text.engine.TextRotation.ROTATE_0、flash.text.engine.TextRotation.ROTATE_180、flash.text.engine.TextRotation.ROTATE_270、flash.text.engine.TextRotation.ROTATE_90、flash.text.engine.TextRotation.AUTO および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は AUTO になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat：各文字の左側にトラッキング（または手動カーニング）をどれだけ適用するかの数値（ピクセル単位または fontSize のパーセント（120％など））です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：各文字の左側にトラッキング（または手動カーニング）をどれだけ適用するかの数値（ピクセル単位または <codeph>fontSize</codeph> のパーセント（120％など））です。kerning が有効にされている場合、フォントのカーニングテーブルの値に <codeph>trackingLeft</codeph> 値が追加されます。kerning が無効にされている場合、<codeph>trackingLeft</codeph> 値が手動カーニングの値として使用されます。正の値と負の値の両方がサポートされます。 
		 <p>有効な数値は、-1000 ～ 1000 です。</p>
		 <p>有効なパーセント値は、-1000 ～ 1000％の数値です。</p>
		 <p>有効な値には、flashx.textLayout.formats.FormatValue.INHERIT があります。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat：各文字の右側にトラッキング（または手動カーニング）をどれだけ適用するかの数値（ピクセル単位または fontSize のパーセント（120％など））です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：各文字の右側にトラッキング（または手動カーニング）をどれだけ適用するかの数値（ピクセル単位または <codeph>fontSize</codeph> のパーセント（120％など））です。kerning が有効にされている場合、フォントのカーニングテーブルの値に <codeph>trackingRight</codeph> 値が追加されます。kerning が無効にされている場合、<codeph>trackingRight</codeph> 値が手動カーニングの値として使用されます。正の値と負の値の両方がサポートされます。 
		 <p>有効な数値は、-1000 ～ 1000 です。</p>
		 <p>有効なパーセント値は、-1000 ～ 1000％の数値です。</p>
		 <p>有効な値には、flashx.textLayout.formats.FormatValue.INHERIT があります。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は 0 になります。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat：このテキストに使用される文字の大文字小文字区別のタイプです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：このテキストに使用される文字の大文字小文字区別のタイプです。次に例を示します。<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>有効な値は、flashx.textLayout.formats.TLFTypographicCase.DEFAULT、flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS、flashx.textLayout.formats.TLFTypographicCase.UPPERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は DEFAULT になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:userStyles:get"><apiName>userStyles</apiName><shortdesc> 
		 ContainerController インスタンスの userStyles オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
		 ContainerController インスタンスの <codeph>userStyles</codeph> オブジェクトです。getter は、<codeph>userStyles</codeph> オブジェクトのコピーを作成します。これは、<i>stylename-value</i> ペアの配列です。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat：垂直方向の行揃えまたは均等配置です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：垂直方向の行揃えまたは均等配置です（カスケード時に定義されていない場合、デフォルトの値が採用されます）。コンテナ内で TextFlow エレメントを整列させる方法を決定します。
		 <p>有効な値は、flashx.textLayout.formats.VerticalAlign.TOP、flashx.textLayout.formats.VerticalAlign.MIDDLE、flashx.textLayout.formats.VerticalAlign.BOTTOM、flashx.textLayout.formats.VerticalAlign.JUSTIFY および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティの値は TOP になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> 垂直方向のスクロールポリシーを指定します。ScrollPolicy クラスの定数、ON、OFF または AUTO のいずれかを割り当てて設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 垂直方向のスクロールポリシーを指定します。ScrollPolicy クラスの定数、ON、OFF または AUTO のいずれかを割り当てて設定します。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> ステージ上の現在の垂直方向のスクロール位置を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> ステージ上の現在の垂直方向のスクロール位置を指定します。この値は、上端からのピクセル数を指定します。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat：テキストを TextFlow にインポートする際、空白を圧縮または保持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>設定値がこのプロパティの範囲にない場合。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：テキストを TextFlow にインポートする際、空白を圧縮または保持します。<codeph>WhiteSpaceCollapse.PRESERVE</codeph> では、すべての空白文字が保持されます。<codeph>WhiteSpaceCollapse.COLLAPSE</codeph> では、インポートしたテキストブロック内で、改行、タブ、行送りまたは行末の空白が削除されます。改行タグ () および Unicode の行区切り文字は保持されます。
		 <p>有効な値は、flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE、flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE および flashx.textLayout.formats.FormatValue.INHERIT です。</p>
		 <p>デフォルト値は定義されていません。つまり、未設定です。</p>
		 <p>カスケード時に定義されていない場合、このプロパティは祖先から値を継承します。このプロパティを設定している祖先がない場合、値は COLLAPSE になります。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerControllerInitialFormat:set"><apiName>containerControllerInitialFormat</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>