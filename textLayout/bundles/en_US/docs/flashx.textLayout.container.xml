<apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiDetail/><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><shortdesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The ColumnState class calculates the sizes and locations of columns using
	 the width of the container and the container attributes. You can create instances of this class 
	 independently to calculate column values, or you can get the column values that 
	 were used for the text after the container has been composed or updated (redrawn).
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ColumnState:ColumnState"><apiName>ColumnState</apiName><shortdesc>
		 Constructor function - creates a ColumnState object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>blockProgression</apiItemName><apiType value="String"/><apiDesc>The direction of lines for the textflow, either BlockProgression.TB (top-to-bottom) or 
		 		BlockProgression.RL (right-to-left).
		 </apiDesc></apiParam><apiParam><apiItemName>columnDirection</apiItemName><apiType value="String"/><apiDesc>The direction of column layout for the text flow, either Direction.RTL (right-to-left) or 
		 		Direction.LTR (left-to-right).
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>A ContainerController instance whose attributes are used to calculate the column values.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiDesc>The horizontal extent, in pixels, allowed for text inside the container.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiDesc>The vertical extent, in pixels, allowed for text inside the container.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Constructor function - creates a ColumnState object.
		 
		 If the values of <codeph>controller.compositionWidth</codeph> and <codeph>controller.compositionHeight</codeph> equal
		 <codeph>NaN</codeph> (not a number), the constructor measures the container's contents to determine the actual 
		 composition width and height that feed into ColumnState.
		 
		 Use the constants defined by the <codeph>flashx.textLayout.formats.BlockProgression</codeph> class to 
		 specify the value of the <codeph>blockProgression</codeph> parameter. Use the constants defined by
		 <codeph>flashx.textLayout.formats.Direction</codeph> to specify the value of the <codeph>columnDirection</codeph> 
		 parameter.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>BlockProgression</linktext></link><link href="flashx.textLayout.formats.xml#Direction"><linktext>Direction</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.container:ColumnState:getColumnAt"><apiName>getColumnAt</apiName><shortdesc> 
		 Returns the area that a column takes within the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The area of the specified column.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>The relative position of the column among all columns in the container, with the first
		 	column at position 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Returns the area that a column takes within the container. Allows you to access the area for a 
		 specific column.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ColumnState:columnCount:get"><apiName>columnCount</apiName><shortdesc> 
		 The number of columns in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 The number of columns in the container. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnGap:get"><apiName>columnGap</apiName><shortdesc> 
		 The amount of space, in pixels, left between columns in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The amount of space, in pixels, left between columns in the container.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnWidth:get"><apiName>columnWidth</apiName><shortdesc> 
		 The width of columns, in pixels, in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 The width of columns, in pixels, in the container. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
	 The  ContainerController class defines the relationship between a TextFlow object and a container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 The  ContainerController class defines the relationship between a TextFlow object and a container.
	 A TextFlow may have one or more rectangular areas that can hold text; the text is said to be flowing
	 through the containers. Each container is a Sprite that is the parent DisplayObject for the TextLines.
	 Each container has a ContainerController that manages the container; the controller holds the target 
	 width and height for the text area, populates the container with TextLines, and handles scrolling. A
	 controller also has a format associated with it that allows some formatting attributes to be applied 
	 to the text in the container. This allows, for instance, a TextFlow to have one container where the
	 text appears in a single column, and a second container in the same TextFlow with two column text. Not
	 all formatting attributes that can be applied to the container will affect the text; only the ones that
	 affect container-level layout. The diagram below illustrates the relationship between the TextFlow,
	 its flowComposer, and the display list.
	 
	 <p><adobeimage alt="IContainerController" href="../../../images/textLayout_multiController.gif"/></p>
	 
	 </apiDesc><example conref="examples\ContainerControllerExample1.as"/><example conref="examples\ContainerControllerExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link><link href="" invalidHref="flashx.textLayout.container.TextContainerController.xml"><linktext>flashx.textLayout.container.TextContainerController</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ContainerController:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
		 Constructor - creates a ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>The DisplayObjectContainer in which to manage the text lines.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>The initial width for composing text in the container.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>The initial height for composing text in the container.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructor - creates a ContainerController instance. The ContainerController has a default <codeph>compositionWidth</codeph>
		 and <codeph>compositionHeight</codeph> so that some text appears in the container if you don't specify its width
		 height.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:ContainerController:activateHandler"><apiName>activateHandler</apiName><shortdesc> Processes the Event.ACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.ACTIVATE</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_activateHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addBackgroundShape"><apiName>addBackgroundShape</apiName><shortdesc>
		 Adds a flash.display.Shape object on which background shapes (such as background color) are drawn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc><codeph>flash.display.Shape</codeph> object to add
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.Shape</codeph> object on which background shapes (such as background color) are drawn.
		 The default implementation of this method, which may be overriden, adds the object to <codeph>container</codeph>
		 just before the first <codeph>flash.text.engine.TextLine</codeph> child, if one exists, and after the last exisiting
		 child otherwise. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addSelectionContainer"><apiName>addSelectionContainer</apiName><shortdesc>
		 Adds a flash.display.DisplayObjectContainer object to which selection shapes (such as block selection highlight, cursor etc.) are added.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc><codeph>flash.display.DisplayObjectContainer</codeph> object to add
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.display.DisplayObjectContainer</codeph> object to which selection shapes (such as block selection highlight, cursor etc.) are added.
		 The default implementation of this method, which may be overriden, has the following behavior:
		 The object is added just before first <codeph>flash.text.engine.TextLine</codeph> child of <codeph>container</codeph> if one exists 
		 and the object is opaque and has normal blend mode. 
		 In all other cases, it is added as the last child of <codeph>container</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addTextLine"><apiName>addTextLine</apiName><shortdesc>
		 Adds a flash.text.engine.TextLine object as a descendant of container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>the <codeph>flash.text.engine.TextLine</codeph> object to add
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>insertion index of the text line in its parent 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Adds a <codeph>flash.text.engine.TextLine</codeph> object as a descendant of <codeph>container</codeph>.
		 The default implementation of this method, which may be overriden, adds the object
		 as a direct child of <codeph>container</codeph> at the specified index.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:autoScrollIfNecessary"><apiName>autoScrollIfNecessary</apiName><shortdesc> 
		 Handle a scroll event during a "drag" selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mouseX</apiItemName><apiType value="int"/><apiDesc>The horizontal position of the mouse cursor on the stage.
		 </apiDesc></apiParam><apiParam><apiItemName>mouseY</apiItemName><apiType value="int"/><apiDesc>The vertical position of the mouse cursor  on the stage.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Handle a scroll event during a "drag" selection. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:clearStyle"><apiName>clearStyle</apiName><shortdesc> Clears the style specified by styleProp from this FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Clears the style specified by <codeph>styleProp</codeph> from this FlowElement. Sets the value to
		 <codeph>undefined</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> 
		 Creates a context menu for the ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> 
		 Creates a context menu for the ContainerController. Use the methods of the ContextMenu class to 
		 add items to the menu.
		 <p>You can override this method to define a custom context menu.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> Processes the Event.DEACTIVATE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Event.DEACTIVATE</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:editHandler"><apiName>editHandler</apiName><shortdesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Processes an edit event (CUT, COPY, PASTE, SELECT_ALL) when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_editHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Processes the FocusEvent.KEY_FOCUS_CHANGE and FocusEvent.MOUSE_FOCUS_CHANGE events
		 when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> and <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> events
		 when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_IN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_IN</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_focusInHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FocusEvent.FOCUS_IN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> Processes the FocusEvent.FOCUS_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.FOCUS_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> 
		 Returns the area that the text occupies, as reflected by the last compose or update operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>describes the area that the text occupies.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Returns the area that the text occupies, as reflected by the last compose or update operation. 
		 The width and the height might be estimated, if the container is scrollable and the text exceeds the 
		 visible area.
		 
		 </apiDesc><example conref="examples\ContainerController_getContentBoundsExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:getFirstTextLineChildIndex"><apiName>getFirstTextLineChildIndex</apiName><shortdesc>
		 Gets the index at which the first text line must appear in its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>the index at which the first text line must appear in its parent.
		 
		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Gets the index at which the first text line must appear in its parent.
		 The default implementation of this method, which may be overriden, returns the child index 
		 of the first <codeph>flash.text.engine.TextLine</codeph> child of <codeph>container</codeph>
		 if one exists, and that of the last child of <codeph>container</codeph> otherwise. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the delta amount of space to scroll
		 
		 </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>The number of lines to scroll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Figure out the scroll distance required to scroll up or down by the specified number of lines.
		 Negative numbers scroll upward, bringing more of the top of the TextFlow into view. Positive numbers 
		 scroll downward, bringing the next line from the bottom into full view.
		 
		 <p>When scrolling up, for example, the method makes the next line fully visible. If the next line is partially
		 obscured and the number of lines specified is 1, the partially obscured line becomes fully visible.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getStyle"><apiName>getStyle</apiName><shortdesc> Returns the value of the style specified by the styleProp parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The current value for the specified style.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style property whose value you want.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Returns the value of the style specified by the <codeph>styleProp</codeph> parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Processes the IMEEvent.IME_START_COMPOSITION event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> The IMEEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>IMEEvent.IME_START_COMPOSITION</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.IMEEvent.IME_START_COMPOSITION.xml"><linktext>flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:invalidateContents"><apiName>invalidateContents</apiName><shortdesc> 
		 Marks all the text in this container as needing composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Marks all the text in this container as needing composing. 
		 
		 </apiDesc><example conref="examples\ContainerController_invalidateContentsExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Determines whether the container has text that requires composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true if the container requires composing.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Determines whether the container has text that requires composing. 
		 
		 </apiDesc><example conref="examples\ContainerController_isDamagedExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> Processes the KeyboardEvent.KEY_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>KeyboardEvent.KEY_DOWN</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> Processes the FocusEvent.KEY_FOCUS_CHANGE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> Processes the Keyboard.KEY_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>The KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>Keyboard.KEY_UP</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_keyUpHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Processes the ContextMenuEvent.MENU_SELECT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>ContextMenuEvent.MENU_SELECT</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_menuSelectHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> Processes the MouseEvent.DOUBLE_CLICK event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.DOUBLE_CLICK</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_mouseDoubleClickHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_DOWN event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_DOWN</codeph> event when the client manages events. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_MOVE event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_MOVE</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_OUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_OUT</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_OVER event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_OVER</codeph> event when the client manages events. 
		 
		 </apiDesc><example conref="examples\ContainerController_mouseOverHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Processes the MouseEvent.MOUSE_UP event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Processes the <codeph>MouseEvent.MOUSE_UP</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> Processes the MouseEvent.MOUSE_WHEEL event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>MouseEvent.MOUSE_WHEEL</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeSelectionContainer"><apiName>removeSelectionContainer</apiName><shortdesc>
		 Removes the flash.display.DisplayObjectContainer object which contains selection shapes (such as block selection highlight, cursor etc.).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc><codeph>flash.display.DisplayObjectContainer</codeph> object to remove
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes the <codeph>flash.display.DisplayObjectContainer</codeph> object which contains selection shapes (such as block selection highlight, cursor etc.).
		 The default implementation of this method, which may be overriden, removes the object from its parent if one exists.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeTextLine"><apiName>removeTextLine</apiName><shortdesc>
		 Removes a flash.text.engine.TextLine object from its parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>the <codeph>flash.text.engine.TextLine</codeph> object to remove 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Removes a <codeph>flash.text.engine.TextLine</codeph> object from its parent. 
		 The default implementation of this method, which may be overriden, removes the object
		 from <codeph>container</codeph> if it is a direct child of the latter.
		 
		 This method may be called even if the object is not a descendant of <codeph>container</codeph>.
		 Any implementation of this method must ensure that no action is taken in this case.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 Scrolls so that the text range is visible in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The end of the selection that is changed when you extend the selection. It can be
		 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	The stable end of the selection when you extend the selection. It can be either 
		 	the start or the end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Scrolls so that the text range is visible in the container.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:selectRange"><apiName>selectRange</apiName><shortdesc> 
		 Sets the range of selected text in a component implementing ITextSupport.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the anchor end of the selection
		 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>The zero-based index value of the character at the active end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the range of selected text in a component implementing ITextSupport.
		 If either of the arguments is out of bounds the selection should not be changed.
		 Components which wish to support inline IME should call into this method.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setCompositionSize"><apiName>setCompositionSize</apiName><shortdesc> 
		 Sets the width and height allowed for text in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>The width in pixels that's available for text in the container.
		 </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>The height in pixels that's available for text in the container.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the width and height allowed for text in the container. 
		 
		 </apiDesc><example conref="examples\ContainerController_setCompositionSizeExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setStyle"><apiName>setStyle</apiName><shortdesc> 
		 Sets the value of the style specified by the styleProp parameter to the value
		 specified by the newValue parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>The name of the style property whose value you want to set.
		 </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>The value that you want to assign to the style.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Sets the value of the style specified by the <codeph>styleProp</codeph> parameter to the value
		 specified by the <codeph>newValue</codeph> parameter.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> Processes the TextEvent.TEXT_INPUT event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> The TextEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>TextEvent.TEXT_INPUT</codeph> event when the client manages events.
		 
		 </apiDesc><example conref="examples\ContainerController_textInputHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:updateVisibleRectangle"><apiName>updateVisibleRectangle</apiName><shortdesc> 
		 If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
		 halfway in view are clipped to the scrollable region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 If scrolling, sets the scroll rectangle to the container rectangle so that any lines that are 
		 halfway in view are clipped to the scrollable region. If not scrolling, clear the
		 scroll rectangle so that no clipping occurs.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ContainerController:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Returns the first character in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Returns the first character in the container. If this is not the first container in the flow,
		 this value is updated when the text is composed, that is when the IFlowComposer's <codeph>compose()</codeph> or 
		 <codeph>updateAllControllers()</codeph> methods are called.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline to which the dominant baseline aligns. For example, if you set <codeph>dominantBaseline</codeph> to ASCENT, setting <codeph>alignmentBaseline</codeph> to DESCENT aligns the top of the text with the DESCENT baseline, or below the line.  The largest element in the line generally determines the baselines.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the background (adopts default value if undefined during cascade). A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with alpha set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Background color of the text (adopts default value if undefined during cascade). Can be either the constant value  <codeph>BackgroundColor.TRANSPARENT</codeph>, or a hexadecimal value that specifies the three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green.
		 <p>Legal values as a string are flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT and uints from 0x0 to 0xffffffff.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the dominantBaseline value.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Amount to shift the baseline from the <codeph>dominantBaseline</codeph> value. Units are in pixels, or a percentage of <codeph>fontSize</codeph> (in which case, enter a string value, like 140%).  Positive values shift the line up for horizontal text (right for vertical) and negative values shift it down for horizontal (left for vertical). 
		 <p>Legal values are flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies a vertical or horizontal progression of line placement.
		 Lines are either placed top-to-bottom (<codeph>BlockProgression.TB</codeph>, used for horizontal text) or right-to-left (<codeph>BlockProgression.RL</codeph>, used for vertical text).
		 <p>Legal values are flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls where lines are allowed to break when breaking wrapping text into multiple lines. Set to <codeph>BreakOpportunity.AUTO</codeph> to break text normally. Set to <codeph>BreakOpportunity.NONE</codeph> to <i>not</i> break the text unless the text would overrun the measure and there are no other places to break the line. Set to <codeph>BreakOpportunity.ANY</codeph> to allow the line to break anywhere, rather than just between words. Set to <codeph>BreakOpportunity.ALL</codeph> to have each typographic cluster put on a separate line (useful for text on a path).
		 <p>Legal values are flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of CFF hinting used for this text. CFF hinting determines whether the Flash runtime forces strong horizontal stems to fit to a sub pixel grid or not. This property applies only if the <codeph>renderingMode</codeph> property is set to <codeph>RenderingMode.CFF</codeph>, and the font is embedded (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>). At small screen sizes, hinting produces a clear, legible text for human readers.
		 <p>Legal values are flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat:
		 Color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Color of the text. A hexadecimal number that specifies three 8-bit RGB (red, green, blue) values; for example, 0xFF0000 is red and 0x00FF00 is green. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number of text columns (adopts default value if undefined during cascade).
		 The column number overrides the  other column settings. Value is an integer, or <codeph>FormatValue.AUTO</codeph> if unspecified. If <codeph>columnCount</codeph> is not specified,<codeph>columnWidth</codeph> is used to create as many columns as can fit in the container.
		 <p>Legal values as a string are flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT and from ints from 1 to 50.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the amount of gutter space, in pixels, to leave between the columns (adopts default value if undefined during cascade).
		 Value is a Number
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnState:get"><apiName>columnState</apiName><shortdesc> 
		 Returns a ColumnState object, which describes the number and characteristics of columns in
		 the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ColumnState</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns a ColumnState object, which describes the number and characteristics of columns in
		 the container. These values are updated when the text is recomposed, either as a result
		 of <codeph>IFlowComposer.compose()</codeph> or <codeph>IFlowComposer.updateAllControllers()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ColumnState"><linktext>ColumnState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Column width in pixels (adopts default value if undefined during cascade).
		 If you specify the width of the columns, but not the count, TextLayout will create as many columns of that width as possible, given the  container width and <codeph>columnGap</codeph> settings. Any remainder space is left after the last column. Value is a Number.
		 <p>Legal values as a string are flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT and numbers from 0 to 8000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> 
		 Returns the vertical extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Returns the vertical extent allowed for text inside the container. The value is specified in pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> 
		 Returns the horizontal extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Returns the horizontal extent allowed for text inside the container. The value is specified in pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Returns an ITextLayoutFormat instance with the attributes applied to this container, including the attributes inherited from its
		 root element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns an ITextLayoutFormat instance with the attributes applied to this container, including the attributes inherited from its
		 root element.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/rootElement"><linktext>rootElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:container:get"><apiName>container</apiName><shortdesc> 
		 Returns the container display object that holds the text lines for this ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> 
		 Returns the container display object that holds the text lines for this ContainerController instance. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/ContainerController()"><linktext>ContainerController()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Returns the coreStyles on this ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Returns the <codeph>coreStyles</codeph> on this ContainerController.  Note that the getter makes a copy of the core 
		 styles dictionary. The coreStyles object encapsulates those formats that are defined by TextLayoutFormat. The
		 <codeph>coreStyles</codeph> object consists of an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of digit case used for this text. Setting the value to <codeph>DigitCase.OLD_STYLE</codeph> approximates lowercase letterforms with varying ascenders and descenders. The figures are proportionally spaced. This style is only available in selected typefaces, most commonly in a supplemental or expert font. The <codeph>DigitCase.LINING</codeph> setting has all-cap height and is typically monospaced to line up in charts.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Legal values are flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat:
		 Type of digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Type of digit width used for this text. This can be <codeph>DigitWidth.PROPORTIONAL</codeph>, which looks best for individual numbers, or <codeph>DigitWidth.TABULAR</codeph>, which works best for numbers in tables, charts, and vertical rows.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Legal values are flash.text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the default bidirectional embedding level of the text in the text block. 
		 Left-to-right reading order, as in Latin-style scripts, or right-to-left reading order, as in Arabic or Hebrew. This property also affects column direction when it is applied at the container level. Columns can be either left-to-right or right-to-left, just like text. Below are some examples:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Legal values are flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the alignmentBaseline to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies which element baseline snaps to the <codeph>alignmentBaseline</codeph> to determine the vertical position of the element on the line. A value of <codeph>TextBaseline.AUTO</codeph> selects the dominant baseline based on the <codeph>locale</codeph> property of the parent paragraph.  For Japanese and Chinese, the selected baseline value is <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>. These baseline choices are determined by the choice of font and the font size.<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Legal values are flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the baseline position of the first line in the container. Which baseline this property refers to depends on the container-level locale.  For Japanese and Chinese, it is <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; for all others it is <codeph>TextBaseline.ROMAN</codeph>.
		 The offset from the top inset (or right inset if <codeph>blockProgression</codeph> is RL) of the container to the baseline of the first line can be either <codeph>BaselineOffset.ASCENT</codeph>, meaning equal to the ascent of the line, <codeph>BaselineOffset.LINE_HEIGHT</codeph>, meaning equal to the height of that first line, or any fixed-value number to specify an absolute distance. <codeph>BaselineOffset.AUTO</codeph> aligns the ascent of the line with the container top inset.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Legal values as a string are flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT and numbers from 0 to 1000.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 
		 Returns the flow composer object that composes and highlights text into the container that this 
		 controller manages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the flow composer object that composes and highlights text into the container that this 
		 controller manages. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		  The name of the font to use, or a comma-separated list of font names. The Flash runtime renders the element with the first available font in the list. For example Arial, Helvetica, _sans causes the player to search for Arial, then Helvetica if Arial is not found, then _sans if neither is found.
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat:
		 Font lookup to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Font lookup to use. Specifying <codeph>FontLookup.DEVICE</codeph> uses the fonts installed on the system that is running the SWF file. Device fonts result in a smaller movie size, but text is not always rendered the same across different systems and platforms. Specifying <codeph>FontLookup.EMBEDDED_CFF</codeph> uses font outlines embedded in the published SWF file. Embedded fonts increase the size of the SWF file (sometimes dramatically), but text is consistently displayed in the chosen font.
		 <p>Legal values are flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat:
		 The size of the text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The size of the text in pixels.
		 <p>Legal values are numbers from 1 to 720 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 Style of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Style of text. May be <codeph>FontPosture.NORMAL</codeph>, for use in plain text, or <codeph>FontPosture.ITALIC</codeph> for italic. This property applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Weight of text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Weight of text. May be <codeph>FontWeight.NORMAL</codeph> for use in plain text, or <codeph>FontWeight.BOLD</codeph>. Applies only to device fonts (<codeph>fontLookup</codeph> property is set to flash.text.engine.FontLookup.DEVICE).
		 <p>Legal values are flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:format:get"><apiName>format</apiName><shortdesc> 
		 Stores the ITextLayoutFormat object that contains the attributes for this container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Stores the ITextLayoutFormat object that contains the attributes for this container. 
		 The controller inherits the container properties from the TextFlow of which it is part. 
		 This property allows different controllers in the same text flow to have, for example, 
		 different column settings or padding.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies the horizontal scrolling policy, which you can set by assigning one of the constants of
		 the ScrollPolicy class: ON, OFF, or AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> Specifies the current horizontal scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current horizontal scroll location on the stage. The value specifies the number of
		 pixels from the left.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:interactionManager:get"><apiName>interactionManager</apiName><shortdesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Rule used to justify text in a paragraph.
		 Default value is <codeph>FormatValue.AUTO</codeph>, which justifies text based on the paragraph's <codeph>locale</codeph> property. For all languages except Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustificationRule.SPACE</codeph>, which adds extra space to the space characters.  For Japanese and Chinese, <codeph>FormatValue.AUTO</codeph> becomes <codeph>JustficationRule.EAST_ASIAN</codeph>. In part, justification changes the spacing of punctuation. In Roman text the comma and Japanese periods take a full character's width but in East Asian text only half of a character's width. Also, in the East Asian text the spacing between sequential punctuation marks becomes tighter, obeying traditional East Asian typographic conventions. Note, too, in the example below the leading that is applied to the second line of the paragraphs. In the East Asian version, the last two lines push left. In the Roman version, the second and following lines push left.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Legal values are flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The style used for justification of the paragraph. Used only in conjunction with a <codeph>justificationRule</codeph> setting of <codeph>JustificationRule.EAST_ASIAN</codeph>.
		 Default value of <codeph>FormatValue.AUTO</codeph> is resolved to <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> for all locales.  The constants defined by the JustificationStyle class specify options for handling kinsoku characters, which are Japanese characters that cannot appear at either the beginning or end of a line. If you want looser text, specify <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. If you want behavior that is like what you get with the  <codeph>justificationRule</codeph> of <codeph>JustificationRule.SPACE</codeph>, use <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Legal values are flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Kerning adjusts the pixels between certain character pairs to improve readability. Kerning is supported for all fonts with kerning tables.
		 <p>Legal values are flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the leading model, which is a combination of leading basis and leading direction.
		 Leading basis is the baseline to which the <codeph>lineHeight</codeph> property refers. Leading direction determines whether the <codeph>lineHeight</codeph> property refers to the distance of a line's baseline from that of the line before it or the line after it. The default value of <codeph>FormatValue.AUTO</codeph> is resolved based on the paragraph's <codeph>locale</codeph> property.  For Japanese and Chinese, it is <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> and for all others it is <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b>Leading Basis:</b></p><p><adobeimage alt="leadingBasis1" href="../../../images/textLayout_LB1.png"/>    <adobeimage alt="leadingBasis2" href="../../../images/textLayout_LB2.png"/>    <adobeimage alt="leadingBasis3" href="../../../images/textLayout_LB3.png"/></p><p><b>Leading Direction:</b></p><p><adobeimage alt="leadingDirection1" href="../../../images/textLayout_LD1.png"/>    <adobeimage alt="leadingDirection2" href="../../../images/textLayout_LD2.png"/>    <adobeimage alt="leadingDirection3" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Legal values are flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls which of the ligatures that are defined in the font may be used in the text. The ligatures that appear for each of these settings is dependent on the font. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'. They are used with both Latin and Non-Latin character sets. The ligatures enabled by the values of the LigatureLevel class - <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, and <codeph>EXOTIC</codeph> - are additive. Each value enables a new set of ligatures, but also includes those of the previous types.<p><b>Note: </b>When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Legal values are flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Controls word wrapping within the container (adopts default value if undefined during cascade).
		 Text in the container may be set to fit the width of the container (<codeph>LineBreak.TO_FIT</codeph>), or can be set to break only at explicit return or line feed characters (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Legal values are flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat:
		 Leading controls for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Leading controls for the text. The distance from the baseline of the previous or the next line (based on <codeph>LeadingModel</codeph>) to the baseline of the current line is equal to the maximum amount of the leading applied to any character in the line. This is either a number or a percent.  If specifying a percent, enter a string value, like 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Legal values as a number are from -720 to 720.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat:
		 If true, applies strikethrough, a line drawn through the middle of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 If <codeph>true</codeph>, applies strikethrough, a line drawn through the middle of the text.
		 <p>Legal values are true, false and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat:
		 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The locale of the text. Controls case transformations and shaping. Standard locale identifiers as described in Unicode Technical Standard #35 are used. For example en, en_US and en-US are all English, ja is Japanese. 
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat:
		 Botttom inset in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Botttom inset in pixels (adopts default value if undefined during cascade).
		 Space between the bottom edge of the container and the text.  Value is a Number. <p> With horizontal text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the bottom of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Left inset in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Left inset in pixels (adopts default value if undefined during cascade).
		 Space between the left edge of the container and the text.  Value is a Number.<p> With vertical text, in scrollable containers with multiple columns, the first and following columns will show the padding as blank space at the end of the container, but for the last column, if the text doesn't all fit, you may have to scroll in order to see the padding.</p>
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Right inset in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Right inset in pixels (adopts default value if undefined during cascade).
		 Space between the right edge of the container and the text.  Value is a Number.
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat:
		 Top inset in pixels (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Top inset in pixels (adopts default value if undefined during cascade).
		 Space between the top edge of the container and the text.  Value is a Number.
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's end edge. Refers to the right edge in left-to-right text and the left edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave after the paragraph.
		 Collapses in tandem with  <codeph>paragraphSpaceBefore</codeph>.
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies the amount of space, in pixels, to leave before the paragraph. 
		 Collapses in tandem with <codeph>paragraphSpaceAfter</codeph>.
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the paragraph's start edge. Refers to the left edge in left-to-right text and the right edge in right-to-left text. 
		 <p>Legal values are numbers from 0 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The rendering mode used for this text.  Applies only to embedded fonts (<codeph>fontLookup</codeph> property is set to <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Legal values are flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Returns the root element that appears in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the root element that appears in the container. The root element could be a DivElement or TextFlow
		 instance, for example.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>flashx.textLayout.elements.ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>flashx.textLayout.elements.DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies the tab stops associated with the paragraph.
		 Setters can take an array of flashx.textLayout.formats.TabStopFormat, a condensed string representation, undefined, or <codeph>FormatValue.INHERIT</codeph>. The condensed string representation is always converted into an array of flashx.textLayout.formats.TabStopFormat. <p>The string-based format is a list of tab stops, where each tab stop is delimited by one or more spaces.</p><p>A tab stop takes the following form: &lt;alignment type&gt;&lt;alignment position&gt;|&lt;alignment token&gt;.</p><p>The alignment type is a single character, and can be S, E, C, or D (or lower-case equivalents). S or s for start, E or e for end, C or c for center, D or d for decimal. The alignment type is optional, and if its not specified will default to S.</p><p>The alignment position is a Number, and is specified according to FXG spec for Numbers (decimal or scientific notation). The alignment position is required.</p><p>The vertical bar is used to separate the alignment position from the alignment token, and should only be present if the alignment token is present.</p><p> The alignment token is optional if the alignment type is D, and should not be present if the alignment type is anything other than D. The alignment token may be any sequence of characters terminated by the space that ends the tab stop (for the last tab stop, the terminating space is optional; end of alignment token is implied). A space may be part of the alignment token if it is escaped with a backslash (\ ). A backslash may be part of the alignment token if it is escaped with another backslash (\\). If the alignment type is D, and the alignment token is not specified, it will take on the default value of null.</p><p>If no tab stops are specified, a tab action defaults to the end of the line.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of the last (or only) line in the paragraph relative to the container in justified text.
		 If <codeph>textAlign</codeph> is set to <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> specifies how the last line (or only line, if this is a one line block) is aligned. Values are similar to <codeph>textAlign</codeph>.
		 <p>Legal values are flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alignment of lines in the paragraph relative to the container.
		 <codeph>TextAlign.LEFT</codeph> aligns lines along the left edge of the container. <codeph>TextAlign.RIGHT</codeph> aligns on the right edge. <codeph>TextAlign.CENTER</codeph> positions the line equidistant from the left and right edges. <codeph>TextAlign.JUSTIFY</codeph> spreads the lines out so they fill the space. <codeph>TextAlign.START</codeph> is equivalent to setting left in left-to-right text, or right in right-to-left text. <codeph>TextAlign.END</codeph> is equivalent to setting right in left-to-right text, or left in right-to-left text.
		 <p>Legal values are flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Alpha (transparency) value for the text. A value of 0 is fully transparent, and a value of 1 is fully opaque. Display objects with <codeph>textAlpha</codeph> set to 0 are active, even though they are invisible.
		 <p>Legal values are numbers from 0 to 1 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat:
		 Decoration on text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Decoration on text. Use to apply underlining; default is none.
		 <p>Legal values are flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Returns the TextFlow object whose content appears in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Returns the TextFlow object whose content appears in the container. Either the <codeph>textFlow</codeph> and  
		 <codeph>rootElement</codeph> values are the same, or this is the root element's TextFlow object. For example,
		 if the container's root element is a DivElement, the value would be the TextFlow object to which the
		 DivElement belongs.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 A Number that specifies, in pixels, the amount to indent the first line of the paragraph.
		 A negative indent will push the line into the margin, and possibly out of the container.
		 <p>Legal values are numbers from -1000 to 1000 and flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Specifies options for justifying text.
		 Default value is <codeph>TextJustify.INTER_WORD</codeph>, meaning that extra space is added to the space characters. <codeph>TextJustify.DISTRIBUTE</codeph> adds extra space to space characters and between individual letters. Used only in conjunction with a <codeph>justificationRule</codeph> value of <codeph>JustificationRule.SPACE</codeph>.
		 <p>Legal values are flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textLength:get"><apiName>textLength</apiName><shortdesc> Returns the total number of characters in the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Returns the total number of characters in the container. This can include text that is not currently in view,
		 if the container is scrollable. This value is updated when the text is composed (when the IFlowComposer's <codeph>compose()</codeph> 
		 or <codeph>updateAllControllers()</codeph> methods are called).
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Determines the number of degrees to rotate this text.
		 <p>Legal values are flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the left of each character. If kerning is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingLeft</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of fontSize, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Number in pixels (or percent of <codeph>fontSize</codeph>, like 120%) indicating the amount of tracking (manual kerning) to be applied to the right of each character.  If kerning is enabled, the <codeph>trackingRight</codeph> value is added to the values in the kerning table for the font. If kerning is disabled, the <codeph>trackingRight</codeph> value is used as a manual kerning value. Supports both positive and negative values. 
		 <p>Legal values as a number are from -1000 to 1000.</p>
		 <p>Legal values as a percent are numbers from -1000% to 1000%.</p>
		 <p>Legal values include flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 The type of typographic case used for this text. Here are some examples:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Legal values are flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:userStyles:get"><apiName>userStyles</apiName><shortdesc> 
		 The userStyles object for a ContainerController instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
		 The <codeph>userStyles</codeph> object for a ContainerController instance.  The getter makes a copy of the 
		 <codeph>userStyles</codeph> object, which is an array of <i>stylename-value</i> pairs.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Vertical alignment or justification (adopts default value if undefined during cascade).
		 Determines how TextFlow elements align within the container.
		 <p>Legal values are flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will have a value of TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Specifies the vertical scrolling policy, which you can set by assigning one of the constants of the ScrollPolicy
		 class: ON, OFF, or, AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> Specifies the current vertical scroll location on the stage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Specifies the current vertical scroll location on the stage. The value specifies the number of 
		 pixels from the top.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>when set value is not within range for this property
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat:
		 Collapses or preserves whitespace when importing text into a TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> retains all whitespace characters. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> removes newlines, tabs, and leading or trailing spaces within a block of imported text. Line break tags () and Unicode line separator characters are retained.
		 <p>Legal values are flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Default value is undefined indicating not set.</p>
		 <p>If undefined during the cascade this property will inherit its value from an ancestor. If no ancestor has set this property, it will have a value of COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerControllerInitialFormat:set"><apiName>containerControllerInitialFormat</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Manages text in a container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="callInContext"/><Exclude kind="method" name="getBaseSWFContext"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> Manages text in a container. Assumes that it manages all children of the container. 
	 Consider using TextContainerManager for better performance in cases where there is a 
	 one container per TextFlow, and the TextFlow is not the main focus, is static text, or
	 is infrequently selected. Good for text in form fields, for example.
	 
	 </apiDesc><example conref="examples\TextContainerManager.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object each time a container has had new DisplayObjects added or updated as a result of composition.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object each time it is damaged 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Dispatched by a TextFlow object after text is scrolled within a controller container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched by a TextFlow object after text is scrolled within a controller container.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a InlineGraphicElement is resized due to having width or height as auto or percent 
	 and the graphic has finished loading. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Dispatched when any link is clicked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when any link is clicked. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Dispatched when the mouse goes out of any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse goes out of any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Dispatched when the mouse first enters any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse first enters any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Dispatched when the mouse passes over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse passes over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Dispatched when the mouse is released over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse is released over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Dispatched when the mouse is pressed down over any link.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when the mouse is pressed down over any link. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Dispatched after every recompose.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched after every recompose. 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Dispatched whenever the selection is changed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched whenever the selection is changed.  Primarily used to update selection-dependent user interface. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.container:TextContainerManager:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Constructor function - creates a TextContainerManager instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>The DisplayObjectContainer in which to manage the text lines.
		 </apiDesc></apiParam><apiParam><apiItemName>configuration</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>- The IConfiguration instance to use with this TextContainerManager instance. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructor function - creates a TextContainerManager instance.
		 
		 For best results:
		 <ol>
		 <li>Start with TextContainerManager.defaultConfiguration and modify it</li>   
		 <li>Share the same Configuration among many InputManagers</li>
		 </ol>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:TextContainerManager:activateHandler"><apiName>activateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginInteraction"><apiName>beginInteraction</apiName><shortdesc> Returns the current ISelectionManager instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the interaction manager for this TextContainerManager instance.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the current ISelectionManager instance. Converts to TextFlow instance and creates one if necessary. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:compose"><apiName>compose</apiName><shortdesc> Composes the container text; calls either the factory or updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Composes the container text; calls either the factory or <codeph>updateAllControllers()</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> Creates a ContextMenu for the TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>the created context menu.
		 
		 </apiDesc><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> Creates a ContextMenu for the TextContainerManager. Use the methods of the ContextMenu 
		  class to add items to the menu. 
		 <p>You can override this method to define a custom context menu.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createEditManager"><apiName>createEditManager</apiName><shortdesc>Create an edit manager to use for editing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>the editing manager for this TextContainerManager instance.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:IEditManager</apiOperationClassifier></apiReturn><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>IUndoManager instance for the EditManager being created.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>Create an edit manager to use for editing. Override this method if you have a custom EditManager that you
		 want to use in place of the default.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createSelectionManager"><apiName>createSelectionManager</apiName><shortdesc>Create a selection manager to use for selection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>a new SelectionManager instance.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>Create a selection manager to use for selection. Override this method if you have a custom SelectionManager that you
		 want to use in place of the default.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>The Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:drawBackgroundAndSetScrollRect"><apiName>drawBackgroundAndSetScrollRect</apiName><shortdesc>   
		 Returns true if it has filled in the container's scrollRect property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if it has created the <codeph>scrollRect</codeph> object.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>scrollX</apiItemName><apiType value="Number"/><apiDesc>The starting horizontal position of the scroll rectangle.
		 </apiDesc></apiParam><apiParam><apiItemName>scrollY</apiItemName><apiType value="Number"/><apiDesc>The starting vertical position of the scroll rectangle.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>   
		 Returns <codeph>true</codeph> if it has filled in the container's scrollRect property.  
		 This method enables you to test whether <codeph>scrollRect</codeph> is set without actually accessing the <codeph>scrollRect</codeph> property 
		 which can possibly create a  performance issue. 
		 <p>Override this method to draw a background or a border.  Overriding this method can be tricky as the scrollRect <b>must</b> 
		 be set as specified.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:editHandler"><apiName>editHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Event object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endInteraction"><apiName>endInteraction</apiName><shortdesc> Terminates interaction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Terminates interaction. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Process a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> Process a focusIn event.
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> Creates a rectangle that shows where the last call to either the compose() 
		 method or the updateContainer() method placed the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the bounds of the content
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> Creates a rectangle that shows where the last call to either the <codeph>compose()</codeph> 
		 method or the <codeph>updateContainer()</codeph> method placed the text.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.container.xml#TextContainerManager/compose()"><linktext>compose()</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager/updateContainer()"><linktext>updateContainer()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getFocusedSelectionFormat"><apiName>getFocusedSelectionFormat</apiName><shortdesc> Returns the focusedSelectionFormat - by default get it from the configuration.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the focusedSelectionFormat - by default get it from the configuration.
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getInactiveSelectionFormat"><apiName>getInactiveSelectionFormat</apiName><shortdesc> Returns the inactiveSelectionFormat - by default get it from the configuration 
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the inactiveSelectionFormat - by default get it from the configuration 
		 This can be overridden in the subclass to supply a different SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getLineAt"><apiName>getLineAt</apiName><shortdesc> Return the TextLine at the index from array of composed lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the TextLine that occurs at the specified index.
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Finds the line at this index position in the text.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Return the TextLine at the index from array of composed lines.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>the delta amount of space to scroll
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>The number of lines to scroll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getTextFlow"><apiName>getTextFlow</apiName><shortdesc> The current TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>the current TextFlow object
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> The current TextFlow. Converts this to a full TextFlow representation if it 
		 isn't already one. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getText"><apiName>getText</apiName><shortdesc>
		 Returns the current text using a separator between paragraphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>separator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>String to set between paragraphs.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the current text using a separator between paragraphs.
		 The separator can be specified with the <codeph>separator</codeph>
		 argument. The default value of the <codeph>separator</codeph> argument
		 is the Unicode character <codeph>'PARAGRAPH SEPARATOR' (U+2029)</codeph>.
		 
		 <p>Calling the setter discards any attached TextFlow. Any selection is lost.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUndoManager"><apiName>getUndoManager</apiName><shortdesc> 
		 Returns the undo manager to use.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>new IUndoManager instance.
		 
		 </apiDesc><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
		 Returns the undo manager to use. By default, creates a unique undo manager. 
		 You can override this method in the subclass if you want to customize the undo manager
		 (for example, to use a shared undo manager for multiple TextContainerManager instances).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUnfocusedSelectionFormat"><apiName>getUnfocusedSelectionFormat</apiName><shortdesc> Returns the unfocusedSelectionFormat - by default get it from the configuration 
		 You can override this method in the subclass to supply a different SelectionFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Returns the unfocusedSelectionFormat - by default get it from the configuration 
		 You can override this method in the subclass to supply a different SelectionFormat.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Processes the IME.START_COMPOSITION event when the client manages events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> The IMEEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Processes the <codeph>IME.START_COMPOSITION</codeph> event when the client manages events.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#IMEEvent/START_COMPOSITION"><linktext>IMEEvent.START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateSelectionFormats"><apiName>invalidateSelectionFormats</apiName><shortdesc> Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
		 to update.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call this if you change the selection formats (SelectionFormat) and want the interactionManager 
		 to update. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateUndoManager"><apiName>invalidateUndoManager</apiName><shortdesc> Call this if you are editing, and want to reset the undo manager used for editing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Call this if you are editing, and want to reset the undo manager used for editing.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:isDamaged"><apiName>isDamaged</apiName><shortdesc> Returns true if the content needs composing.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> if the content needs composing; <codeph>false</codeph> otherwise.
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Returns <codeph>true</codeph> if the content needs composing. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>The FocusEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>The KeyboardEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>ContextMenuEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> Process a mouseOver event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> Process a mouseOver event.
		</apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>The MouseEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>The end of the selection that is changed when you extend the selection. It can be
		 	either the start or the end of the selection, expressed as an offset from the start of the text flow.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	The stable end of the selection when you extend the selection. It can be either 
		 	the start or the end of the selection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setTextFlow"><apiName>setTextFlow</apiName><shortdesc> Sets a TextFlow into this TextContainerManager replacing any existing TextFlow and discarding the 
		 current text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Sets a TextFlow into this TextContainerManager replacing any existing TextFlow and discarding the 
		 current text. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setText"><apiName>setText</apiName><shortdesc>
		 Sets the text property to the specified String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>the String to set
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Sets the <codeph>text</codeph> property to the specified String.
		 
		 Discards any attached TextFlow. Any selection is lost.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> The TextEvent object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:updateContainer"><apiName>updateContainer</apiName><shortdesc> Updates the display; calls either the factory or updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Updates the display; calls either the factory or updateAllControllers().
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:TextContainerManager:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> Returns the vertical extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Returns the vertical extent allowed for text inside the container. The value is specified in pixels. 
		 <p>After setting this property, the text in the container is damaged and requires composing.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> Returns the horizontal extent allowed for text inside the container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Returns the horizontal extent allowed for text inside the container. The value is specified in pixels.
		 
		 <p>After setting this property, the text in the container is damaged and requires composing.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:configuration:get"><apiName>configuration</apiName><shortdesc> The Configuration object for this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> The Configuration object for this TextContainerManager. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.IConfiguration.xml"><linktext>IConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:container:get"><apiName>container</apiName><shortdesc> Returns the container (DisplayObjectContainer) that holds the text that this TextContainerManager manages.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> Returns the container (DisplayObjectContainer) that holds the text that this TextContainerManager manages.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>ContainerController.container</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> The default configuration for this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> The default configuration for this TextContainerManager. Column and padding attributes
		 are set to <codeph>FormatValue.INHERIT</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:editingMode:get"><apiName>editingMode</apiName><shortdesc> Editing mode of this TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Editing mode of this TextContainerManager. Modes are reading only, reading and selection permitted, 
		 and editing (reading, selection, and writing)  permitted. Use the constant values of the EditingMode
		 class to set this property. 
		 <p>Default value is READ_WRITE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> Sets the format when display just a string.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Sets the format when display just a string.  If displaying a TextFlow this has no immediate effect.  The supplied ITextLayoutFormat is not copied.  Modifying it without calling this setter has indeterminate effects. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:numLines:get"><apiName>numLines</apiName><shortdesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Optional ISWFContext instance used to make FTE calls as needed in the proper swf context.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Optional ISWFContext instance used to make FTE calls as needed in the proper swf context. 
		
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Controls whether the factory generates all text lines or stops when the container bounds are filled.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><shortdesc> Interface to support TLF content in a sub-application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface to support TLF content in a sub-application. When an application is loaded in an untrusted context,
	 mouse events that occur outside of the untrusted application's bounds are not delivered. Clients can handle this
	 by implementing ISandboxSupport. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>flashx.textLayout.container.ContainerController</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager"><linktext>flashx.textLayout.edit.SelectionManager</linktext></link><link href="" invalidHref="flash.system.SecurityDomain.xml"><linktext>flash.system.SecurityDomain</linktext></link></related-links><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to request clients to begin the forwarding of mouseup and mousemove events from outside a security sandbox.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Called to inform clients that the the forwarding of mouseup and mousemove events from outside a security sandbox is no longer needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Client call to forward a mouseMove event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseMove event from outside a security sandbox.  Coordinates of the mouse move are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Client call to forward a mouseUp event from outside a security sandbox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Client call to forward a mouseUp event from outside a security sandbox.  Coordinates of the mouse up are not needed.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the horizontalScrollPolicy and 
	  verticalScrollPolicy properties of the ContainerController class, which defines a text flow 
	  container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  The ScrollPolicy class is an enumeration class that defines values for setting the <codeph>horizontalScrollPolicy</codeph> and 
	  <codeph>verticalScrollPolicy</codeph> properties of the ContainerController class, which defines a text flow 
	  container. 
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/horizontalScrollPolicy"><linktext>ContainerController.horizontalScrollPolicy</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/verticalScrollPolicy"><linktext>ContainerController.verticalScrollPolicy</linktext></link></related-links><apiValue id="flashx.textLayout.container:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 Specifies that scrolling is to occur if the content exceeds the container's dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies that scrolling is to occur if the content exceeds the container's dimension. The runtime calculates 
		 the number of lines that overflow the container and the user can navigate to them with cursor keys, by drag selecting,
		 or by rotating the mouse wheel. You can also cause scrolling to occur by setting the corresponding position value, 
		 either <codeph>ContainerController.horizontalScrollPosition</codeph> or <codeph>ContainerController.verticalScrollPosition</codeph>. Also, the runtime can automatically 
		 scroll the contents of the container during editing.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc> 
		 Causes the runtime to not display overflow lines, which means that the user cannot navigate to them.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Causes the runtime to not display overflow lines, which means that the user cannot navigate to them. 
		 In this case, setting the corresponding <codeph>ContainerController.horizontalScrollPosition</codeph> and 
		 <codeph>ContainerController.verticalScrollPosition</codeph> properties have no effect. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc> 
		 Specifies that scrolling is available to access content that exceeds the container's dimension.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Specifies that scrolling is available to access content that exceeds the container's dimension. The runtime calculates the 
		 number of lines that overflow the container and allows the user to scroll them into view with the cursor keys, by drag selecting, 
		 or by rotating the mouse wheel. You can also scroll by setting the corresponding position value, either 
		 <codeph>ContainerController.horizontalScrollPosition</codeph> or <codeph>ContainerController.verticalScrollPosition</codeph>. Also, the runtime can automatically scroll the contents 
		 of the container during editing.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>