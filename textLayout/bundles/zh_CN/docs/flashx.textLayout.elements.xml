<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.elements"><apiName>flashx.textLayout.elements</apiName><apiDetail/><apiClassifier id="flashx.textLayout.elements:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> 显示在流层次结构最低级别的 FlowElement 的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> 显示在流层次结构最低级别的 FlowElement 的基类。FlowLeafElement 对象没有子对象，且包括 InlineGraphicElement 对象和 SpanElement 对象。
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowLeafElement:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> 
		 基类 - 调用 new FlowLeafElement() 时会引发错误异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 基类 - 调用 new FlowLeafElement() 时会引发错误异常。 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getComputedFontMetrics"><apiName>getComputedFontMetrics</apiName><shortdesc> 返回跨距的 FontMetrics 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>与跨距关联的字体规格
		 </apiDesc><apiType value="flash.text.engine:FontMetrics"/></apiReturn></apiOperationDef><apiDesc> 返回跨距的 FontMetrics 对象。FontMetrics 对象的属性描述指定字体的 emBox、删除线位置、删除线粗细、下划线位置和下划线粗细。 
		 
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.FontMetrics.xml"><linktext>flash.text.engine.FontMetrics</linktext></link><link href="" invalidHref="flash.text.engine.xml#ElementFormat/getFontMetrics"><linktext>flash.text.engine.ElementFormat.getFontMetrics</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getNextLeaf"><apiName>getNextLeaf</apiName><shortdesc>
		 返回下一个 FlowLeafElement 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>下一个 FlowLeafElement，如果到达末尾，则为 null
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>指定要在其最后一个叶上停止查找的 FlowGroupElement。null 值（默认值）表示搜索一直进行到不再有元素为止。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 返回下一个 FlowLeafElement 对象。  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getNextLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getPreviousLeaf"><apiName>getPreviousLeaf</apiName><shortdesc>
		 返回上一个 FlowLeafElement 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>上一个 leafElement，如果到达末尾，则为 null
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>指定在其第一个叶停止查找的 FlowGroupElement。null（默认值）表示搜索将一直进行到不再有元素为止。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 返回上一个 FlowLeafElement 对象。  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getPreviousLeafExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowLeafElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 对于该元素有效的计算得出的文本格式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 对于该元素有效的计算得出的文本格式属性。考虑属性的继承。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowLeafElement:text:get"><apiName>text</apiName><shortdesc>
		 与 FlowLeafElement 关联的文本：如果这是 ParagraphELement 中的最后一个跨距，则 SpanElement 子类的值将是 textLength 减去一个字符。BreakElement 子类的值是 U+2028。TabElement 子类的值是一个制表符。InlineGraphicElement 子类的值是 U+FDEF。
		 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 与 FlowLeafElement 关联的文本：
		 <p><ul>
		 <li>如果这是 ParagraphELement 中的最后一个跨距，则 SpanElement 子类的值将是 <codeph>textLength </codeph>减去一个字符。</li>
		 <li>BreakElement 子类的值是 U+2028</li>
		 <li>TabElement 子类的值是一个制表符</li>
		 <li>InlineGraphicElement 子类的值是 U+FDEF</li>
		 </ul></p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#SpanElement/replaceText()"><linktext>flashx.textLayout.elements.SpanElement.replaceText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc> SpecialCharacterElement 类是表示特殊字符的元素的抽象基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier></apiClassifierDef><apiDesc> SpecialCharacterElement 类是表示特殊字符的元素的抽象基类。
	 
	 <p>不能直接创建 SpecialCharacterElement 对象。调用 <codeph>new SpecialCharacterElement()</codeph> 时会引发错误异常。</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#BreakElement"><linktext>BreakElement</linktext></link><link href="flashx.textLayout.elements.xml#TabElement"><linktext>TabElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpecialCharacterElement:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc>  
		 基类 - 调用 new SpecialCharacterElement() 时会引发错误异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>  
		 基类 - 调用 <codeph>new SpecialCharacterElement() </codeph>时会引发错误异常。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus"><apiName>InlineGraphicElementStatus</apiName><shortdesc> InlineGraphicElementStatus 类定义一组常量，用于检查 InlineGraphicElement.status 的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> InlineGraphicElementStatus 类定义一组常量，用于检查 <codeph>InlineGraphicElement.status</codeph>。
     
     </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/status"><linktext>InlineGraphicElement.status</linktext></link></related-links><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:ERROR"><apiName>ERROR</apiName><shortdesc> 在加载引用的图形期间发生了错误。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc> 在加载引用的图形期间发生了错误。 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOADING"><apiName>LOADING</apiName><shortdesc> 已经对一个 URL 图形元素启动了（但尚未完成）加载。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc> 已经对一个 URL 图形元素启动了（但尚未完成）加载。  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOAD_PENDING"><apiName>LOAD_PENDING</apiName><shortdesc> 图形元素是尚未加载的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadPending</apiData><apiType value="String"/></apiValueDef><apiDesc> 图形元素是尚未加载的 URL。  
    	 
    	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:READY"><apiName>READY</apiName><shortdesc> 图形已完成加载并正确调整了大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc> 图形已完成加载并正确调整了大小。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:SIZE_PENDING"><apiName>SIZE_PENDING</apiName><shortdesc> 
         具有 auto 或百分比宽度/高度值的图形元素已完成加载但尚未重新合成。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sizePending</apiData><apiType value="String"/></apiValueDef><apiDesc> 
         具有 auto 或百分比宽度/高度值的图形元素已完成加载但尚未重新合成。在下一次重新合成期间，将会计算图形元素的实际大小。 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextFlow"><apiName>TextFlow</apiName><shortdesc>
	 TextFlow 类负责管理一个历史记录的所有文本内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc>
	 TextFlow 类负责管理一个历史记录的所有文本内容。在 TextLayout 中，文本存储在元素组成的层次结构树中。TextFlow 是元素树的根对象。树中的所有元素都是从基类 FlowElement 派生的。 
	 
	 <p>TextFlow 对象可以具有 ParagraphElement 和 DivElement 子对象。一个 div（DivElement 对象）表示一组段落（ParagraphElement 对象）。段落可以具有 SpanElement、InlineGraphicElement、LinkElement 和 TCYElement 子对象。</p>
	 
	 <p>跨距 (SpanElement) 是段落中具有相同属性的文本范围。图像 (InlineGraphicElement) 表示一个任意图形，在一行文本中显示为单个字符。LinkElement 表示超链接（即 HTML 的 <codeph>a</codeph> 标记），可以包含多个跨距。在日语文本中，当一小串文本垂直于行显示时将使用 TCYElement 对象，类似于垂直行中的水平文本串。一个 TCYElement 也可以包含多个跨距。</p>
	 
	 <p>TextFlow 也派生自 ContainerFormattedElement 类，该类是所有容器级别块元素的根类。</p>
 	 <p>以下示例演示了其它元素（例如跨距和段落）与 TextFlow 对象间的关系。</p>
 	 <p><adobeimage alt="TextFlow 层次结构示例" href="../../../images/textLayout_textFlowHierarchy.gif"/></p>
 	 
 	 <p>每个 TextFlow 对象有一个对应的 Configuration 对象，用于指定初始字符和段落格式以及初始容器格式。该对象还可用于指定选择部分、链接、焦点和滚动的属性。以 Configuration 对象作为 <codeph>TextFlow()</codeph> 构造函数的参数时，将会创建一个只读快照，可以通过 <codeph>TextFlow.configuration</codeph> 属性访问该快照。创建后，不能更改 TextFlow 的配置。如果没有指定 Configuration，可以通过 <codeph>TextFlow.defaultConfiguration</codeph> 属性访问默认配置。</p>
	 
	 </apiDesc><example conref="examples\TextFlowExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> 每次由于合成而使容器添加或更新了 DisplayObject 时由 TextFlow 对象分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 每次由于合成而使容器添加或更新了 DisplayObject 时由 TextFlow 对象分派。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> 每次 TextFlow 对象受损时由该对象分派。可以使用此事件来查明 TextFlow 已更改，但将此事件发送出去时不访问 TextFlow 本身。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 每次它被损坏时由 TextFlow 对象分派。可以使用此事件来查明 TextFlow 已更改，但将此事件发送出去时不访问 TextFlow 本身。当 TextFlow 更改已部分完成时会发送此事件，因此它可以处于不一致的状态：某些更改已经完成，而其它更改仍处于挂起状态。从事件获取所需的信息，并在控件返回到应用程序之后进行必需的更改。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> 在控制器容器中滚动了文本时由 TextFlow 对象分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 在控制器容器中滚动了文本时由 TextFlow 对象分派。  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> 当由于宽度或高度设置为 auto 或百分比而使 InlineGraphicElement 调整了大小，且图形完成加载后进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 当由于宽度或高度设置为 auto 或百分比而使 InlineGraphicElement 调整了大小，且图形完成加载后进行分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> 单击任何链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 单击任何链接时分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> 当鼠标离开任何链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 当鼠标离开任何链接时分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> 当鼠标首次进入任何链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 当鼠标首次进入任何链接时分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> 当鼠标经过任何链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 当鼠标经过任何链接时分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> 在任何链接上松开鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 在任何链接上松开鼠标时分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> 在任何链接上按下鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 在任何链接上按下鼠标时分派。 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> 每次重新合成后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 每次重新合成后分派。 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> 每次更改选择部分后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 每次更改选择部分后分派。主要用于更新与当前选择相关的用户界面。它也可用于改变选区，但无法用于改变 TextFlow 本身。
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:TextFlow:TextFlow"><apiName>TextFlow</apiName><shortdesc> 
		 构造函数 - 创建新 TextFlow 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>config</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>指定用于该 TextFlow 对象的配置。如果为 null，可使用 <codeph>TextFlow.defaultConfiguration</codeph> 访问配置值。 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 构造函数 - 创建新 TextFlow 实例。
		 
		 <p>如果提供一个 <codeph>config</codeph> 参数，则会复制 Configuration 对象的内容，但您不能对其进行更改。但是，可以通过 <codeph>configuration</codeph> 属性访问配置设置。如果 <codeph>config</codeph> 参数为 null，可以通过 <codeph>defaultConfiguration</codeph> 属性访问默认配置设置。</p> 
		 
		 <p>Configuration 对象提供一种设置 TextFlow 的可配置默认属性的机制。尽管您无法更改 Configuration 对象，但是可以在必要时通过设置 TextFlow 及其子项的属性来覆盖默认属性。</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextFlow:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementByID"><apiName>getElementByID</apiName><shortdesc> 返回其 id 属性与 idName 参数匹配的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>其 id 与 <codeph>idName</codeph> 匹配的元素。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>idName</apiItemName><apiType value="String"/><apiDesc>要查找的元素的 <codeph>id</codeph> 值。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 返回其 <codeph>id</codeph> 属性与 <codeph>idName</codeph> 参数匹配的元素。提供根据 <codeph>id</codeph> 应用样式的功能。 
		 
		 <p>例如，对于 <codeph>id</codeph> 为 span1 的元素，以下行将样式“color”设置为 0xFF0000（红色）。</p>
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 <p><b>注意：</b>在以下代码中，<codeph>p.addChild(s)</codeph> <i> 从其原始父代中删除</i> <codeph>s</codeph>，并将其添加到新父代 <codeph>p</codeph> 中。</p>
		 
		 <codeblock rev="3.0">
		 var s:SpanElement = new SpanElement();
		 var p:ParagraphElement = new ParagraphElement();
		 ...
		 s = textFlow.getElementByID("span3") as SpanElement;
		 p.addChild(s);
		 textFlow.addChild(p);
		 </codeblock>
		 
		 </apiDesc><example conref="examples\TextFlow_getElementByIDExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/id"><linktext>FlowElement.id</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByStyleName"><apiName>getElementsByStyleName</apiName><shortdesc> 返回 styleName 设置为 styleNameValue 的所有元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>其 <codeph>styleName</codeph> 值与 <codeph>styleNameValue</codeph> 匹配的元素数组。例如，所有具有样式名“color”的元素。
		 
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>styleNameValue</apiItemName><apiType value="String"/><apiDesc>样式名，将查找设置了该样式的元素。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 返回 <codeph>styleName </codeph>设置为 <codeph>styleNameValue </codeph>的所有元素。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:invalidateAllFormats"><apiName>invalidateAllFormats</apiName><shortdesc> 使 TextFlow 的所有格式信息无效，强制其重新计算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 使 TextFlow 的所有格式信息无效，强制其重新计算。更改了样式时调用该方法。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver/invalidateAll"><linktext>IFormatResolver.invalidateAll</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextFlow:defaultConfiguration"><apiName>defaultConfiguration</apiName><shortdesc> 如果未指定配置，将为用于所有新 TextFlow 对象的默认配置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>flashx.textLayout.elements:Configuration</apiValueClassifier></apiValueDef><apiDesc> 如果未指定配置，将为用于所有新 TextFlow 对象的默认配置。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:configuration:get"><apiName>configuration</apiName><shortdesc> 
		该 TextFlow 对象的 Configuration 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		该 TextFlow 对象的 Configuration 对象。Configuration 对象指定初始字符和段落格式、初始容器格式，以及选择部分加亮、链接、焦点和滚动的属性。
		
		<p>如果没有指定 Configuration 对象，则文本布局框架使用默认 Configuration 对象，该对象由 <codeph>defaultConfiguration</codeph> 属性引用。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 管理该元素的容器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 管理该元素的容器。
		 
		 <p>基于元素创建的 TextLine 显示为容器的子项。flowComposer 管理容器，并在编辑文本时将行添加到容器以及从容器中删除行。flowComposer 还会跟踪某些关键属性，例如合成到的宽度和高度，是否启用滚动，等等。</p>
		 
		 <p>容器和 <codeph>flowComposer</codeph> 相互紧密关联。如果重置 <codeph>flowComposer</codeph>，则容器会重置为新 flowComposer 的容器。类似地，如果重置了容器，则 <codeph>flowComposer</codeph> 会重置为容器的新 flowComposer。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>FlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:formatResolver:get"><apiName>formatResolver</apiName><shortdesc> 用于解析元素样式的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IFormatResolver</apiValueClassifier></apiValueDef><apiDesc> 用于解析元素样式的回调函数。例如，可使用该函数，通过 CSS 或命名样式提供样式设置。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver"><linktext>IFormatResolver</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:generation:get"><apiName>generation</apiName><shortdesc> 
		该 TextFlow 对象的生成编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		该 TextFlow 对象的生成编号。撤消和重做操作使用生成编号验证撤消或重做操作是否合法。生成编号必须匹配。 
		
		<p>每次模型更改会递增 <codeph>generation</codeph> 值，因此如果生成编号改变，即表明更改了 TextFlow 模型。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> 该 TextFlow 对象的 TextLayoutFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 该 TextFlow 对象的 TextLayoutFormat 对象。这可使几个优化重用主体格式。例如；
		
		<codeblock>
		textFlowA.hostFormat = textFlowB.hostFormat
		</codeblock>
		
		在将 TextLayoutFormat 对象指定给 <codeph>hostFormat</codeph> 之前必须设置格式值。例如，下列行不<i/>会将字体大小设置为 24，因为字体大小是在 TextLayoutFormat 对象指定给 <codeph>hostFormat</codeph> 之后<i/>设置的。
		
		<codeblock>
		format = new TextLayoutFormat()
		textFlow.hostFormat = format
		format.fontSize = 24;
		</codeblock>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:interactionManager:get"><apiName>interactionManager</apiName><shortdesc>
		 与该 TextFlow 对象关联的 InteractionManager。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc>
		 与该 TextFlow 对象关联的 InteractionManager。
		 <p>控制所有文本选择和编辑。如果 TextFlow 不可选择，则 interactionManager 为 null。要使 TextFlow 可编辑，请指定既是 ISelectionManager 又是 IEditManager 的 interactionManager。要使 TextFlow 为只读且可以选择，请指定只是 ISelectionManager 的 interactionManager。 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#IEditManager"><linktext>IEditManager</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement"><apiName>ContainerFormattedElement</apiName><shortdesc> 
	ContainerFormattedElement 是所有容器级别块元素（例如 DivElement 和 TextFlow 对象）的根类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	ContainerFormattedElement 是所有容器级别块元素（例如 DivElement 和 TextFlow 对象）的根类。容器级别的块元素是用于组合其它 FlowElement 对象的元素。
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:IFormatResolver"><apiName>IFormatResolver</apiName><shortdesc> 格式解析器的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 格式解析器的接口。实现允许您将所选的样式设置机制（例如 Flex CSS 样式设置和命名样式）附加到 TextFlow。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/formatResolver"><linktext>TextFlow.formatResolver</linktext></link></related-links><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:getResolverForNewFlow"><apiName>getResolverForNewFlow</apiName><shortdesc> 在复制 TextFlow 时返回格式解析器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFlow 副本的格式解析器。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:IFormatResolver</apiOperationClassifier></apiReturn><apiParam><apiItemName>oldFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>newFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> 在复制 TextFlow 时返回格式解析器。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidateAll"><apiName>invalidateAll</apiName><shortdesc> 使 TextFlow 的任何缓存格式信息无效，因此必须重新计算格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> 使 TextFlow 的任何缓存格式信息无效，因此必须重新计算格式。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidate"><apiName>invalidate</apiName><shortdesc> 可能由于以下原因使此元素上的已缓存格式化信息失效：parent 已更改，或者 ID 或 styleName 已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> 可能由于以下原因使此元素上的已缓存格式化信息失效：<codeph>parent</codeph> 已更改，或者 <codeph>ID</codeph> 或 <codeph>styleName</codeph> 已更改。 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveFormat"><apiName>resolveFormat</apiName><shortdesc> 对于给定 FlowElement 或 ContainerController 对象，返回它的任何格式设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定的对象的格式设置。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> 对于给定 FlowElement 或 ContainerController 对象，返回它的任何格式设置。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveUserFormat"><apiName>resolveUserFormat</apiName><shortdesc> 对于给定 FlowElement 或 ContainerController 对象和格式属性名称，返回格式值，如果未找到该值则返回 undefined。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>所指定对象的指定格式的值。
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>userFormat</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> 对于给定 FlowElement 或 ContainerController 对象和格式属性名称，返回格式值，如果未找到该值则返回 <codeph>undefined</codeph>。
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TabElement"><apiName>TabElement</apiName><shortdesc> 
	 TabElement 类表示文本流中的一个 &amp;lt;tab/&amp;gt;。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 TabElement 类表示文本流中的一个 &lt;tab/>。可以将制表位作为一个 TabStopFormat 对象数组指定给 <codeph>ParagraphElement.tabStops</codeph> 属性。
	 
	 <p><b>注意</b>：该类主要用于支持 MXML 标记中的 &lt;tab/>。可以直接将制表符 (\t) 添加到文本中，如下所示：</p>
	 
	 <codeblock rev="3.0">
	 spanElement1.text += '\t';
	 </codeblock>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement/tabStops"><linktext>ParagraphElement.tabStops</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TabElement:TabElement"><apiName>TabElement</apiName><shortdesc> 构造函数 - 创建新 TabElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建新 TabElement 实例。 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IConfiguration"><apiName>IConfiguration</apiName><shortdesc> 一个配置对象的只读接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 一个配置对象的只读接口。由 TextFlow 用于保证它在构造后即具有不可更改的配置。
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc> 
		指定最初适用于文本流中所有链接（LinkElement 对象）的活动字符格式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		指定最初适用于文本流中所有链接（LinkElement 对象）的活动字符格式属性。对于没有指定这些属性值的新 LinkElement 对象，这些是默认值。 
		
		<p>默认值为 <codeph>null</codeph>。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc> 
		指定当光标悬停在文本流中的链接 (LinkElement) 上时，应用于该链接的初始字符格式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		指定当光标悬停在文本流中的链接 (LinkElement) 上时，应用于该链接的初始字符格式属性。对于没有指定这些属性值的新 LinkElement 对象，这些是默认值。
		
		<p>默认值为 <codeph>null</codeph>。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc> 
		指定用于文本流中所有 LinkElement 对象的初始链接属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		指定用于文本流中所有 LinkElement 对象的初始链接属性。对于没有指定这些属性值的新 LinkElement 对象，这些是默认值。
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc> 
		指定是否启用可访问性支持。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		指定是否启用可访问性支持。如果为 <codeph>true</codeph>，则屏幕阅读器可以读取 TextFlow 内容。
		
		<p>默认值为 <codeph>false</codeph>。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc> 指定默认情况下附加到新 TextFlow 对象的流合成器的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> 指定默认情况下附加到新 TextFlow 对象的流合成器的类型。默认值为 StandardFlowComposer。
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc> 
		当文本流 (TextFlow) 的窗口具有焦点时，该文本流的初始选择格式 (SelectionFormat)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		当文本流 (TextFlow) 的窗口具有焦点时，该文本流的初始选择格式 (SelectionFormat)。当该窗口是活动窗口，且 TextFlow 中的一个容器具有焦点时，Text Layout Framework 使用 <codeph>focusedSelectionFormat</codeph> 来绘制选择内容。如果需要，您可以使用 <codeph>SelectionManager.focusedSelectionFormat</codeph> 覆盖此格式。
		
		<p>SelectionFormat 类指定默认值，可以反转文本及其背景的颜色。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc> 
		当文本流 (TextFlow) 的窗口是非活动窗口时，该文本流的初始选择格式 (SelectionFormat)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		当文本流 (TextFlow) 的窗口是非活动窗口时，该文本流的初始选择格式 (SelectionFormat)。当该窗口是非活动窗口时，Text Layout Framework 使用 <codeph>inactiveSelectionFormat</codeph> 来绘制选择内容。如果需要，您可以使用 <codeph>SelectionManager.inactiveSelectionFormat</codeph> 覆盖此格式。
		
		<p>如果您不覆盖 <codeph>unfocusedSelectionFormat</codeph>，则使用的 SelectionFormat 值为：</p> 
		<ul>
		  <li><codeph>color = 0xffffff</codeph>（白色）</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>结果是不显示任何选择。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc> 指定用于解析内联图形元素的回调。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> 指定用于解析内联图形元素的回调。该回调采用 <codeph>flashx.textLayout.elements.InlineGraphicElement</codeph> 对象，返回要用作元素的 <codeph>flashx.textLayout.elements.InlineGraphicElement#source</codeph> 的值。该回调提供一种机制，该机制延迟提供内联图形元素的源，直到合成内联图形元素前一刻。
		<p><b>注意：</b>仅在已设置 String 类型的占位符源的情况下调用该回调。此外，可多次调用该回调。 </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc> 
		指定 Enter/Return 键是由 Text Layout Framework 作为文本输入来拆分诸如段落等内容，还是由客户端代码处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		指定 Enter/Return 键是由 Text Layout Framework 作为文本输入来拆分诸如段落等内容，还是由客户端代码处理。例如，客户端代码可通过提交一个具有用于处理键的默认按钮的表单来处理该键。 
		
		<p>默认值为 <codeph>true</codeph>。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc> 
		指定 TAB 键是由 Text Layout Framework 作为文本输入，还是由 Flash Player 或 AIR 处理并将其转换为 Tab 触发的面板事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		指定 TAB 键是由 Text Layout Framework 作为文本输入，还是由 Flash Player 或 AIR 处理并将其转换为 Tab 触发的面板事件。 
		
		<p>默认值为 <codeph>false</codeph>。</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc> 
		一种策略，用于确定容器的最后一行是位于容器内，还是溢出到容器外。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
		一种策略，用于确定容器的最后一行是位于容器内，还是溢出到容器外。可使用 OverflowPolicy 类的常量设置此属性。
		
		<p>默认值为 OverflowPolicy.FIT_DESCENDERS，如果从顶部到基线的区域位于容器内，则该行位于合成区域内。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc> 要求合成文本的过程在合成每个段落之后释放行创建数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 要求合成文本的过程在合成每个段落之后释放行创建数据。此要求可节省内存但是会降低合成速度。
		
		<p>默认值为 <codeph>false</codeph>。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData"><linktext>TextBlock.releaseLineCreationData</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc> 
		指定在一个滚动与下一个滚动之间发生时间延迟，以避免滚动速度过快。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		指定在一个滚动与下一个滚动之间发生时间延迟，以避免滚动速度过快。该值指定延迟时间（以毫秒为单位）。默认值为 35。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc> 指定当用户通过拖动选择部分来启动自动滚动时，所滚动的默认像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 指定当用户通过拖动选择部分来启动自动滚动时，所滚动的默认像素数。默认值为 20。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc> 指定鼠标滚轮事件所滚动的默认像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 指定鼠标滚轮事件所滚动的默认像素数。默认值为 20。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc>
		对于页面滚动，指定所滚动的默认文本流百分比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		对于页面滚动，指定所滚动的默认文本流百分比。默认值为 7.0/8.0 或 .875。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc> 
		指定文本流（TextFlow 对象）的初始格式 TextLayoutFormat 配置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		指定文本流（TextFlow 对象）的初始格式 TextLayoutFormat 配置。
		
		<p>默认值为 <codeph>null</codeph>。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc> 
		当该窗口是活动窗口但 TextFlow 中没有容器具有焦点时，Text Layout Framework 用于绘制选择内容的初始选择格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		当该窗口是活动窗口但 TextFlow 中没有容器具有焦点时，Text Layout Framework 用于绘制选择内容的初始选择格式。如果需要，可以使用 <codeph>SelectionManager.unfocusedSelectionFormat</codeph> 覆盖此格式。
		
		<p>如果您不覆盖 <codeph>unfocusedSelectionFormat</codeph>，则使用的 SelectionFormat 值为：</p>
		
		<ul>
		  <li><codeph>color = 0xffffff</codeph>（白色）</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>结果是不显示任何选择。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkState"><apiName>LinkState</apiName><shortdesc>
	  LinkState 类为 LinkElement 类的 linkState 属性定义一组常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  LinkState 类为 LinkElement 类的 <codeph>linkState</codeph> 属性定义一组常量。 
	 
	 </apiDesc><example conref="examples\LinkStateExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement/linkState"><linktext>LinkElement.linkState</linktext></link></related-links><apiValue id="flashx.textLayout.elements:LinkState:ACTIVE"><apiName>ACTIVE</apiName><shortdesc> 
	 活动状态的值，当鼠标按下链接时处于该状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>active</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 活动状态的值，当鼠标按下链接时处于该状态。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:HOVER"><apiName>HOVER</apiName><shortdesc> 
	 悬停状态的值，将鼠标拖动到链接上时处于该状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hover</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 悬停状态的值，将鼠标拖动到链接上时处于该状态。 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:LINK"><apiName>LINK</apiName><shortdesc> 
	 正常、默认链接状态的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 正常、默认链接状态的值。 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> 
	 ParagraphElement 类表示文本流层次结构中的一个段落。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 ParagraphElement 类表示文本流层次结构中的一个段落。其父项是 ParagraphFormattedElement，其子项可以包括跨距 (SpanElement)、图像 (inLineGraphicElement)、链接 (LinkElement) 和 TCY (Tatechuuyoko - ta-tae-chu-yo-ko) 元素 (TCYElement)。段落文本存储在一个或多个 SpanElement 对象中，这些对象定义共享相同属性的文本范围。TCYElement 对象定义一小串与行垂直的日语文本，类似于垂直行中的一串水平文本。一个 TCYElement 也可以包含多个跨距。
	 
	 </apiDesc><example conref="examples\ParagraphElementExample.as"/><example conref="examples\ParagraphElementExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:ParagraphElement:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> 构造函数 - 表示文本流中的一个段落。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 表示文本流中的一个段落。 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc> 
		 从提供的位置向前扫描，以找到文本中下一个原子的位置并返回索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>文本中下一个原子的索引
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> 文本中的起始位置，从 0 开始计算
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 从提供的位置向前扫描，以找到文本中下一个原子的位置并返回索引。术语“原子”是指图形元素和字符（包括字符合并组），是组成文本行的不可分割的实体。
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc> 
		 返回文本中下一个单词边界的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>文本中下一个单词边界的索引
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> 文本中的起始位置，从 0 开始计算
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 返回文本中下一个单词边界的索引。
		 
		 <p>从提供的位置向前扫描，以找到文本中以一个单词开始或结束的下一个位置。 </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc> 
		 从提供的位置向后扫描，以找到文本中上一个原子的位置并返回索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>文本中上一个簇的索引
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> 文本中的起始位置，从 0 开始计算
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 从提供的位置向后扫描，以找到文本中上一个原子的位置并返回索引。术语“原子”是指图形元素和字符（包括字符合并组），是组成文本行的不可分割的实体。
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc> 
		 返回文本中上一个单词边界的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>文本中上一个单词边界的索引
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> 文本中的起始位置，从 0 开始计算
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 返回文本中上一个单词边界的索引。
		 
		 <p>从提供的位置向后扫描，以找到文本中以一个单词开始或结束的上一个位置。 </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getNextParagraph"><apiName>getNextParagraph</apiName><shortdesc> 返回该段落之后的段落，如果不再有段落则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>下一个段落，如果不再有段落则返回 null。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 返回该段落之后的段落，如果不再有段落则返回 null。 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getNextParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getPreviousParagraph"><linktext>getPreviousParagraph</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getPreviousParagraph"><apiName>getPreviousParagraph</apiName><shortdesc> 返回该段落之前的段落，如果该段落是 TextFlow 中的第一个段落，则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 返回该段落之前的段落，如果该段落是 TextFlow 中的第一个段落，则返回 null。 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getPreviousParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getNextParagraph"><linktext>getNextParagraph</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextRange"><apiName>TextRange</apiName><shortdesc>
	 描述一段连续文本范围的只读类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 描述一段连续文本范围的只读类。当您选择一部分文本时会生成此范围。该范围包含选择部分的锚点 <codeph>anchorPosition</codeph>，以及操作将修改的点 <codeph>activePosition</codeph>。当修改和扩展块选择部分时，<codeph>anchorPosition</codeph> 保持固定，而 <codeph>activePosition</codeph> 随之改变。可将锚点位置放置在文本中活动点位置之前或之后。
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>SelectionState</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TextRange:TextRange"><apiName>TextRange</apiName><shortdesc> 构造函数 - 创建新 TextRange 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>与选择相关联的 TextFlow。
		 </apiDesc></apiParam><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>选定内容中锚点的索引位置。文本中的第一个位置是位置 0。
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>选定内容中活动点位置的索引位置。文本中的第一个位置是位置 0。 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 构造函数 - 创建新 TextRange 实例。TextRange 可以是 (-1,-1)，表示无范围，也可以是从 0 到 <codeph>TextFlow.textLength</codeph> 的一对值。
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>FlowElement.textLength</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextRange:updateRange"><apiName>updateRange</apiName><shortdesc> 使用新锚点或活动点位置值更新范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果更改了选择部分，则为 true。
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>选择部分的锚点索引。
		  </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>选择部分的活动点索引。
		  </apiDesc></apiParam></apiOperationDef><apiDesc> 使用新锚点或活动点位置值更新范围。
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> 选择部分的终点，是 TextFlow 中的绝对位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 选择部分的终点，是 TextFlow 中的绝对位置。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 选择部分的起点，是 TextFlow 中的绝对位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 选择部分的起点，是 TextFlow 中的绝对位置。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:activePosition:get"><apiName>activePosition</apiName><shortdesc> 选择部分的活动点位置，是 TextFlow 中的绝对位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 选择部分的活动点位置，是 TextFlow 中的绝对位置。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> 选择部分的锚点位置，是 TextFlow 中的绝对位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 选择部分的锚点位置，是 TextFlow 中的绝对位置。
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> 返回与选择部分相关联的 TextFlow。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 返回与选择部分相关联的 TextFlow。
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> 
	 SubParagraphGroupElement 类组合多个 FlowLeafElement。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 SubParagraphGroupElement 类组合多个 FlowLeafElement。SubParagraphGroupElement 是 ParagraphElement 对象的一个子对象，可以包含一个或多个 FlowLeafElement 子对象。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElement:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> 构造函数 - 创建新 SubParagraphGroupElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建新 SubParagraphGroupElement 实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpanElement"><apiName>SpanElement</apiName><shortdesc> 
	SpanElement 类表示应用了一组格式属性的一串文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	SpanElement 类表示应用了一组格式属性的一串文本。SpanElement 对象包含段落中的文本。一个简单的段落 (ParagraphElement) 包含一个或多个 SpanElement 对象。 
	
	<p>如果段落中所有文本共享相同的属性集，则 ParagraphElement 将含有单个 SpanElement 对象。如果段落中的文本具有多种格式，则会含有多个 SpanElement 对象。</p>
	
	</apiDesc><example conref="SpanElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpanElement:SpanElement"><apiName>SpanElement</apiName><shortdesc> 构造函数 - 创建一个 SpanElement 对象，包含段落中的一串文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建一个 SpanElement 对象，包含段落中的一串文本。
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:SpanElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:SpanElement:tlf_internal:normalizeRange"><apiName>normalizeRange</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>normalizeStart</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>normalizeEnd</apiItemName><apiType value="uint"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:SpanElement:replaceText"><apiName>replaceText</apiName><shortdesc> 
		 根据指定起始和结束位置更新文本跨距中的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>relativeStartPosition</codeph> 或 <codeph>relativeEndPosition</codeph> 超出范围，或由于替换而导致代理对被拆分。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>relativeStartPosition</apiItemName><apiType value="int"/><apiDesc>要替换的文本开头的索引位置，相对于跨距的起始位置。跨距中的第一个字符位于位置 0。
		  </apiDesc></apiParam><apiParam><apiItemName>relativeEndPosition</apiItemName><apiType value="int"/><apiDesc>要替换的文本末尾字符的索引位置，相对于跨距的起始位置。将该值设置为 <codeph>relativeStartPos</codeph> 可进行插入。 
		  </apiDesc></apiParam><apiParam><apiItemName>textValue</apiItemName><apiType value="String"/><apiDesc>替换文本或要添加的文本，取决于具体情况。
		 
		  </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 根据指定起始和结束位置更新文本跨距中的文本。要插入文本，请将结束位置与起始位置设置为相同的值。要向跨距中的现有文本追加文本，请将起始位置和结束位置设置为现有文本的长度值。
		 
		 <p>替换的文本包括起始字符和结束字符之前的字符。</p>
		 
		  </apiDesc><example conref="SpanElement_replaceTextExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:SpanElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 根据跨距标签内的内容设置文本；始终删除现有子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>如果数组元素不是 SpecialCharacterElement 或 String
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 根据跨距标签内的内容设置文本；始终删除现有子项。此属性旨在用于 mxml 编译导入过程中。TLF 标记元素以其它 TLF 标记元素作为子元素时，这些子元素被指定给该属性。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:SpanElement:text:set"><apiName>text</apiName><shortdesc> 
		 接受该 SpanElement 对象包含的文本字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 接受该 SpanElement 对象包含的文本字符串。
		 
		 <p>跨距文本不包含段落末尾的回车符 (CR)，但 <codeph>textLength</codeph> 值中包括该回车符。</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement"><apiName>ParagraphFormattedElement</apiName><shortdesc> ParagraphFormattedElement 类是具有段落属性的 FlowElement 类的抽象基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> ParagraphFormattedElement 类是具有段落属性的 FlowElement 类的抽象基类。
	
	<p>不能直接创建 ParagraphFormattedElement 对象。调用 <codeph>new ParagraphFormattedElement()</codeph> 时会引发一个错误异常。</p> 
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:DivElement"><apiName>DivElement</apiName><shortdesc> 
	 DivElement 类定义一个元素，用于组合段落（ParagraphElement 对象）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 DivElement 类定义一个元素，用于组合段落（ParagraphElement 对象）。如果希望一组段落共享相同的格式化属性，可以将这些段落组成一个 DivElement 对象，然后将属性应用于该对象。这些段落将从该 DivElement 对象继承属性。
	 
	 </apiDesc><example conref="examples\DivElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:DivElement:DivElement"><apiName>DivElement</apiName><shortdesc> 构造函数 - 创建新的 DivElement 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建新的 DivElement 对象。
			
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:Configuration"><apiName>Configuration</apiName><shortdesc> 
	Configuration 类是文本布局框架与应用程序之间的一个主要集成点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	Configuration 类是文本布局框架与应用程序之间的一个主要集成点。在创建新 TextFlow 实例时，可以包括一个 Configuration 对象，作为 <codeph>TextFlow()</codeph> 构造函数的参数。其允许应用程序最初控制文本布局框架的行为。
	
	<p>Configuration 类允许通过 <codeph>textFlowInitialFormat</codeph> 属性为文本流指定初始的段落和容器格式。它还可用于为链接、当前选择、滚动指定初始格式属性，以及为处理 Tab 和 Enter 键指定初始格式属性。</p>
	
	</apiDesc><example conref="examples\ConfigurationExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>TextDecoration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:Configuration:Configuration"><apiName>Configuration</apiName><shortdesc> 构造函数 - 创建默认配置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initializeWithDefaults</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否使用默认值初始化配置。默认值为 <codeph>true</codeph>。如果设置为 <codeph>false</codeph>，则不使用默认值进行初始化，从而保存某些对象。<codeph>clone()</codeph> 方法可将其设置为 <codeph>false</codeph>，并从原始对象复制属性。
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> 构造函数 - 创建默认配置。 
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:Configuration:clone"><apiName>clone</apiName><shortdesc> 创建 Configuration 对象的克隆。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 创建 Configuration 对象的克隆。
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc conref="IConfiguration#enableAccessibility"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#enableAccessibility"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc conref="IConfiguration#flowComposerClass"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc conref="IConfiguration#flowComposerClass"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc conref="IConfiguration#focusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#focusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc conref="IConfiguration#inactiveSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#inactiveSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc conref="IConfiguration#inlineGraphicResolver"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="IConfiguration#inlineGraphicResolver"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc conref="IConfiguration#manageEnterKey"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageEnterKey"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc conref="IConfiguration#manageTabKey"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageTabKey"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc conref="IConfiguration#overflowPolicy"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="IConfiguration#overflowPolicy"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc conref="IConfiguration#releaseLineCreationData"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#releaseLineCreationData"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData"><linktext>TextBlock.releaseLineCreationData</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc conref="IConfiguration#scrollDragDelay"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragDelay"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc conref="IConfiguration#scrollDragPixels"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragPixels"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc conref="IConfiguration#scrollPagePercentage">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollPagePercentage">
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc conref="IConfiguration#textFlowInitialFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#textFlowInitialFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowElement"><apiName>FlowElement</apiName><shortdesc>
 流中的文本以树形式存储，树中的元素表示文本内的逻辑分段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 流中的文本以树形式存储，树中的元素表示文本内的逻辑分段。FlowElement 类是该树中所有对象的抽象基类。FlowElement 对象表示段落、段落中文本跨距和段落组。
 
 <p>可合成的 FlowElement 树的根始终是一个 TextFlow 对象。树的叶元素始终是 FlowLeafElement 类的子类。在可合成的 TextFlow 中排列的所有叶都具有 ParagraphElement 祖代。
 </p> 
 
 <p>您不能直接创建 FlowElement 对象。调用 <codeph>new FlowElement()</codeph> 时会引发错误异常。</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowElement:FlowElement"><apiName>FlowElement</apiName><shortdesc> 基类 - 调用 new FlowElement() 时会引发错误异常。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 基类 - 调用 <codeph>new FlowElement() </codeph>时会引发错误异常。
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowElement:clearStyle"><apiName>clearStyle</apiName><shortdesc> 从该 FlowElement 对象清除 styleProp 参数指定的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>要清除的样式的名称。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 从该 FlowElement 对象清除由 <codeph>styleProp </codeph>参数指定的样式。将值设置为 <codeph>undefined</codeph>。
		 
		 </apiDesc><example conref="examples\FlowElement_clearStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:deepCopy"><apiName>deepCopy</apiName><shortdesc>
		 生成此 FlowElement 对象的深层副本，包括任何子对象，在两个指定的字符位置之间复制内容，并将该副本作为 FlowElement 对象返回。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>由深复制操作创建的对象。
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>要复制的第一个字符的相对文本位置。第一个位置为 0。
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>要复制的最后一个字符的相对文本位置。值为 -1 表示复制到末尾。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 生成此 FlowElement 对象的深层副本，包括任何子对象，在两个指定的字符位置之间复制内容，并将该副本作为 FlowElement 对象返回。
		 
		 <p>如果不使用任何参数，则默认情况下 <codeph>deepCopy()</codeph> 复制整个元素。</p>
		 
		 </apiDesc><example conref="examples\FlowElement_deepCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/shallowCopy()"><linktext>shallowCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:equalUserStyles"><apiName>equalUserStyles</apiName><shortdesc> 将此元素的 userStyles 与 elem 比较。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果用户样式是相等的，则为 true；否则为 false。
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>otherElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>用以比较用户样式的 FlowElement 对象
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 将此元素的 userStyles 与 elem 比较。 
		 
		 </apiDesc><example conref="examples\FlowElement_equalUserStylesExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc>
		 返回该元素在文本流中的起始位置（绝对索引）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>该元素起始位置相对于 TextFlow 对象起始位置的索引。
 		 
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 返回该元素在文本流中的起始位置（绝对索引）。流中的第一个字符位于位置 0。
		 
		 </apiDesc><example conref="examples\FlowElement_getAbsoluteStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/parentRelativeStart"><linktext>parentRelativeStart</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharAtPosition"><apiName>getCharAtPosition</apiName><shortdesc> 
		返回相对于该 FlowElement 对象的指定位置的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含该字符的字符串。
		
		</apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>该 FlowElement 对象中的字符的相对位置。
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		返回相对于该 FlowElement 对象的指定位置的字符。第一个字符位于相对位置 0。
		
		</apiDesc><example conref="examples\FlowElement_getCharAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharCodeAtPosition()"><linktext>getCharCodeAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharCodeAtPosition"><apiName>getCharCodeAtPosition</apiName><shortdesc> 返回相对于该 FlowElement 对象的指定位置的字符代码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定位置的字符的 Unicode 值。
		
		</apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	该 FlowElement 对象中的字符的相对位置。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 返回相对于该 FlowElement 对象的指定位置的字符代码。第一个字符位于相对位置 0。
		
		</apiDesc><example conref="examples\FlowElement_getCharCodeAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharAtPosition()"><linktext>getCharAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getElementRelativeStart"><apiName>getElementRelativeStart</apiName><shortdesc>
		 返回该元素相对于祖代元素的起始位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>该元素的偏移。
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>ancestorElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>要查找该元素相对起始位置时对应的基准元素。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 返回该元素相对于祖代元素的起始位置。假定祖代元素位于父链中。如果祖代元素是父元素，则与 <codeph>this.parentRelativeStart</codeph> 相同。如果祖代元素是祖父元素，则与 <codeph>parentRelativeStart</codeph> 及 <codeph>parent.parentRelativeStart</codeph> 等相同。
		 
		 </apiDesc><example conref="examples\FlowElement_getElementRelativeStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getAbsoluteStart()"><linktext>getAbsoluteStart()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getNextSibling"><apiName>getNextSibling</apiName><shortdesc> 返回文本流层次结构中的下一个 FlowElement 同级对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>下一个同一类型的 FlowElement 对象，如果没有同级对象，则为 null。
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 返回文本流层次结构中的下一个 FlowElement 同级对象。 
		
		</apiDesc><example conref="examples\FlowElement_getNextSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getPreviousSibling()"><linktext>getPreviousSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getParagraph"><apiName>getParagraph</apiName><shortdesc>
		 返回与该元素关联的 ParagraphElement 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>与该 FlowElement 对象关联的 ParagraphElement 对象。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 返回与该元素关联的 ParagraphElement 对象。它查找文本流层次结构，并返回第一个 ParagraphElement 对象。
		 
		 </apiDesc><example conref="examples\FlowElement_getParagraphExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getTextFlow()"><linktext>getTextFlow()</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getPreviousSibling"><apiName>getPreviousSibling</apiName><shortdesc> 返回文本流层次结构中的上一个 FlowElement 同级对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>上一个同一类型的 FlowElement 对象，如果没有上一个同级对象，则为 null。
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 返回文本流层次结构中的上一个 FlowElement 同级对象。 
		
		</apiDesc><example conref="examples\FlowElement_getPreviousSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getNextSibling()"><linktext>getNextSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getStyle"><apiName>getStyle</apiName><shortdesc> 返回由 styleProp 参数指定的样式值，该参数指定样式名称，可以包括任何用户样式名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定的样式的值。类型随正在访问的样式类型而异。如果未设置样式，则返回 <codeph>undefined</codeph>。
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>要检索其值的样式的名称。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 返回由<codeph> styleProp </codeph>参数指定的样式值，该参数指定样式名称，可以包括任何用户样式名称。访问现有跨距、段落、文本流或容器样式。如果对于某个特定元素，样式的值为 <codeph>undefined</codeph>，则搜索父级树。
		 
		 </apiDesc><example conref="examples\FlowElement_getStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getTextFlow"><apiName>getTextFlow</apiName><shortdesc>
		 沿文本流层次结构向上移动，返回该元素的 TextFlow 根对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>该 FlowElement 对象的 TextFlow 根对象。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 沿文本流层次结构向上移动，返回该元素的 TextFlow 根对象。
		 
		 </apiDesc><example conref="examples\FlowElement_getTextFlowExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getText"><apiName>getText</apiName><shortdesc> 
		 从流元素获取指定的文本范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>请求的文本。
		 
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>要检索的文本范围的起始位置（相对于 FlowElement 的起始处）
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>要检索的文本范围的结束位置（相对于 FlowElement 的起始处），从 -1 到元素的结尾
		 </apiDesc></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>放置在段落之间的字符
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 从流元素获取指定的文本范围。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:initialized"><apiName>initialized</apiName><shortdesc> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>文档用来引用此对象的标识符。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:setStyle"><apiName>setStyle</apiName><shortdesc> 将 styleProp 参数指定的样式设置为 newValue 参数指定的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>要设置的样式的名称。
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>要为样式设置的值。
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 将 <codeph>styleProp </codeph>参数指定的样式设置为 <codeph>newValue </codeph>参数指定的值。您可以设置跨距、段落、文本流或容器样式，包括任何用户名称/值对。
		
		<p><b>注意：</b>如果指定自定义样式，Text Layout Framework 可以导入和导出此样式，但是编译的 MXML 不能支持该样式。</p>
		
		</apiDesc><example conref="examples\FlowElement_setStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:shallowCopy"><apiName>shallowCopy</apiName><shortdesc>
		 生成此 FlowElement 对象的副本，复制两个指定的字符位置之间的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>由该复制操作创建的对象。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>要复制的第一个字符的相对文本位置。第一个位置为 0。
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>要复制的最后一个字符的相对文本位置。值为 -1 表示复制到末尾。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 生成此 FlowElement 对象的副本，复制两个指定的字符位置之间的内容。它将该副本作为一个新 FlowElement 对象返回。与 <codeph>deepCopy()</codeph> 不同，<codeph>shallowCopy()</codeph> 不复制该 FlowElement 对象的任何子对象。 
		 
		 <p>如果不使用任何参数，则默认情况下 <codeph>shallowCopy()</codeph> 复制所有内容。</p>
		 
		 </apiDesc><example conref="examples\FlowElement_shallowCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/deepCopy()"><linktext>deepCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:splitAtPosition"><apiName>splitAtPosition</apiName><shortdesc> 
		 在由 relativePosition 参数指定的位置处拆分此 FlowElement 对象，该位置是此元素的文本中的相对位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>relativePosition</codeph> 大于 <codeph>textLength</codeph> 或小于 0。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>新对象，它包含原始对象的内容，且在指定的位置处开始。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>拆分原始对象的内容的位置，第一个位置为 0。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 在由 <codeph>relativePosition</codeph> 参数指定的位置处拆分此 FlowElement 对象，该位置是此元素的文本中的相对位置。此方法仅拆分 SpanElement 和 FlowGroupElement 对象。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowElement:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat：指定主导基线对齐到的基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定主导基线对齐到的基线。例如，如果将 <codeph>dominantBaseline</codeph> 设置为 ASCENT，则将 <codeph>alignmentBaseline</codeph> 设置为 DESCENT 会将文本的顶部与 DESCENT 基线对齐，或在该线下面。基线通常由行中最大的元素决定。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>合法值为 flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM、flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有任何祖代设置此属性，则它将具有值 USE_DOMINANT_BASELINE。</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat：背景的 Alpha（透明度）值（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：背景的 Alpha（透明度）值（如果在层叠期间未定义，则使用默认值）。值为 0 表示完全透明，值为 1 表示完全不透明。Alpha 设置为 0 的显示对象是活动对象，即使它们不可见。
		 <p>合法值为 0 到 1 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 1。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat：文本的背景颜色（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的背景颜色（如果在层叠期间未定义，则使用默认值）。可以是常量值 <codeph>BackgroundColor.TRANSPARENT</codeph>，或一个指定三个 8 位 RGB（红、绿、蓝）值的十六进制值，例如 0xFF0000 表示红色，0x00FF00 表示绿色。
		 <p>合法值为字符串 flashx.textLayout.formats.BackgroundColor.TRANSPARENT、flashx.textLayout.formats.FormatValue.INHERIT 和 0x0 到 0xffffffff 范围内的 uint。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TRANSPARENT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat：从 dominantBaseline 值偏移基线的数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：基线距 <codeph>dominantBaseline</codeph> 值的偏移量。单位是像素或者 <codeph>fontSize</codeph> 的百分比（此时应输入字符串值，例如 140%）。如果是正值，则将水平文本行向上（对于垂直文本行是向右）移动；如果是负值，则将水平文本行向下（对于垂直文本行是向左）移动。 
		 <p>合法值为 flashx.textLayout.formats.BaselineShift.SUPERSCRIPT、flashx.textLayout.formats.BaselineShift.SUBSCRIPT 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>百分比合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0.0。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat：指定线位置的垂直或水平行进。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定线位置的垂直或水平行进。将行按照从上至下（<codeph>BlockProgression.TB</codeph>，用于水平文本行）或从右至左（<codeph>BlockProgression.RL</codeph>，用于垂直文本行）的顺序放置。
		 <p>合法值为 flashx.textLayout.formats.BlockProgression.RL、flashx.textLayout.formats.BlockProgression.TB 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 TB。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat：控制在将连续文本断开为多行时允许行断开的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：控制在将连续文本断开为多行时允许行断开的位置。设置为 <codeph>BreakOpportunity.AUTO</codeph> 以正常断开文本。设置为 <codeph>BreakOpportunity.NONE</codeph> 以不<i/>断开文本，除非文本会超出测量限度且不存在任何其它位置来断开行。设置为 <codeph>BreakOpportunity.ANY</codeph> 以允许该行在任意位置断开，而不是仅仅在单词之间断开。设置为 <codeph>BreakOpportunity.ALL</codeph> 以将每个排版群集放置在一个单独的行上（对于路径上的文本很有用）。
		 <p>合法值为 flash.text.engine.BreakOpportunity.ALL、flash.text.engine.BreakOpportunity.ANY、flash.text.engine.BreakOpportunity.AUTO、flash.text.engine.BreakOpportunity.NONE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat：用于此文本的 CFF 提示的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于此文本的 CFF 提示的类型。CFF 提示决定了 Flash 运行时是否强制让粗水平线适合子像素网格。只有当 <codeph>renderingMode</codeph> 属性被设置为 <codeph>RenderingMode.CFF</codeph> 且嵌入了字体（<codeph>fontLookup</codeph> 属性被设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph>）时，才会应用此属性。对于小的屏幕尺寸，提示将生成让人易于阅读的清晰文本。
		 <p>合法值为 flash.text.engine.CFFHinting.NONE、flash.text.engine.CFFHinting.HORIZONTAL_STEM 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 HORIZONTAL_STEM。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat：文本的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的颜色。一个十六进制数字，指定三个 8 位 RGB（红、绿、蓝）值，例如 0xFF0000 表示红色，0x00FF00 表示绿色。 
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat：文本列数（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本列数（如果在层叠期间未定义，则使用默认值）。该列数会覆盖其它列设置。该值是一个整数，如果未指定，则为 <codeph>FormatValue.AUTO</codeph>。如果未指定 <codeph>columnCount</codeph>，则系统使用 <codeph>columnWidth</codeph> 创建容器可容纳的尽可能多的列。
		 <p>合法字符串值为 flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT 及从 1 到 50 范围内的整数。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat：指定要在列之间留出的装订线空间量（以像素为单位），如果在层叠期间未定义，则使用默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定要在列之间留出的装订线空间量（以像素为单位），如果在层叠期间未定义，则使用默认值。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 20。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat：列宽（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：列宽（以像素为单位）（如果在层叠期间未定义，则使用默认值）。如果指定了列宽而没有指定列数，则 TextLayout 将根据容器宽度和 <codeph>columnGap</codeph> 设置，尽可能多地创建具有该宽度的列。在最后一个列之后将留出任意空格。该值是一个数字。
		 <p>合法值为字符串 flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT，和 0 到 8000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 返回对于该元素有效的计算得出的格式属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 返回对于该元素有效的计算得出的格式属性。考虑从父元素继承属性。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> 返回 FlowElement 实例的核心样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> 返回 FlowElement 实例的核心样式。返回核心样式字典 
		  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat：用于此文本的数字大小写类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于此文本的数字大小写类型。将该值设置为 <codeph>DigitCase.OLD_STYLE</codeph> 时接近支持不同上行字母和下行字母的小写字母形式。各位数字之间等比间隔。此样式只适用于所选的字体，最常用于 supplemental 或 expert 字体。<codeph>DigitCase.LINING</codeph> 设置具有 all-cap（全大写）高度，通常为等宽以便在图表中对齐。<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>合法值为 flash.text.engine.DigitCase.DEFAULT、flash.text.engine.DigitCase.LINING、flash.text.engine.DigitCase.OLD_STYLE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat：用于此文本的数字宽度类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于此文本的数字宽度类型。可以是 <codeph>DigitWidth.PROPORTIONAL</codeph>，最适用于显示单独出现的数字，或者是 <codeph>DigitWidth.TABULAR</codeph>，最适用于显示表、图表和垂直行中的数字。<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>合法值为 flash.text.engine.DigitWidth.DEFAULT、flash.text.engine.DigitWidth.PROPORTIONAL、flash.text.engine.DigitWidth.TABULAR 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat：指定文本在文本块中的默认双向嵌入级别。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定文本在文本块中的默认双向嵌入级别。从左到右的阅读顺序，如在拉丁风格的文本中，或者从右到左的阅读顺序，如阿拉伯语或希伯来语。此属性还影响在容器级别应用时列的方向。与文本一样，列可以为从左到右或从右到左排列。下面给出了一些示例：<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>合法值为 flashx.textLayout.formats.Direction.LTR、flashx.textLayout.formats.Direction.RTL 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 LTR。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat：指定该元素的哪条基线紧贴到 alignmentBaseline 以确定元素在该行上的垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定该元素的哪条基线紧贴到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。值为 <codeph>TextBaseline.AUTO</codeph> 会基于父段落的 <codeph>locale</codeph> 属性选择主导基线。对于日语和中文，选定的基线值是 <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>；对于所有其它语言，选定的基线值是 <codeph>TextBaseline.ROMAN</codeph>。这些基线选项由选择的字体和字体大小决定。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>合法值为 flashx.textLayout.formats.FormatValue.AUTO、flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat：指定容器中第一行的基线位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定容器中第一行的基线位置。该属性引用的基线取决于容器级别的区域设置。对于日语和中文，为 <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>；对于所有其它语言，为 <codeph>TextBaseline.ROMAN</codeph>。从容器顶部边界（如果 <codeph>blockProgression</codeph> 是 RL 则为右侧边界）到第一行的基线之间的偏移可以是 <codeph>BaselineOffset.ASCENT</codeph>，表示等于行的 ascent（文本顶端或右端到基线的距离），也可以是 <codeph>BaselineOffset.LINE_HEIGHT</codeph>，表示等于第一行的高度，或者是任何固定值数字，用于指定绝对距离。<codeph>BaselineOffset.AUTO</codeph> 可将行的 ascent 与容器顶部边界对齐。<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>合法值为字符串 flashx.textLayout.formats.BaselineOffset.AUTO、flashx.textLayout.formats.BaselineOffset.ASCENT、flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT、flashx.textLayout.formats.FormatValue.INHERIT 和 0 到 1000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat：要使用的字体的名称或用逗号分隔的字体名称列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：要使用的字体的名称或用逗号分隔的字体名称列表。Flash 运行时使用列表中的第一个可用字体呈现该元素。例如，“Arial, Helvetica, _sans”使播放器搜索 Arial；如果没有找到 Arial，则搜索 Helvetica；如果两者都没找到，则搜索 _sans。
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 Arial。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat：要使用的字体查找。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：要使用的字体查找。指定为 <codeph>FontLookup.DEVICE</codeph> 时会使用运行 SWF 文件的系统上安装的字体。设备字体会减小影片大小，但是在不同系统和平台中文本的呈现方式可能不同。指定为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 时会使用嵌入到已发布的 SWF 文件中的字体轮廓。嵌入的字体会增大 SWF 文件大小（有时程度很大），但是文本以所选的字体一致显示。
		 <p>合法值为 flash.text.engine.FontLookup.DEVICE、flash.text.engine.FontLookup.EMBEDDED_CFF 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEVICE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat：文本的大小（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的大小（以像素为单位）。
		 <p>合法值为 1 到 720 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 12。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat：文本的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的样式。可以为 <codeph>FontPosture.NORMAL</codeph>，用于纯文本，或者为 <codeph>FontPosture.ITALIC</codeph>，用于斜体。此属性只应用于设备字体（<codeph>fontLookup</codeph> 属性设置为 flash.text.engine.FontLookup.DEVICE 时）。
		 <p>合法值为 flash.text.engine.FontPosture.NORMAL、flash.text.engine.FontPosture.ITALIC 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NORMAL。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat：文本的粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的粗细。可以为 <codeph>FontWeight.NORMAL</codeph>，用于纯文本，或者为 <codeph>FontWeight.BOLD</codeph>。只应用于设备字体（<codeph>fontLookup</codeph> 属性设置为 flash.text.engine.FontLookup.DEVICE 时）。
		 <p>合法值为 flash.text.engine.FontWeight.NORMAL、flash.text.engine.FontWeight.BOLD 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NORMAL。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:format:get"><apiName>format</apiName><shortdesc> TextLayoutFormat 属性直接应用于该元素。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> TextLayoutFormat 属性直接应用于该元素。
		 <p>每个元素可以应用属性，作为其格式的一部分。应用于该元素的属性会覆盖从父项继承的属性。应用于该元素的属性又会由其子元素继承（如果没有覆盖子元素的这些属性）。如果没有任何属性应用于该元素，则为 null。</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:id:get"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat：用于将段落中的文本两端对齐的规则。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于将段落中的文本两端对齐的规则。默认值为 <codeph>FormatValue.AUTO</codeph>，它基于段落的 <codeph>locale</codeph> 属性将文本两端对齐。对于除了日语和中文之外的所有语言，<codeph>FormatValue.AUTO</codeph> 会变成 <codeph>JustificationRule.SPACE</codeph>，后者会向空格字符添加额外的空格。对于日语和中文，<codeph>FormatValue.AUTO</codeph> 会变成 <codeph>JustficationRule.EAST_ASIAN</codeph>。在某种程度上，两端对齐会改变标点的间距。在罗马文本中，逗号和日语句号占一个全字符的宽度，但在东亚文本中，仅占一个字符宽度的一半。另外，在东亚文本中，连续的标点符号之间的间距会变得更紧密，遵守传统东亚排版惯例。同样要注意的是，在下面的示例中，应用到段落的第二行的行距。在东亚版本中，最后两行向左推进。在罗马版本中，第二行和之后的行向左推进。<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.JustificationRule.EAST_ASIAN、flashx.textLayout.formats.JustificationRule.SPACE、flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat：用于将段落两端对齐的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于将段落两端对齐的样式。仅与 <codeph>JustificationRule.EAST_ASIAN</codeph> 的 <codeph>justificationRule</codeph> 设置一起使用。对于所有区域设置，<codeph>FormatValue.AUTO</codeph> 的默认值被解析为 <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>。JustificationStyle 类定义的常量指定用于处理避头尾 (kinsoku) 字符的选项；避头尾字符是指不能出现在一行首尾的日语字符。如果希望文本布局更宽松，请指定 <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>。如果希望文本布局类似于使用<codeph> JustificationRule.SPACE</codeph> 的 <codeph>justificationRule</codeph> 得到的结果，可使用 <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>。
		 <p>合法值为 flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT、flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU、flash.text.engine.JustificationStyle.PUSH_OUT_ONLY、flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat：字距调整用于调整某些字符对之间的像素以提高可读性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：字距调整用于调整某些字符对之间的像素以提高可读性。字距调整表的所有字体都支持字距调整。
		 <p>合法值为 flash.text.engine.Kerning.ON、flash.text.engine.Kerning.OFF、flash.text.engine.Kerning.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat：指定行距模型，它是行距基础和行距方向的组合。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定行距模型，它是行距基础和行距方向的组合。行距基础是 <codeph>lineHeight</codeph> 属性引用的基线。行距方向决定了 <codeph>lineHeight</codeph> 属性是引用一行基线与前一行基线之间的距离，还是与后一行基线之间的距离。默认值 <codeph>FormatValue.AUTO</codeph> 根据段落的 <codeph>locale</codeph> 属性进行解析。对于日语和中文，为 <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>，对于所有其它语言，为 <codeph>LeadingModel.ROMAN_UP</codeph>。<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.LeadingModel.ROMAN_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN、flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD、flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP、flashx.textLayout.formats.LeadingModel.AUTO、flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat：控制可以在该文本中使用字体中定义的哪些连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：控制可以在该文本中使用字体中定义的哪些连字。对于每个设置显示的连字取决于字体。由两个或两个以上的字母结合在一起形成单个字型时就是连字。连字通常用于替换一些共享公共部分的连续字符，例如字母对“fi”、“fl”或“ae”。在拉丁语字符集和非拉丁语字符集中均可使用连字。LigatureLevel 类的值（<codeph>MINIMUM</codeph>、<codeph>COMMON</codeph>、<codeph>UNCOMMON</codeph> 和 <codeph>EXOTIC</codeph>）支持的连字是添加的。每个值支持一个新连字集，而且包含先前类型的那些连字。<p><b>注意：</b>使用阿拉伯语或叙利亚语字体时，必须将 <codeph>ligatureLevel</codeph> 设置为 MINIMUM 或更高。</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>合法值为 flash.text.engine.LigatureLevel.MINIMUM、flash.text.engine.LigatureLevel.COMMON、flash.text.engine.LigatureLevel.UNCOMMON、flash.text.engine.LigatureLevel.EXOTIC 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 COMMON。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat：控制容器内的换行（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：控制容器内的换行（如果在层叠期间未定义，则使用默认值）。可以将容器中的文本设置为适合容器的宽度 (<codeph>LineBreak.TO_FIT</codeph>)，也可以设置为只在显式回车或换行符处断开 (<codeph>LineBreak.EXPLICIT</codeph>)。
		 <p>合法值为 flashx.textLayout.formats.LineBreak.EXPLICIT、flashx.textLayout.formats.LineBreak.TO_FIT 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TO_FIT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat：文本的行距控制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的行距控制。上一行或下一行（取决于 <codeph>LeadingModel</codeph>）的基线与当前行的基线之间的距离，等于应用于该行中任意字符的最大行距。该值可以是数字或百分比。如果指定百分比，请输入字符串值，例如 140%。<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>合法值为 -720 到 720 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 120%。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat：若为 true，则应用删除线（一条穿过文本中间的直线）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：如果为 <codeph>true</codeph>，则应用删除线（贯穿文本中间绘制的线）。
		 <p>合法值为 true、false 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 false。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkActiveFormat:set"><apiName>linkActiveFormat</apiName><shortdesc> 等效于 setStyle(linkActiveFormat,value)。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> 等效于 setStyle(linkActiveFormat,value)。需要属性字典。将一个以键和值作为成员的对象数组转换为一个字典。 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkHoverFormat:set"><apiName>linkHoverFormat</apiName><shortdesc> 等效于 setStyle(linkHoverFormat,value)。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> 等效于 setStyle(linkHoverFormat,value)。需要属性字典。将一个以键和值作为成员的对象数组转换为一个字典。 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkNormalFormat:set"><apiName>linkNormalFormat</apiName><shortdesc> 等效于 setStyle(linkNormalFormat,value)。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> 等效于 setStyle(linkNormalFormat,value)。需要属性字典。将一个以键和值作为成员的对象数组转换为一个字典。 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat：文本的区域设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，en、en_US 和 en-US 均表示英语，ja 表示日语。 
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 en。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat：底部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：底部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器底部边缘与文本之间的空间。该值是一个数字。 <p> 对于水平文本，在含有多个列的可滚动容器中，第一列和后续列将填充部分显示为容器底部的空白，但是对于最后一列，如果文本没有完全填充，可能必须进行滚动才能看到填充。</p>
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat：左边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：左边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器左边缘与文本之间的空间。该值是一个数字。<p> 对于垂直文本，在含有多个列的可滚动容器中，第一列和后续列将填充部分显示为容器末尾的空白，但是对于最后一列，如果文本没有完全填充，可能必须进行滚动才能看到填充。</p>
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat：右边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：右边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器右边缘与文本之间的空间。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat：顶部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：顶部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器顶部边缘与文本之间的空间。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat：一个数字，指定段落结束边缘的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：一个数字，指定段落结束边缘的缩进量（像素数）。是指从左到右文本中的右边缘和从右到左文本中的左边缘。 
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat：一个数字，指定在段落后留出的空白（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：一个数字，指定在段落后留出的空白（像素数）。与 <codeph>paragraphSpaceBefore</codeph> 一起使用时会合并。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat：一个数字，指定在段落前留出的空白（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：一个数字，指定在段落前留出的空白（像素数）。与 <codeph>paragraphSpaceAfter</codeph> 一起使用时会合并。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat：一个数字，指定段落开始边缘的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：一个数字，指定段落开始边缘的缩进量（像素数）。是指从左至右文本的左边和从右至左文本的右边。 
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeEnd:get"><apiName>parentRelativeEnd</apiName><shortdesc> 返回该 FlowElement 对象在父项中的相对结束位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 返回该 FlowElement 对象在父项中的相对结束位置。如果父项为 null，则始终等于 <codeph>textLength</codeph>。如果父项不是 null，则该值为此项及所有以前同级项的文本长度之和，实际上是下一个 FlowElement 对象的第一个字符。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeStart:get"><apiName>parentRelativeStart</apiName><shortdesc> 返回该 FlowElement 对象在父项中的相对起始位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 返回该 FlowElement 对象在父项中的相对起始位置。如果父项为 null，则该值始终为零。如果父项不为 null，则该值为所有以前同级项的文本长度之和。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parent:get"><apiName>parent</apiName><shortdesc> 返回该 FlowElement 对象的父项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> 返回该 FlowElement 对象的父项。每个 FlowElement 最多有一个父项。
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat：用于此文本的呈现模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于此文本的呈现模式。只应用于嵌入字体（<codeph>fontLookup</codeph> 属性设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 时）。
		 <p>合法值为 flash.text.engine.RenderingMode.NORMAL、flash.text.engine.RenderingMode.CFF 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 CFF。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styleName:get"><apiName>styleName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat：指定与段落关联的制表位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定与段落关联的制表位。Setter 可采用 flashx.textLayout.formats.TabStopFormat 数组、精简的字符串表示形式、undefined 或 <codeph>FormatValue.INHERIT</codeph>。精简的字符串形式始终转换为 flashx.textLayout.formats.TabStopFormat 的一个数组。 <p>基于字符串的格式是一个制表位列表，其中各个制表位由一个或多个空格分隔。</p><p>制表位的形式为：&lt;对齐类型>&lt;对齐位置>|&lt;对齐标记>。</p><p>对齐类型由一个字符表示，可以是 S、E、C 或 D（或相应小写字母）。S 或 s 表示起始，E 或 e 表示末尾，C 或 c 表示中心，D 或 d 表示小数。对齐类型是可选的，如果未指定，将默认为 S。</p><p>对齐位置是一个数字，根据数字的 FXG 规范（小数或科学表示法）指定。对齐位置是必需的。</p><p>垂直竖线用于分隔对齐位置和对齐标记，只有当存在对齐标记时才应存在。</p><p> 如果对齐类型为 D，则对齐标记是可选的，如果是其它对齐类型，则对齐标记不应存在。对齐标记可以是由制表位末尾空白所终止的任何字符序列（对于最后一个制表位，末尾空白可选，默认为对齐标记的末尾）。如果空格由反斜杠进行转义 (\ )，则可以是对齐标记本身的一部分。如果反斜杠由另一个反斜杠进行转义 (\\)，则可以是对齐标记本身的一部分。如果对齐类型为 D，且未指定对齐标记，则会使用默认值 null。</p><p>如果未指定制表位，则制表符操作默认为到达行的末尾。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 null。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat：两端对齐文本中段落最后一行（或唯一的一行）与容器的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：两端对齐文本中段落最后一行（或唯一的一行）与容器的对齐方式。如果 <codeph>textAlign</codeph> 设置为 <codeph>TextAlign.JUSTIFY</codeph>，则 <codeph>textAlignLast</codeph> 指定最后一行（如果是只含一行的块则为唯一一行）的对齐方式。其值类似于 <codeph>textAlign</codeph>。
		 <p>合法值为 flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 START。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat：段落中的行与容器的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：段落中的行与容器的对齐方式。<codeph>TextAlign.LEFT</codeph> 将文本行与容器左边缘对齐。<codeph>TextAlign.RIGHT</codeph> 与右边缘对齐。<codeph>TextAlign.CENTER</codeph> 等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。<codeph>TextAlign.JUSTIFY</codeph> 会展开行，使其充满整个空间。<codeph>TextAlign.START</codeph> 等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。<codeph>TextAlign.END</codeph> 等效于将从左至右的文本设置为右对齐，或将从右至左的文本设置为左对齐。
		 <p>合法值为 flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 START。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat：文本的 Alpha（透明度）值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本的 Alpha（透明度）值。值为 0 表示完全透明，值为 1 表示完全不透明。<codeph>textAlpha</codeph> 设置为 0 的显示对象是活动对象，即使它们不可见。
		 <p>合法值为 0 到 1 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 1。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat：文本上的装饰。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：文本上的装饰。用于应用下划线，默认值为 none。
		 <p>合法值为 flashx.textLayout.formats.TextDecoration.NONE、flashx.textLayout.formats.TextDecoration.UNDERLINE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NONE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat：一个数字，指定段落第一行的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：一个数字，指定段落第一行的缩进量（像素数）。如果为负值，则会将行向边缘中推进，可能会推到容器之外。
		 <p>合法值为 -1000 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat：指定文本两端对齐的选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：指定文本两端对齐的选项。默认值为 <codeph>TextJustify.INTER_WORD</codeph>，表示向空格符添加额外空格。<codeph>TextJustify.DISTRIBUTE</codeph> 会向空格符和各字母之间添加额外空格。仅与 <codeph>JustificationRule.SPACE</codeph> 的 <codeph>justificationRule</codeph> 值一起使用。
		 <p>合法值为 flashx.textLayout.formats.TextJustify.INTER_WORD、flashx.textLayout.formats.TextJustify.DISTRIBUTE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 INTER_WORD。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textLength:get"><apiName>textLength</apiName><shortdesc>
		 返回该 FlowElement 对象及其子对象拥有的文本总长度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 返回该 FlowElement 对象及其子对象拥有的文本总长度。如果某个元素没有文本，则 <codeph>textLength</codeph> 的值通常为零。 
		 
		 <p>ParagraphElement 对象的最后一个跨距具有最后一个 SpanElement 对象的段落终止符。该终止符包括在该 SpanElement 对象及其所有父对象的 <codeph>textLength</codeph> 值中。该终止符不包括在此 SpanElement 对象的 <codeph>text</codeph> 属性中。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat：确定要旋转此文本的度数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：确定要旋转此文本的度数。
		 <p>合法值为 flash.text.engine.TextRotation.ROTATE_0、flash.text.engine.TextRotation.ROTATE_180、flash.text.engine.TextRotation.ROTATE_270、flash.text.engine.TextRotation.ROTATE_90、flash.text.engine.TextRotation.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat：像素数（或 fontSize 的百分比，如 120%），指示应用于每个字符左侧的间隙数（手动字距调整）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：数字（以像素为单位）（或 <codeph>fontSize</codeph> 的百分比，如 120%）表示要应用到每个字符左边的间距的量（手动字距调整）。如果启用字距调整，则会将 <codeph>trackingLeft</codeph> 值与字体字距调整表中的值相加。如果禁用字距调整，则使用 <codeph>trackingLeft</codeph> 值作为手动字距调整值。同时支持正值和负值。 
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat：数字（以像素为单位）（或 fontSize 的百分比，如 120%）表示要应用到每个字符右边的间距的量（手动字距调整）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：数字（以像素为单位）（或 <codeph>fontSize</codeph> 的百分比，如 120%）表示要应用到每个字符右边的间距的量（手动字距调整）。如果启用字距调整，则会将 <codeph>trackingRight</codeph> 值与字体字距调整表中的值相加。如果禁用字距调整，则使用 <codeph>trackingRight</codeph> 值作为手动字距调整值。同时支持正值和负值。 
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat：用于此文本的印刷大小写的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：用于此文本的印刷大小写的类型。下面给出了一些示例：<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.TLFTypographicCase.DEFAULT、flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS、flashx.textLayout.formats.TLFTypographicCase.UPPERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:userStyles:get"><apiName>userStyles</apiName><shortdesc> 允许您针对 FlowElement 对象读写用户样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 允许您针对 FlowElement 对象读写用户样式。请注意，读取该属性会创建用户样式字典的一个副本。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat：垂直对齐或两端对齐（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：垂直对齐或两端对齐（如果在层叠期间未定义，则使用默认值）。确定 TextFlow 元素在容器内如何对齐。
		 <p>合法值为 flashx.textLayout.formats.VerticalAlign.TOP、flashx.textLayout.formats.VerticalAlign.MIDDLE、flashx.textLayout.formats.VerticalAlign.BOTTOM、flashx.textLayout.formats.VerticalAlign.JUSTIFY 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TOP。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat：将文本导入到 TextFlow 中时压缩或保留空白。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat：将文本导入到 TextFlow 中时压缩或保留空白。<codeph>WhiteSpaceCollapse.PRESERVE</codeph> 会保留所有空白字符。如果为 <codeph>WhiteSpaceCollapse.COLLAPSE</codeph>，则会删除导入的文本块中的新行、制表符以及前导或结尾空格。换行标记 () 和 Unicode 行分隔符将会保留。
		 <p>合法值为 flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE、flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 COLLAPSE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tlf_internal:impliedElement:set"><apiName>impliedElement</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tracking:set"><apiName>tracking</apiName><shortdesc>
		 设置间隙，且与 trackingRight 属性同义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
		 设置间隙，且与 <codeph>trackingRight</codeph> 属性同义。指定为像素数或 <codeph>fontSize</codeph> 的百分比。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/trackingRight"><linktext>trackingRight</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkElement"><apiName>LinkElement</apiName><shortdesc> LinkElement 类定义指向 URI（统一资源标识符）的链接，当用户单击此链接时将执行该类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> LinkElement 类定义指向 URI（统一资源标识符）的链接，当用户单击此链接时将执行该类。LinkElement 类是 SubParagraphGroupElement 类的一个子类，可以包含一个或多个 FlowElement 对象，例如用于存储链接文本的 SpanElement 对象。将会忽略不包含 FlowElement 对象的空 LinkElement。
	 <p>如果指定目标，必须指定下列值之一：
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>目标值</entry><entry>说明</entry></row></thead><tbody><row>
	   <entry>_self</entry>
	   <entry>替换当前 HTML 页面。如果其位于框架或框架集内，则会在该框架内加载。如果其是完全的浏览器，则打开时会替换源页面。</entry>
	 </row><row>
	   <entry>_blank</entry>
	   <entry>打开一个未命名的新浏览器。</entry>
	 </row><row>
	   <entry>_parent</entry>
	   <entry>替换源 HTML 页面。</entry>
	 </row><row>
	   <entry>_top</entry>
	   <entry>在当前浏览器中加载，替换其中任何内容，例如框架集。</entry>
	 </row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc><example conref="examples\LinkElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.CLICK_click"><apiName>click</apiName><shortdesc> 
	 当单击链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.CLICK</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 当单击链接时分派。客户端自己处理事件并调用 preventDefault()，可以覆盖链接处理事件的方式。
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT_rollOut"><apiName>rollOut</apiName><shortdesc> 
	 当鼠标离开链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 当鼠标离开链接时分派。 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER_rollOver"><apiName>rollOver</apiName><shortdesc>
	 当鼠标首次进入链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 当鼠标首次进入链接时分派。 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><shortdesc> 
	 当鼠标经过链接时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 当鼠标经过链接时分派。 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><shortdesc> 
	 在链接上松开鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 在链接上松开鼠标时分派。 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><shortdesc> 
	 在链接上按下鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 在链接上按下鼠标时分派。
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:LinkElement:LinkElement"><apiName>LinkElement</apiName><shortdesc> 构造函数 - 创建新 LinkElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建新 LinkElement 实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:LinkElement:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。
		</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>处理事件的侦听器函数。此函数必须接受事件对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示：
		<p><codeph>function(evt:Event):void</codeph></p>
		函数可以有任何名称。
		</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定侦听器是运行于捕获阶段还是运行于目标和冒泡阶段。如果将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，则侦听器只在捕获阶段处理事件，而不在目标或冒泡阶段处理事件。如果 <codeph>useCapture</codeph> 为 <codeph>false</codeph>，则侦听器只在目标或冒泡阶段处理事件。要在所有三个阶段都侦听事件，请调用两次 <codeph>addEventListener()</codeph>，一次将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，第二次再将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>。
		</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>事件侦听器的优先级。优先级由一个 32 位整数指定。数字越大，优先级越高。优先级为 <i>n</i> 的所有侦听器会在优先级为 <i>n-1</i> 的侦听器之前处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。 
		</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定对侦听器的引用是强引用，还是弱引用。强引用（默认值）可防止您的侦听器被当作垃圾回收。弱引用则没有此作用。 <p>类级别成员函数不属于垃圾回收的对象，因此可以对类级别成员函数将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph> 而不会使它们受垃圾回收的影响。如果对作为嵌套内部函数的侦听器将 <codeph>useWeakReference</codeph> 设置为 <codeph>true</codeph>，则该函数将被作为垃圾回收并且不再是永久函数。如果创建对该内部函数的引用（将该函数保存到另一个变量中），则该函数将不作为垃圾回收并仍将保持永久。</p>
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>要删除的侦听器对象。
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指出是为捕获阶段还是为目标和冒泡阶段注册了侦听器。如果为捕获阶段以及目标和冒泡阶段注册了侦听器，则需要对 <codeph>removeEventListener()</codeph> 进行两次调用才能将这两个侦听器删除：一次调用将 <codeph>useCapture</codeph> 设置为 <codeph>true</codeph>，另一次调用将 <codeph>useCapture</codeph> 设置为 <codeph>false</codeph>。 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:LinkElement:href:get"><apiName>href</apiName><shortdesc>
		 与 LinkElement 对象关联的统一资源标识符 (URI)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 与 LinkElement 对象关联的统一资源标识符 (URI)。URI 可以是 <codeph>flash.net.navigateToURL()</codeph> 方法支持的任何 URI。该属性映射到此方法的 <codeph>request</codeph> 参数。
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.xml#net/navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:linkState:get"><apiName>linkState</apiName><shortdesc>
		 链接的当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 链接的当前状态。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:target:get"><apiName>target</apiName><shortdesc>
		 与 LinkElement 关联的目标值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 与 LinkElement 关联的目标值。可能的值为 _self、_blank、_parent 和 _top。该值映射到 <codeph>flash.net.navigateToURL()</codeph> 方法的 <codeph>window</codeph> 参数。
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.xml#net/navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TCYElement"><apiName>TCYElement</apiName><shortdesc> 
	 TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) 类是 SubParagraphGroupElement 的一个子类，可使文本在垂直行中水平排列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 TCYElement (Tatechuuyoko - ta-tae-chu-yo-ko) 类是 SubParagraphGroupElement 的一个子类，可使文本在垂直行中水平排列。过去，该类用于提高非日语文本或数字（如日期）的小文本块的可读性。TCY 可应用于水平文本，但是对于绘制样式没有影响，除非将其转换为垂直文本。在规范化期间，不含文本的 TCY 块将会从文本流中删除。
	 <p>
	 在下例中，右侧图像显示应用于数字 57 的 TCY，而左侧图像没有 TCY 格式设置。</p>
	 <p><adobeimage alt="TCYElement" border="0" href="../../../images/textLayout_TCYElement.png"/>
	 </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TCYElement:TCYElement"><apiName>TCYElement</apiName><shortdesc> 构造函数 - 创建新 TCYElement 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建新 TCYElement 实例。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:OverflowPolicy"><apiName>OverflowPolicy</apiName><shortdesc>
	  OverflowPolicy 类为 IConfiguration 类的 overflowPolicy 属性定义一组常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  OverflowPolicy 类为 IConfiguration 类的 <codeph>overflowPolicy </codeph>属性定义一组常量。其定义合成器如何处理位于合成区域末尾的行。
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_ANY"><apiName>FIT_ANY</apiName><shortdesc> 
	 如果该行的任何部分位于合成区域内，则该行将位于该区域内。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitAny</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 如果该行的任何部分位于合成区域内，则该行将位于该区域内。
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_DESCENDERS"><apiName>FIT_DESCENDERS</apiName><shortdesc> 
	 如果从顶部至基线的区域位于合成区域内，则该行位于该区域内。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitDescenders</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 如果从顶部至基线的区域位于合成区域内，则该行位于该区域内。
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:GlobalSettings"><apiName>GlobalSettings</apiName><shortdesc> 应用于所有 TextFlow 对象的配置。</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 应用于所有 TextFlow 对象的配置。
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:GlobalSettings:tlf_internal:enableDefaultTabStops:get"><apiName>enableDefaultTabStops</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:enableSearch:get"><apiName>enableSearch</apiName><shortdesc> 控制文本是否对搜索引擎索引器可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> 控制文本是否对搜索引擎索引器可见。默认为 <codeph>true</codeph>。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:fontMapperFunction:get"><apiName>fontMapperFunction</apiName><shortdesc> 
		指定用于字体映射的回调。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
		指定用于字体映射的回调。该回调采用 <codeph>flash.text.engine.FontDescription</codeph> 对象并根据需要对其进行更新。设置完一个新的字体映射回调，或更改了现有字体映射回调的行为后，客户端必须为每个压缩文本流显式调用 <codeph>flashx.textLayout.elements.TextFlow.invalidateAllFormats</codeph>。这可确保每当重新合成文本流中的叶元素时，应用于它的 FontDescription 都可重新计算，并调用该回调。 
		
		</apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontDescription.xml"><linktext>FontDescription</linktext></link><link href="" invalidHref="flashx.textLayout.elements.TextFlow.invalidateAllFormats.xml"><linktext>invalidateAllFormats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resolveFontLookupFunction:get"><apiName>resolveFontLookupFunction</apiName><shortdesc> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link><link href="" invalidHref="flash.text.engine.ElementFormat.xml"><linktext/></link><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resourceStringFunction:get"><apiName>resourceStringFunction</apiName><shortdesc> 采用两个参数、一个资源 ID 和一个替换到字符串中的可选参数数组的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 采用两个参数、一个资源 ID 和一个替换到字符串中的可选参数数组的函数。此字符串采用“Content {0} more content {1}”格式。这些参数是从可选数组中读取的，并替换加括号的子字符串。TLF 为默认字符串提供默认实现。客户端可以使用自己的本地化实现替换此函数。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:BreakElement"><apiName>BreakElement</apiName><shortdesc> 
	BreakElement 类定义换行，用于在文本中创建换行而不会创建新段落。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	BreakElement 类定义换行，用于在文本中创建换行而不会创建新段落。它可在段落文本中插入一个 U+2028 字符。
	
	<p><b>注意</b>：该类主要用于支持 MXML 标记中的换行标签。要创建换行，可以直接将新行字符 (\n) 添加到文本中，如下所示：</p>
	
	<codeblock rev="3.0">
	spanElement1.text += '\n';
	</codeblock>
	
	</apiDesc><example conref="examples\BreakElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:BreakElement:BreakElement"><apiName>BreakElement</apiName><shortdesc> 构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数。 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> InlineGraphicElement 类处理在文本中内嵌显示的图形对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> InlineGraphicElement 类处理在文本中内嵌显示的图形对象。 
	 
	 <p>可以嵌入一个图形或任何 DisplayObject，或者为图形位置指定 URl。InlineGraphicElement 的 <codeph>height</codeph> 和 <codeph>width</codeph> 属性可控制要显示的图形的实际大小。这些值也可以控制在包含图形的 TextLine 对象中为该图形分配的空间大小。<codeph>height</codeph> 和 <codeph>width</codeph> 属性都可以是下列值之一：</p>
	 <ol>
	 <li>像素数</li>
	 <li>图像测量大小的百分比</li>
	 <li>常量“auto”（默认值），将计算大小。</li>
	 </ol>
	 有三个关于图形宽度和高度的属性（或称存取器）：
	 <ul>
	 <li><codeph>width</codeph> 和 <codeph>height</codeph> 属性</li>
	 <li><codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph> 属性，表示加载时图形的宽度或高度</li>
	 <li><codeph>actualWidth</codeph> 和 <codeph>actualHeight</codeph> 属性，表示通过 <codeph>width</codeph> 或 <codeph>height</codeph> 以及 <codeph>measuredWidth</codeph> 或 <codeph>measuredHeight</codeph> 计算得到的图形的实际显示和合成宽度和高度</li>
	 </ul>
	 <p>在加载图形之前，<codeph>actualWidth</codeph> 和 <codeph>actualHeight</codeph> 属性的值始终为零。</p>
	 
	 <p>如果将 <codeph>source</codeph> 指定为一个 URI，则将异步加载该图形。如果这是一个 DisplayObject，则 TextLayout 在将图形作为 <codeph>measuredHeight</codeph> 和 <codeph>measuredWidth</codeph> 设置到 InlineGraphicElement 对象中时，使用 <codeph>width</codeph> 和 <codeph>height</codeph>；立即读取其宽度和高度。</p>
	 <p><b>注意</b>：对于异步加载的图形，用户必须侦听 TextFlow 上的 StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE 事件并调用 <codeph>IFlowComposer.updateAllControllers()</codeph>，才可显示图形。正在加载的图形的 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph> 的值为零。</p>
	 
	 <p>某些内联图形是可能具有音频的动画或视频。这些图形在加载完成后首次合成时开始运行。只有在将 TextFlow 的 flowComposer 设置为 null 后它们才会停止运行。此时，这些图形将会停止并卸载。</p>
	 
	 
	 <ol>
	 	<li/>.
	 <li/>
	 	<li/>
	 </ol>
	 </apiDesc><example conref="examples\InlineGraphicElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>DisplayObject</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>flashx.textLayout.compose.IFlowComposer.updateAllControllers()</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>StatusChangeEvent</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:InlineGraphicElement:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> 构造函数 - 创建新 InlineGraphicElement 对象
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 构造函数 - 创建新 InlineGraphicElement 对象
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualHeight:get"><apiName>actualHeight</apiName><shortdesc> 有效的实际高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 有效的实际高度。这是通过 <codeph>height</codeph> 和 <codeph>measuredHeight</codeph> 属性计算得出的显示和合成高度。
		
		<p><codeph>actualHeight</codeph> 属性值根据以下表进行计算：</p>
		<adobetable class="innertable">
		
		
		
		
		<tgroup cols="2"><thead><row><entry>height 属性</entry><entry>actualHeight</entry></row></thead><tbody><row>
		  <entry>auto</entry>
		  <entry>measuredheight</entry>
		</row><row>
		  <entry>h 百分比</entry>
		  <entry>h measuredheight 的百分比</entry>
		</row><row>
		  <entry>h 数字</entry>
		  <entry>h</entry>
		</row></tbody></tgroup></adobetable>
		<p><b>注意</b>：如果内嵌图形为 DisplayObject，则会立即读取其宽度和高度。如果 <codeph>measuredWidth</codeph> 或 <codeph>measuredHeight</codeph> 为零，则任何导致被零除的自动计算会将结果设置为零。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualWidth:get"><apiName>actualWidth</apiName><shortdesc> 有效的实际宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 有效的实际宽度。这是通过 <codeph>width</codeph> 和 <codeph>measuredWidth</codeph> 属性计算得出的显示和合成宽度。
		
		<p><codeph>actualWidth</codeph> 属性值根据以下表进行计算：</p>
		<adobetable class="innertable">
		
		
		
		
		<tgroup cols="2"><thead><row><entry>width 属性</entry><entry>actualWidth</entry></row></thead><tbody><row>
		  <entry>auto</entry>
		  <entry>measuredWidth</entry>
		</row><row>
		  <entry>w 百分比</entry>
		  <entry>w measuredWidth 的百分比</entry>
		</row><row>
		  <entry>w 数字</entry>
		  <entry>w</entry>
		</row></tbody></tgroup></adobetable>
		
		<p><b>注意</b>：如果内嵌图形为 DisplayObject，则会立即读取其宽度和高度。如果 <codeph>measuredWidth</codeph> 或 <codeph>measuredHeight</codeph> 为零，则任何导致被零除的自动计算会将结果设置为零。</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc> 嵌入的图形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc> 嵌入的图形。 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:height:get"><apiName>height</apiName><shortdesc> 图像高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 图像高度。可以是“auto”、像素数或测量高度的百分比。 
		 
		 <p>合法值为 flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>合法值为 0 到 32000 范围内的数字。</p>
		 <p>合法值为 0 到 1000000 范围内的百分比数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果未定义或“继承”，则 InlineGraphicElement 将使用默认值“auto”。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc> 图形的自然高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 图形的自然高度。这是加载时的图形高度。
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc> 图形的自然宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 图形的自然宽度。这是加载时的图形宽度。
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:source:get"><apiName>source</apiName><shortdesc> 设置图形的源。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 设置图形的源。该值可以是解释为 URI 的字符串、解释为嵌入 DisplayObject 类的类、DisplayObject 实例或 URLRequest。创建一个 DisplayObject，如果 InlineGraphicElement 对象添加到 TextFlow 对象的 ParagraphElement 中，会导致图形内嵌显示在文本中。
		 
		 </apiDesc><example conref="examples\InlineGraphicElement_sourceExample.as"/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:status:get"><apiName>status</apiName><shortdesc> 图像的当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 图像的当前状态。每次更改状态时，所属的 TextFlow 都会发送一个 StatusChangeEvent。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>flashx.textLayout.events.StatusChangeEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:width:get"><apiName>width</apiName><shortdesc> 图形的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 图形的宽度。该值可以是“auto”、像素数或图像测量宽度的百分比。
		 
		 <p>合法值为 flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>合法值为 0 到 32000 范围内的数字。</p>
		 <p>合法值为 0 到 1000000 范围内的百分比数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果未定义或“继承”，则 InlineGraphicElement 将使用默认值“auto”。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> 
	 FlowGroupElement 类是 FlowElement 对象的基类，这些对象可以有一组子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 FlowGroupElement 类是 FlowElement 对象的基类，这些对象可以有一组子对象。这些类包括 TextFlow、ParagraphElement、DivElement 和 LinkElement。
	 
	 <p>您无法直接创建 FlowGroupElement 对象。调用 <codeph>new FlowGroupElement()</codeph> 时会引发一个错误异常。</p>
 	 
 	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowGroupElement:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChildAt"><apiName>addChildAt</apiName><shortdesc> 
		 在指定索引位置添加一个 FlowElement 子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index</codeph> 超出了范围。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>添加的 FlowElement 子对象 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>要添加子元素的位置的索引，第一个位置为 0。
		 </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>要添加的子元素。
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 在指定索引位置添加一个 FlowElement 子对象。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChild"><apiName>addChild</apiName><shortdesc> 
		 追加一个 FlowElement 子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>添加的 FlowElement 子对象 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>要追加的子元素。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 追加一个 FlowElement 子对象。新的子对象将添加到子对象列表末尾。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findChildIndexAtPosition"><apiName>findChildIndexAtPosition</apiName><shortdesc>
		 对于给定的相对文本位置，查找包含该相对位置的第一个 FlowElement 子对象的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含 <codeph>relativePosition</codeph> 的第一个子元素的索引
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	相对于该元素的位置
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 对于给定的相对文本位置，查找包含该相对位置的第一个 FlowElement 子对象的索引。由于存在零长度 FlowElement，多个子对象可以包含相对位置。
		  
		 <p>检查子对象，查找包含相对位置的 FlowElement。提供的相对位置相对于该 FlowElement。</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findChildIndexAtPositionExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findLeaf"><apiName>findLeaf</apiName><shortdesc>
		 对于给定的相对文本位置，查找包含该位置的叶元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含相对位置的叶元素。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>要查找的相对文本索引。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 对于给定的相对文本位置，查找包含该位置的叶元素。 
		 
		 <p>在流元素层次结构中向下查找，以找到包含指定位置的 FlowLeafElement。指定的位置相对于该 FlowElement 对象。</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildAt"><apiName>getChildAt</apiName><shortdesc> 
		 返回位于指定索引的 FlowElement 子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定位置的 FlowElement 子对象。
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>查找 FlowElement 对象的位置。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 返回位于指定索引的 FlowElement 子对象。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildIndex"><apiName>getChildIndex</apiName><shortdesc> 
		 在子对象中搜索指定的 FlowElement 对象，并返回其索引位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定的子对象的索引位置。如果未找到 <codeph>child</codeph>，则返回 -1。
		  
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>要在子对象中查找的 FlowElement 对象项。
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 在子对象中搜索指定的 FlowElement 对象，并返回其索引位置。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getFirstLeaf"><apiName>getFirstLeaf</apiName><shortdesc>
		 返回该组的第一个 FlowLeafElement 子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>第一个 FlowLeafElement 对象。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 返回该组的第一个 FlowLeafElement 子项。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getFirstLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getLastLeaf"><apiName>getLastLeaf</apiName><shortdesc>
		 返回该组的最后一个 FlowLeafElement 子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>最后一个 FlowLeafElement 对象。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 返回该组的最后一个 FlowLeafElement 子项。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getLastLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChildAt"><apiName>removeChildAt</apiName><shortdesc> 
		 删除位于指定索引位置的 FlowElement 子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index</codeph> 超出了范围。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>从指定位置删除的 FlowElement 子对象。
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>要删除子元素的位置。
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 删除位于指定索引位置的 FlowElement 子对象。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChild"><apiName>removeChild</apiName><shortdesc> 
		 从组中删除指定的 FlowElement 子对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>未找到 <codeph>child</codeph>。
		 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>删除的 FlowElement 子对象 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>要删除的子元素。
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 从组中删除指定的 FlowElement 子对象。
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:replaceChildren"><apiName>replaceChildren</apiName><shortdesc>
		 以指定的新元素替换组中的子元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>指定的 <codeph>beginChildIndex</codeph> 或 <codeph>endChildIndex</codeph> 超出了范围。
	     
	     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginChildIndex</apiItemName><apiType value="int"/><apiDesc>子项数组中替换范围的起始位置的索引值。
		 </apiDesc></apiParam><apiParam><apiItemName>endChildIndex</apiItemName><apiType value="int"/><apiDesc>子项数组中替换范围的结束位置之后的索引值。
		 </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>要替换指定范围元素的元素。可以是一个包含流元素或其数组或矢量的序列。
		  
	     </apiDesc></apiParam></apiOperationDef><apiDesc>
		 以指定的新元素替换组中的子元素。使用 <codeph>beginChildIndex</codeph> 和 <codeph>endChildIndex</codeph> 参数可以控制操作，如下所述：
		 <p><ul>
		 <li>要删除元素，请勿传递任何替换元素。</li>
		 <li>要插入元素，请为 <codeph>beginChildIndex</codeph> 和 <codeph>endChildIndex</codeph> 传递相同的值。新元素将会插入到指定索引之前。</li>
		 <li>要追加元素，请为 <codeph>beginChildIndex</codeph> 和 <codeph>endChildIndex</codeph> 传递 <codeph>numChildren</codeph>。</li>
		 </ul></p>
		 <p>否则，该方法将替换指定元素，从 <codeph>beginChildIndex</codeph> 的元素开始直到 <codeph>endChildIndex</codeph>（不含）为止。</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_replaceChildrenExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:splitAtIndex"><apiName>splitAtIndex</apiName><shortdesc> 
		 在 childIndex 参数指定的位置拆分该对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果 <codeph>childIndex</codeph> 大于子项的长度。
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>新 FlowGroupElement 对象。
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>childIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 在 <codeph>childIndex </codeph>参数指定的位置拆分该对象。如果该组元素有父项，则创建该对象的一个浅副本，并使用该索引之前的元素替换其子元素。将 <codeph>childIndex</codeph> 之后的元素移至副本中。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowGroupElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 为该对象追加一个子对象数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>如果数组元素不是 FlowElement 或 String
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 为该对象追加一个子对象数组。使用 <codeph>replaceChildren()</codeph> 方法在数组中追加每个元素。在 mxml 编译导入时使用。
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement/replaceChildren()"><linktext>FlowGroupElement.replaceChildren()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowGroupElement:numChildren:get"><apiName>numChildren</apiName><shortdesc> 
		返回该 FlowGroupElement 对象具有的 FlowElement 子对象的数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		返回该 FlowGroupElement 对象具有的 FlowElement 子对象的数目。
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>