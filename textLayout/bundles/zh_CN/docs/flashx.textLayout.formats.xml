<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.formats"><apiName>flashx.textLayout.formats</apiName><apiDetail/><apiClassifier id="flashx.textLayout.formats:ITabStopFormat"><apiName>ITabStopFormat</apiName><shortdesc>
	 该接口提供对制表位相关的属性的读取访问。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 该接口提供对制表位相关的属性的读取访问。
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 此制表位的制表位对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 此制表位的制表位对齐方式。 
		 <p>合法值为 flash.text.engine.TabAlignment.START、flash.text.engine.TabAlignment.CENTER、flash.text.engine.TabAlignment.END、flash.text.engine.TabAlignment.DECIMAL 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 START。</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 如果 alignment 为 DECIMAL，则为要使用的对齐标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 如果 alignment 为 DECIMAL，则为要使用的对齐标记。
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 null。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 制表位相对于行开始位置的位置，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 制表位相对于行开始位置的位置，以像素为单位。
		 <p>合法值为 0 到 10000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Direction"><apiName>Direction</apiName><shortdesc>
	  为设置 TextLayoutFormat 类的 direction 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为设置 <codeph>TextLayoutFormat</codeph> 类的 <codeph>direction</codeph> 属性定义值。在拉丁样式脚本中，使用从左到右的阅读顺序。对于阿拉伯语或希伯来语等文本，则采用从右至左的阅读顺序。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/direction"><linktext>TextLayoutFormat.direction</linktext></link></related-links><apiValue id="flashx.textLayout.formats:Direction:LTR"><apiName>LTR</apiName><shortdesc> 将文本指定为从左至右的书写方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc> 将文本指定为从左至右的书写方向。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Direction:RTL"><apiName>RTL</apiName><shortdesc> 将文本指定为从右至左的书写方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc> 将文本指定为从右至左的书写方向。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:VerticalAlign"><apiName>VerticalAlign</apiName><shortdesc>
	  为 TextLayoutFormat 类的 verticalAlign 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为 TextLayoutFormat 类的 <codeph>verticalAlign</codeph> 属性定义值。指定 TextFlow 元素如何与其容器对齐。  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/verticalAlign"><linktext>TextLayoutFormat.verticalAlign</linktext></link></related-links><apiValue id="flashx.textLayout.formats:VerticalAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc> 指定与框架底部边缘对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定与框架底部边缘对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> 指定在框架内进行垂直行两端对齐。 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定在框架内进行垂直行两端对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> 指定与框架中间对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定与框架中间对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:TOP"><apiName>TOP</apiName><shortdesc> 指定与框架顶部边缘对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定与框架顶部边缘对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextDecoration"><apiName>TextDecoration</apiName><shortdesc>
	  为 TextLayoutFormat 类的 textDecoration 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为 TextLayoutFormat 类的 <codeph>textDecoration</codeph> 属性定义值。这些值指定普通文本（无装饰）或带下划线。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textDecoration"><linktext>TextLayoutFormat.textDecoration</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextDecoration:NONE"><apiName>NONE</apiName><shortdesc> 指定普通文本 - 不应用装饰 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定普通文本 - 不应用装饰 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextDecoration:UNDERLINE"><apiName>UNDERLINE</apiName><shortdesc> 指定文本带下划线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>underline</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定文本带下划线。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:JustificationRule"><apiName>JustificationRule</apiName><shortdesc>
	  为设置 TextLayoutFormat 类的 justificationRule 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为设置 TextLayoutFormat 类的 <codeph>justificationRule</codeph> 属性定义值。默认值为 SPACE，通过向空格字符添加额外空格来实现两端对齐。当使用 EAST_ASIAN 时，使用日语样式行距，即自上而下，而非罗马文本中使用的自下而上。标点符号的间距也不相同。在罗马版本中，逗号和日语句号占据一整个字符宽度，而在东亚版本中只占据半个字符宽度。此外，顺序标点符号之间的间距更加紧凑，遵循传统的东亚版式约定。此外，请注意以下例子中应用于段落第二行中的行距。在东亚版本中，最后两行向左推进。在罗马版本中，第二行和之后的行向左推进。
	  <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:JustificationRule:EAST_ASIAN"><apiName>EAST_ASIAN</apiName><shortdesc> 指定东亚两端对齐规则。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>eastAsian</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定东亚两端对齐规则。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:JustificationRule:SPACE"><apiName>SPACE</apiName><shortdesc> 为拉丁文和使用空格分隔单词的其它水平文本指定两端对齐规则。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>space</apiData><apiType value="String"/></apiValueDef><apiDesc> 为拉丁文和使用空格分隔单词的其它水平文本指定两端对齐规则。对于除东亚文本以外的所有语言使用此值。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextJustify"><apiName>TextJustify</apiName><shortdesc>
	  为设置 TextLayoutFormat 类的 textJustify 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为设置 TextLayoutFormat 类的 <codeph>textJustify</codeph> 属性定义值。默认值为 INTER_WORD，表示两端对齐时向空格符添加额外空格。DISTRIBUTE 指定向空格符以及各个字母之间添加额外空格。只在将 <codeph>justificationRule</codeph> 设置为 SPACE 时才使用这些值。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textJustify"><linktext>TextLayoutFormat.textJustify</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextJustify:DISTRIBUTE"><apiName>DISTRIBUTE</apiName><shortdesc> 指定通过向空格字符以及各个字母之间添加空格实现两端对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>distribute</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定通过向空格字符以及各个字母之间添加空格实现两端对齐。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextJustify:INTER_WORD"><apiName>INTER_WORD</apiName><shortdesc> 指定通过向空格字符添加空格实现两端对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>interWord</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定通过向空格字符添加空格实现两端对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TLFTypographicCase"><apiName>TLFTypographicCase</apiName><shortdesc>
	  为 TextLayoutFormat 类的 typographicCase 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为 TextLayoutFormat 类的 <codeph>typographicCase </codeph>属性定义值。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/typographicCase"><linktext>TextLayoutFormat.typographicCase</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TLFTypographicCase:CAPS_TO_SMALL_CAPS"><apiName>CAPS_TO_SMALL_CAPS</apiName><shortdesc> 指定大写字符在输出时使用小型大写字母字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定大写字符在输出时使用小型大写字母字型。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 指定默认印刷大小写 - 没有应用特殊功能。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定默认印刷大小写 - 没有应用特殊功能。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE_TO_SMALL_CAPS"><apiName>LOWERCASE_TO_SMALL_CAPS</apiName><shortdesc> 将所有小写字符转换为大写形式，然后将小型大写字母仅应用于转换过程更改的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercaseToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> 将所有小写字符转换为大写形式，然后将小型大写字母仅应用于转换过程更改的字符。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 指定所有字符在输出时都使用小写字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定所有字符在输出时都使用小写字型。 
  	 	 
  	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 指定所有字符在输出时都使用大写字型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定所有字符在输出时都使用大写字型。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineShift"><apiName>BaselineShift</apiName><shortdesc>
	  定义常量，用于在 TextLayoutFormat 类的 baselineShift 属性中指定下标或上标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  定义常量，用于在 <codeph>TextLayoutFormat</codeph> 类的 <codeph>baselineShift</codeph> 属性中指定下标或上标。可以将基线偏移指定为绝对像素偏移、当前点大小的百分比，或者 SUPERSCRIPT 或 SUBSCRIPT 常量。如果是正值，则将水平文本行向上（对于垂直文本行是向右）移动；如果是负值，则将水平文本行向下（对于垂直文本行是向左）移动。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/baselineShift"><linktext>TextLayoutFormat.baselineShift</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineShift:SUBSCRIPT"><apiName>SUBSCRIPT</apiName><shortdesc> 将基线移动到当前下标位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subscript</apiData><apiType value="String"/></apiValueDef><apiDesc> 将基线移动到当前下标位置。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineShift:SUPERSCRIPT"><apiName>SUPERSCRIPT</apiName><shortdesc> 将基线偏移到当前上标位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>superscript</apiData><apiType value="String"/></apiValueDef><apiDesc> 将基线偏移到当前上标位置。
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
	 TabStopFormat 类表示段落中制表位的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 TabStopFormat 类表示段落中制表位的属性。可将 <codeph>TextLayoutFormat.tabstops</codeph> 属性设置为 TabStopFormat 对象的数组。
	 </apiDesc><example conref="examples\TabStopFormat_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TabElement"><linktext>flashx.textLayout.elements.TabElement</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.TextLayoutFormat.tabStops</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TabStopFormat:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
		 创建新 TabStopFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>从其复制初始值的可选实例。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建新 TabStopFormat 对象。所有设置都是空的，或通过提供的 <codeph>initialValues</codeph> 对象进行初始化（可选）。
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TabStopFormat:apply"><apiName>apply</apiName><shortdesc>
		 使用 incoming ITabStopFormat 实例中设置的属性值替换该 TabStopFormat 对象中的属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>其属性值应用于该 TabStopFormat 对象的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 使用 <codeph>incoming</codeph> ITabStopFormat 实例中设置的属性值替换该 TabStopFormat 对象中的属性值。<codeph>incoming</codeph> ITabStopFormat 实例中值为 <codeph>undefined</codeph> 的属性在该对象中不会改变。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 将 incoming ITabStopFormat 实例中的属性值与该 TabStopFormat 对象的值串联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>串联其值的实例。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 <codeph>incoming </codeph>ITabStopFormat 实例中的属性值与该 TabStopFormat 对象的值串联。在此（接收） TabStopFormat 对象中，值为 <codeph>FormatValue.INHERIT</codeph> 的属性和值为 <codeph>undefined</codeph> 的继承属性将从 <codeph>incoming</codeph> 对象获取新值。所有其他属性值将保持不变。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concat"><apiName>concat</apiName><shortdesc>
		 将 incoming ITabStopFormat 实例中的属性值与该 TabStopFormat 对象的值串联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>串联其值的实例。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 <codeph>incoming </codeph>ITabStopFormat 实例中的属性值与该 TabStopFormat 对象的值串联。在此（接收） TabStopFormat 对象中，值为 <codeph>FormatValue.INHERIT</codeph> 的属性和值为 <codeph>undefined</codeph> 的继承属性将从 <codeph>incoming</codeph> 对象获取新值。值为 <codeph>undefined</codeph> 的非继承属性将获取其默认值。所有其他属性值将保持不变。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:copy"><apiName>copy</apiName><shortdesc>
		 将 TabStopFormat 设置从 values ITabStopFormat 实例复制到该 TabStopFormat 对象中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>从其复制值的可选实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 TabStopFormat 设置从 <codeph>values</codeph> ITabStopFormat 实例复制到该 TabStopFormat 对象中。如果 <codeph>values</codeph> 为 <codeph>null</codeph>，则此 TabStopFormat 对象使用所有属性的未定义值初始化。
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 将 ITabStopFormat 实例 p1 中的属性与 ITabStopFormat 实例 p2 的属性相比较，如果所有属性匹配，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>如果所有属性匹配，则为 true，否则为 false。
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>与 <codeph>p2</codeph> 比较的实例。
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>与 <codeph>p1</codeph> 比较的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 ITabStopFormat 实例 <codeph>p1 </codeph>中的属性与 ITabStopFormat 实例 <codeph>p2 </codeph>的属性相比较，如果所有属性匹配，则返回 <codeph>true</codeph>。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 将该 TabStopFormat 对象中的属性设置为 undefined（如果这些属性与 incoming ITabStopFormat 实例中的属性不匹配）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>与该 TabStopFormat 对象的属性值进行比较的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将该 TabStopFormat 对象中的属性设置为<codeph> undefined</codeph>（如果这些属性与 <codeph>incoming </codeph>ITabStopFormat 实例中的属性不匹配）。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 将该 TabStopFormat 对象中的属性设置为 undefined（如果这些属性与 incoming ITabStopFormat 实例中的属性匹配）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>与该 TabStopFormat 对象的属性值进行比较的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将该 TabStopFormat 对象中的属性设置为 <codeph>undefined</codeph>（如果这些属性与 <codeph>incoming </codeph>ITabStopFormat 实例中的属性匹配）。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 此制表位的制表位对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 此制表位的制表位对齐方式。 
		 <p>合法值为 flash.text.engine.TabAlignment.START、flash.text.engine.TabAlignment.CENTER、flash.text.engine.TabAlignment.END、flash.text.engine.TabAlignment.DECIMAL 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 START。</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 如果 alignment 为 DECIMAL，则为要使用的对齐标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 如果 alignment 为 DECIMAL，则为要使用的对齐标记。
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 null。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 返回使用默认设置的 TabStopFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITabStopFormat</apiValueClassifier></apiValueDef><apiDesc>
		 返回使用默认设置的 TabStopFormat 对象。此函数始终返回相同的对象。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 制表位相对于行开始位置的位置，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 制表位相对于行开始位置的位置，以像素为单位。
		 <p>合法值为 0 到 10000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:FormatValue"><apiName>FormatValue</apiName><shortdesc>
	  为指定格式属性将继承其父项的值或自动生成值来定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为指定格式属性将继承其父项的值或自动生成值来定义值。<codeph>INHERIT</codeph> 常量指定属性从其父项继承值，而 <codeph>AUTO</codeph> 常量指定由内部算法自动确定属性值。例如，可以使用这些值设置 <codeph>TextLayoutFormat.columnWidth</codeph>。通常，属性的说明指示它是否接受这些常量。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>TextLayoutFormat</linktext></link></related-links><apiValue id="flashx.textLayout.formats:FormatValue:AUTO"><apiName>AUTO</apiName><shortdesc> 指定属性的值是自动生成的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定属性的值是自动生成的。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:INHERIT"><apiName>INHERIT</apiName><shortdesc> 指定属性将继承其父项的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inherit</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定属性将继承其父项的值。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextAlign"><apiName>TextAlign</apiName><shortdesc>
	  为设置 TextLayoutFormat 类的 textAlign 和 textAlignLast 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为设置 TextLayoutFormat 类的 <codeph>textAlign </codeph>和 <codeph>textAlignLast</codeph> 属性定义值。这些值描述了段落中的行与容器的对齐方式。
	 
	 </apiDesc><example conref="examples\TextAlignExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlign"><linktext>TextLayoutFormat.textAlign</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlignLast"><linktext>TextLayoutFormat.textAlignLast</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextAlign:CENTER"><apiName>CENTER</apiName><shortdesc> 指定与容器中心对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定与容器中心对齐。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:END"><apiName>END</apiName><shortdesc> 指定结束边缘对齐 - 文本与书写顺序的结束端对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定结束边缘对齐 - 文本与书写顺序的结束端对齐。等效于将从左至右的文本指定为右对齐，或将从右至左的文本指定为左对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> 指定文本在行内两端对齐，以便位于容器空间范围内。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定文本在行内两端对齐，以便位于容器空间范围内。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:LEFT"><apiName>LEFT</apiName><shortdesc> 指定左边缘对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定左边缘对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc> 指定右边缘对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定右边缘对齐。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:START"><apiName>START</apiName><shortdesc> 指定起始边缘对齐 - 文本与书写顺序的起始端对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定起始边缘对齐 - 文本与书写顺序的起始端对齐。等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
	 TextLayoutFormat 类包含所有文本布局属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 TextLayoutFormat 类包含所有文本布局属性。这些属性可在容器级别、段落级别和文本级别影响文本流的格式和样式。ContainerController 类和 FlowElement 基类都有 <codeph>format</codeph> 属性，允许您将一个 TextLayoutFormat 实例指定给这些类。将 TextLayoutFormat 对象指定给一个容器，以影响该容器全部内容的格式。将 TextLayoutFormat 对象指定给一个 FlowElement 后代，以便为该特定元素指定格式：TextFlow、ParagraphElement、DivElement、SpanElement、InlineGraphicElement、LinkElement 和 TCYElement。除了 <codeph>format</codeph> 属性之外，这些类还定义各个 TextLayoutFormat 属性，使您可以在需要时覆盖该元素的特定样式属性的设置。 <p>由于您可以在多个级别设置给定样式，因此可能会发生冲突。例如，TextFlow 级别的文本颜色可能设置为黑色，而 SpanElement 对象将其设置为蓝色。一般规则是对于文本流树最低级别的设置优先级最高。因此，如果为 TextFlow 实例及 DivElement 都设置了连字级别，则 DivElement 设置优先级高。 </p><p>层叠样式是指如果在较低级别未定义样式值，则采用文本流中更高级别样式的过程。如果在即将呈示的点处的元素上未定义样式，则该样式使用默认值或基于父元素上的值的值级联或后代。例如，如果文本透明度（<codeph>textAlpha</codeph> 属性）在 SpanElement 对象中未定义，但是在 TextFlow 上进行了定义，则 <codeph>TextFlow.textAlpha</codeph> 属性的值会层叠到 SpanElement 对象，并应用于该跨距的文本。层叠的结果，或应用于元素的样式之和，将存储在元素的 <codeph>computedFormat</codeph> 属性中。</p><p>以相同的方法，您可以使用 ContainerController 和 FlowElement 类的 <codeph>userStyles</codeph> 属性应用用户样式。使用该属性，您可以读写用户样式字典，并将其设置应用于一个容器或文本流元素。用户样式字典是由<i>样式名-值</i>对组成的对象。<codeph>userStyles</codeph> 属性指定的样式优先级高于其它所有样式。</p><p>未定义的大多数样式将在层叠时继承其直接父项的值。不过，少数样式不会继承父项的值，而是采用默认值来替代。</p><p><b>采用默认值（如果未定义）的样式属性包括：</b><codeph>backgroundAlpha</codeph>、<codeph>backgroundColor</codeph>、<codeph>columnCount</codeph>、<codeph>columnGap</codeph>、<codeph>columnWidth</codeph>、<codeph>lineBreak</codeph>、<codeph>paddingBottom</codeph>、<codeph>paddingLeft</codeph>、<codeph>paddingRight</codeph>、<codeph>paddingTop</codeph> 和 <codeph>verticalAlign</codeph></p>。
	 </apiDesc><example conref="examples\TextLayoutFormatExample.as"/><example conref="examples\TextLayoutFormatExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/format"><linktext>flashx.textLayout.elements.FlowElement.format</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>flashx.textLayout.factory.TextFlowTextLineFactory</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TextLayoutFormat:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
		 创建新 TextLayoutFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>从其复制初始值的可选实例。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建新 TextLayoutFormat 对象。所有设置都是空的，或通过提供的 <codeph>initialValues</codeph> 对象进行初始化（可选）。
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:apply"><apiName>apply</apiName><shortdesc>
		 使用 incoming ITextLayoutFormat 实例中设置的属性值替换该 TextLayoutFormat 对象中的属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>其属性值应用于该 TextLayoutFormat 对象的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 使用 <codeph>incoming</codeph> ITextLayoutFormat 实例中设置的属性值替换该 TextLayoutFormat 对象中的属性值。在 <codeph>incoming</codeph> ITextLayoutFormat 实例中为 <codeph>undefined</codeph> 的属性在该对象中不会改变。
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_applyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 将 incoming ITextLayoutFormat 实例中的属性值与该 TextLayoutFormat 对象的值串联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>串联其值的实例。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 <codeph>incoming</codeph> ITextLayoutFormat 实例中的属性值与该 TextLayoutFormat 对象的值串联。在此（接收）TextLayoutFormat 对象中，值为 <codeph>FormatValue.INHERIT</codeph> 的属性和值为 <codeph>undefined</codeph> 的继承属性将从 <codeph>incoming</codeph> 对象获取新值。所有其他属性值将保持不变。
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatInheritOnlyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concat"><apiName>concat</apiName><shortdesc>
		 将 incoming ITextLayoutFormat 实例中的属性值与该 TextLayoutFormat 对象的值串联。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>串联其值的实例。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 <codeph>incoming</codeph> ITextLayoutFormat 实例中的属性值与该 TextLayoutFormat 对象的值串联。在此（接收）TextLayoutFormat 对象中，值为 <codeph>FormatValue.INHERIT</codeph> 的属性和值为 <codeph>undefined</codeph> 的继承属性将从 <codeph>incoming</codeph> 对象获取新值。值为 <codeph>undefined</codeph> 的非继承属性将获取其默认值。所有其他属性值将保持不变。
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:copy"><apiName>copy</apiName><shortdesc>
		 将 TextLayoutFormat 设置从 values ITextLayoutFormat 实例复制到该 TextLayoutFormat 对象中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>从其复制值的可选实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 TextLayoutFormat 设置从 <codeph>values</codeph> ITextLayoutFormat 实例复制到该 TextLayoutFormat 对象中。如果 <codeph>values</codeph> 为 <codeph>null</codeph>，则此 TextLayoutFormat 对象使用所有属性的未定义值初始化。
		 </apiDesc><example conref="examples\TextLayoutFormat_copyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 将 ITextLayoutFormat 实例 p1 中的属性与 ITextLayoutFormat 实例 p2 的属性相比较，如果所有属性匹配，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>如果所有属性匹配，则为 true，否则为 false。
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>与 <codeph>p2</codeph> 比较的实例。
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>与 <codeph>p1</codeph> 比较的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将 ITextLayoutFormat 实例 <codeph>p1</codeph> 中的属性与 ITextLayoutFormat 实例<codeph> p2 </codeph>的属性相比较，如果所有属性匹配，则返回 <codeph>true</codeph>。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 将该 TextLayoutFormat 对象中的属性设置为 undefined（如果这些属性与 incoming ITextLayoutFormat 实例中的属性不匹配）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>与该 TextLayoutFormat 对象的属性值进行比较的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将该 TextLayoutFormat 对象中的属性设置为 <codeph>undefined</codeph>（如果这些属性与 <codeph>incoming</codeph> ITextLayoutFormat 实例中的属性不匹配）。
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeClashingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 将该 TextLayoutFormat 对象中的属性设置为 undefined（如果这些属性与 incoming ITextLayoutFormat 实例中的属性匹配）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>与该 TextLayoutFormat 对象的属性值进行比较的实例。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 将该 TextLayoutFormat 对象中的属性设置为<codeph> undefined</codeph>（如果这些属性与 <codeph>incoming</codeph> ITextLayoutFormat 实例中的属性匹配）。
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeMatchingExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 指定主导基线对齐到的基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定主导基线对齐到的基线。例如，如果将 <codeph>dominantBaseline</codeph> 设置为 ASCENT，则将 <codeph>alignmentBaseline</codeph> 设置为 DESCENT 会将文本的顶部与 DESCENT 基线对齐，或在该线下面。基线通常由行中最大的元素决定。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>合法值为 flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM、flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有任何祖代设置此属性，则它将具有值 USE_DOMINANT_BASELINE。</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 背景的 Alpha（透明度）值（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 背景的 Alpha（透明度）值（如果在层叠期间未定义，则使用默认值）。值为 0 表示完全透明，值为 1 表示完全不透明。Alpha 设置为 0 的显示对象是活动对象，即使它们不可见。
		 <p>合法值为 0 到 1 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 1。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 文本的背景颜色（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的背景颜色（如果在层叠期间未定义，则使用默认值）。可以是常量值 <codeph>BackgroundColor.TRANSPARENT</codeph>，或一个指定三个 8 位 RGB（红、绿、蓝）值的十六进制值，例如 0xFF0000 表示红色，0x00FF00 表示绿色。
		 <p>合法值为字符串 flashx.textLayout.formats.BackgroundColor.TRANSPARENT、flashx.textLayout.formats.FormatValue.INHERIT 和 0x0 到 0xffffffff 范围内的 uint。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TRANSPARENT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 从 dominantBaseline 值偏移基线的数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 基线距 <codeph>dominantBaseline</codeph> 值的偏移量。单位是像素或者 <codeph>fontSize</codeph> 的百分比（此时应输入字符串值，例如 140%）。如果是正值，则将水平文本行向上（对于垂直文本行是向右）移动；如果是负值，则将水平文本行向下（对于垂直文本行是向左）移动。 
		 <p>合法值为 flashx.textLayout.formats.BaselineShift.SUPERSCRIPT、flashx.textLayout.formats.BaselineShift.SUBSCRIPT 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>百分比合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0.0。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 指定线位置的垂直或水平行进。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定线位置的垂直或水平行进。将行按照从上至下（<codeph>BlockProgression.TB</codeph>，用于水平文本行）或从右至左（<codeph>BlockProgression.RL</codeph>，用于垂直文本行）的顺序放置。
		 <p>合法值为 flashx.textLayout.formats.BlockProgression.RL、flashx.textLayout.formats.BlockProgression.TB 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 TB。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 控制在将连续文本断开为多行时允许行断开的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 控制在将连续文本断开为多行时允许行断开的位置。设置为 <codeph>BreakOpportunity.AUTO</codeph> 以正常断开文本。设置为 <codeph>BreakOpportunity.NONE</codeph> 以不<i/>断开文本，除非文本会超出测量限度且不存在任何其它位置来断开行。设置为 <codeph>BreakOpportunity.ANY</codeph> 以允许该行在任意位置断开，而不是仅仅在单词之间断开。设置为 <codeph>BreakOpportunity.ALL</codeph> 以将每个排版群集放置在一个单独的行上（对于路径上的文本很有用）。
		 <p>合法值为 flash.text.engine.BreakOpportunity.ALL、flash.text.engine.BreakOpportunity.ANY、flash.text.engine.BreakOpportunity.AUTO、flash.text.engine.BreakOpportunity.NONE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 用于此文本的 CFF 提示的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的 CFF 提示的类型。CFF 提示决定了 Flash 运行时是否强制让粗水平线适合子像素网格。只有当 <codeph>renderingMode</codeph> 属性被设置为 <codeph>RenderingMode.CFF</codeph> 且嵌入了字体（<codeph>fontLookup</codeph> 属性被设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph>）时，才会应用此属性。对于小的屏幕尺寸，提示将生成让人易于阅读的清晰文本。
		 <p>合法值为 flash.text.engine.CFFHinting.NONE、flash.text.engine.CFFHinting.HORIZONTAL_STEM 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 HORIZONTAL_STEM。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 文本的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的颜色。一个十六进制数字，指定三个 8 位 RGB（红、绿、蓝）值，例如 0xFF0000 表示红色，0x00FF00 表示绿色。 
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 文本列数（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本列数（如果在层叠期间未定义，则使用默认值）。该列数会覆盖其它列设置。该值是一个整数，如果未指定，则为 <codeph>FormatValue.AUTO</codeph>。如果未指定 <codeph>columnCount</codeph>，则系统使用 <codeph>columnWidth</codeph> 创建容器可容纳的尽可能多的列。
		 <p>合法字符串值为 flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT 及从 1 到 50 范围内的整数。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 指定要在列之间留出的装订线空间量（以像素为单位），如果在层叠期间未定义，则使用默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定要在列之间留出的装订线空间量（以像素为单位），如果在层叠期间未定义，则使用默认值。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 20。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 列宽（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 列宽（以像素为单位）（如果在层叠期间未定义，则使用默认值）。如果指定了列宽而没有指定列数，则 TextLayout 将根据容器宽度和 <codeph>columnGap</codeph> 设置，尽可能多地创建具有该宽度的列。在最后一个列之后将留出任意空格。该值是一个数字。
		 <p>合法值为字符串 flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT，和 0 到 8000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 返回使用默认设置的 TextLayoutFormat 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc>
		 返回使用默认设置的 TextLayoutFormat 对象。此函数始终返回相同的对象。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 用于此文本的数字大小写类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的数字大小写类型。将该值设置为 <codeph>DigitCase.OLD_STYLE</codeph> 时接近支持不同上行字母和下行字母的小写字母形式。各位数字之间等比间隔。此样式只适用于所选的字体，最常用于 supplemental 或 expert 字体。<codeph>DigitCase.LINING</codeph> 设置具有 all-cap（全大写）高度，通常为等宽以便在图表中对齐。<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>合法值为 flash.text.engine.DigitCase.DEFAULT、flash.text.engine.DigitCase.LINING、flash.text.engine.DigitCase.OLD_STYLE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 用于此文本的数字宽度类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的数字宽度类型。可以是 <codeph>DigitWidth.PROPORTIONAL</codeph>，最适用于显示单独出现的数字，或者是 <codeph>DigitWidth.TABULAR</codeph>，最适用于显示表、图表和垂直行中的数字。<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>合法值为 flash.text.engine.DigitWidth.DEFAULT、flash.text.engine.DigitWidth.PROPORTIONAL、flash.text.engine.DigitWidth.TABULAR 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 指定文本在文本块中的默认双向嵌入级别。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定文本在文本块中的默认双向嵌入级别。从左到右的阅读顺序，如在拉丁风格的文本中，或者从右到左的阅读顺序，如阿拉伯语或希伯来语。此属性还影响在容器级别应用时列的方向。与文本一样，列可以为从左到右或从右到左排列。下面给出了一些示例：<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>合法值为 flashx.textLayout.formats.Direction.LTR、flashx.textLayout.formats.Direction.RTL 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 LTR。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 指定该元素的哪条基线紧贴到 alignmentBaseline 以确定元素在该行上的垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定该元素的哪条基线紧贴到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。值为 <codeph>TextBaseline.AUTO</codeph> 会基于父段落的 <codeph>locale</codeph> 属性选择主导基线。对于日语和中文，选定的基线值是 <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>；对于所有其它语言，选定的基线值是 <codeph>TextBaseline.ROMAN</codeph>。这些基线选项由选择的字体和字体大小决定。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>合法值为 flashx.textLayout.formats.FormatValue.AUTO、flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 指定容器中第一行的基线位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定容器中第一行的基线位置。该属性引用的基线取决于容器级别的区域设置。对于日语和中文，为 <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>；对于所有其它语言，为 <codeph>TextBaseline.ROMAN</codeph>。从容器顶部边界（如果 <codeph>blockProgression</codeph> 是 RL 则为右侧边界）到第一行的基线之间的偏移可以是 <codeph>BaselineOffset.ASCENT</codeph>，表示等于行的 ascent（文本顶端或右端到基线的距离），也可以是 <codeph>BaselineOffset.LINE_HEIGHT</codeph>，表示等于第一行的高度，或者是任何固定值数字，用于指定绝对距离。<codeph>BaselineOffset.AUTO</codeph> 可将行的 ascent 与容器顶部边界对齐。<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>合法值为字符串 flashx.textLayout.formats.BaselineOffset.AUTO、flashx.textLayout.formats.BaselineOffset.ASCENT、flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT、flashx.textLayout.formats.FormatValue.INHERIT 和 0 到 1000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  要使用的字体的名称或用逗号分隔的字体名称列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  要使用的字体的名称或用逗号分隔的字体名称列表。Flash 运行时使用列表中的第一个可用字体呈现该元素。例如，“Arial, Helvetica, _sans”使播放器搜索 Arial；如果没有找到 Arial，则搜索 Helvetica；如果两者都没找到，则搜索 _sans。
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 Arial。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 要使用的字体查找。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 要使用的字体查找。指定为 <codeph>FontLookup.DEVICE</codeph> 时会使用运行 SWF 文件的系统上安装的字体。设备字体会减小影片大小，但是在不同系统和平台中文本的呈现方式可能不同。指定为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 时会使用嵌入到已发布的 SWF 文件中的字体轮廓。嵌入的字体会增大 SWF 文件大小（有时程度很大），但是文本以所选的字体一致显示。
		 <p>合法值为 flash.text.engine.FontLookup.DEVICE、flash.text.engine.FontLookup.EMBEDDED_CFF 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEVICE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 文本的大小（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的大小（以像素为单位）。
		 <p>合法值为 1 到 720 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 12。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 文本的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的样式。可以为 <codeph>FontPosture.NORMAL</codeph>，用于纯文本，或者为 <codeph>FontPosture.ITALIC</codeph>，用于斜体。此属性只应用于设备字体（<codeph>fontLookup</codeph> 属性设置为 flash.text.engine.FontLookup.DEVICE 时）。
		 <p>合法值为 flash.text.engine.FontPosture.NORMAL、flash.text.engine.FontPosture.ITALIC 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NORMAL。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 文本的粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的粗细。可以为 <codeph>FontWeight.NORMAL</codeph>，用于纯文本，或者为 <codeph>FontWeight.BOLD</codeph>。只应用于设备字体（<codeph>fontLookup</codeph> 属性设置为 flash.text.engine.FontLookup.DEVICE 时）。
		 <p>合法值为 flash.text.engine.FontWeight.NORMAL、flash.text.engine.FontWeight.BOLD 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NORMAL。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 用于将段落文本两端对齐的规则。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于将段落文本两端对齐的规则。默认值为 <codeph>FormatValue.AUTO</codeph>，它基于段落的 <codeph>locale</codeph> 属性将文本两端对齐。对于除了日语和中文之外的所有语言，<codeph>FormatValue.AUTO</codeph> 会变成 <codeph>JustificationRule.SPACE</codeph>，后者会向空格字符添加额外的空格。对于日语和中文，<codeph>FormatValue.AUTO</codeph> 会变成 <codeph>JustficationRule.EAST_ASIAN</codeph>。在某种程度上，两端对齐会改变标点的间距。在罗马文本中，逗号和日语句号占一个全字符的宽度，但在东亚文本中，仅占一个字符宽度的一半。另外，在东亚文本中，连续的标点符号之间的间距会变得更紧密，遵守传统东亚排版惯例。同样要注意的是，在下面的示例中，应用到段落的第二行的行距。在东亚版本中，最后两行向左推进。在罗马版本中，第二行和之后的行向左推进。<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.JustificationRule.EAST_ASIAN、flashx.textLayout.formats.JustificationRule.SPACE、flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 段落两端对齐所用的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 段落两端对齐所用的样式。仅与 <codeph>JustificationRule.EAST_ASIAN</codeph> 的 <codeph>justificationRule</codeph> 设置一起使用。对于所有区域设置，<codeph>FormatValue.AUTO</codeph> 的默认值被解析为 <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>。JustificationStyle 类定义的常量指定用于处理避头尾 (kinsoku) 字符的选项；避头尾字符是指不能出现在一行首尾的日语字符。如果希望文本布局更宽松，请指定 <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>。如果希望文本布局类似于使用<codeph> JustificationRule.SPACE</codeph> 的 <codeph>justificationRule</codeph> 得到的结果，可使用 <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>。
		 <p>合法值为 flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT、flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU、flash.text.engine.JustificationStyle.PUSH_OUT_ONLY、flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 字距调整用于调整某些字符对之间的像素以提高可读性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 字距调整用于调整某些字符对之间的像素以提高可读性。字距调整表的所有字体都支持字距调整。
		 <p>合法值为 flash.text.engine.Kerning.ON、flash.text.engine.Kerning.OFF、flash.text.engine.Kerning.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 指定行距模型，它是行距基础和行距方向的组合。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定行距模型，它是行距基础和行距方向的组合。行距基础是 <codeph>lineHeight</codeph> 属性引用的基线。行距方向决定了 <codeph>lineHeight</codeph> 属性是引用一行基线与前一行基线之间的距离，还是与后一行基线之间的距离。默认值 <codeph>FormatValue.AUTO</codeph> 根据段落的 <codeph>locale</codeph> 属性进行解析。对于日语和中文，为 <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>，对于所有其它语言，为 <codeph>LeadingModel.ROMAN_UP</codeph>。<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.LeadingModel.ROMAN_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN、flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD、flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP、flashx.textLayout.formats.LeadingModel.AUTO、flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 控制可以在该文本中使用字体中定义的哪些连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 控制可以在该文本中使用字体中定义的哪些连字。对于每个设置显示的连字取决于字体。由两个或两个以上的字母结合在一起形成单个字型时就是连字。连字通常用于替换一些共享公共部分的连续字符，例如字母对“fi”、“fl”或“ae”。在拉丁语字符集和非拉丁语字符集中均可使用连字。LigatureLevel 类的值（<codeph>MINIMUM</codeph>、<codeph>COMMON</codeph>、<codeph>UNCOMMON</codeph> 和 <codeph>EXOTIC</codeph>）支持的连字是添加的。每个值支持一个新连字集，而且包含先前类型的那些连字。<p><b>注意：</b>使用阿拉伯语或叙利亚语字体时，必须将 <codeph>ligatureLevel</codeph> 设置为 MINIMUM 或更高。</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>合法值为 flash.text.engine.LigatureLevel.MINIMUM、flash.text.engine.LigatureLevel.COMMON、flash.text.engine.LigatureLevel.UNCOMMON、flash.text.engine.LigatureLevel.EXOTIC 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 COMMON。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 控制容器内的换行（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 控制容器内的换行（如果在层叠期间未定义，则使用默认值）。可以将容器中的文本设置为适合容器的宽度 (<codeph>LineBreak.TO_FIT</codeph>)，也可以设置为只在显式回车或换行符处断开 (<codeph>LineBreak.EXPLICIT</codeph>)。
		 <p>合法值为 flashx.textLayout.formats.LineBreak.EXPLICIT、flashx.textLayout.formats.LineBreak.TO_FIT 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TO_FIT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 文本的行距控制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的行距控制。上一行或下一行（取决于 <codeph>LeadingModel</codeph>）的基线与当前行的基线之间的距离，等于应用于该行中任意字符的最大行距。该值可以是数字或百分比。如果指定百分比，请输入字符串值，例如 140%。<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>合法值为 -720 到 720 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 120%。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 若为 true，则应用删除线（一条穿过文本中间的直线）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 如果为 <codeph>true</codeph>，则应用删除线（贯穿文本中间绘制的线）。
		 <p>合法值为 true、false 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 false。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 文本的区域设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，en、en_US 和 en-US 均表示英语，ja 表示日语。 
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 en。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 底部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 底部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器底部边缘与文本之间的空间。该值是一个数字。 <p> 对于水平文本，在含有多个列的可滚动容器中，第一列和后续列将填充部分显示为容器底部的空白，但是对于最后一列，如果文本没有完全填充，可能必须进行滚动才能看到填充。</p>
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 左边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 左边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器左边缘与文本之间的空间。该值是一个数字。<p> 对于垂直文本，在含有多个列的可滚动容器中，第一列和后续列将填充部分显示为容器末尾的空白，但是对于最后一列，如果文本没有完全填充，可能必须进行滚动才能看到填充。</p>
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 右边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 右边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器右边缘与文本之间的空间。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 顶部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 顶部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器顶部边缘与文本之间的空间。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 一个数字，指定段落结束边缘的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定段落结束边缘的缩进量（像素数）。是指从左到右文本中的右边缘和从右到左文本中的左边缘。 
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 一个数字，指定在段落后留出的空白（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定在段落后留出的空白（像素数）。与 <codeph>paragraphSpaceBefore</codeph> 一起使用时会合并。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 一个数字，指定在段落前留出的空白（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定在段落前留出的空白（像素数）。与 <codeph>paragraphSpaceAfter</codeph> 一起使用时会合并。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 一个数字，指定段落开始边缘的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定段落开始边缘的缩进量（像素数）。是指从左至右文本的左边和从右至左文本的右边。 
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 用于此文本的呈现模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的呈现模式。只应用于嵌入字体（<codeph>fontLookup</codeph> 属性设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 时）。
		 <p>合法值为 flash.text.engine.RenderingMode.NORMAL、flash.text.engine.RenderingMode.CFF 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 CFF。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 指定与段落关联的制表位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定与段落关联的制表位。Setter 可采用 flashx.textLayout.formats.TabStopFormat 数组、精简的字符串表示形式、undefined 或 <codeph>FormatValue.INHERIT</codeph>。精简的字符串形式始终转换为 flashx.textLayout.formats.TabStopFormat 的一个数组。 <p>基于字符串的格式是一个制表位列表，其中各个制表位由一个或多个空格分隔。</p><p>制表位的形式为：&lt;对齐类型>&lt;对齐位置>|&lt;对齐标记>。</p><p>对齐类型由一个字符表示，可以是 S、E、C 或 D（或相应小写字母）。S 或 s 表示起始，E 或 e 表示末尾，C 或 c 表示中心，D 或 d 表示小数。对齐类型是可选的，如果未指定，将默认为 S。</p><p>对齐位置是一个数字，根据数字的 FXG 规范（小数或科学表示法）指定。对齐位置是必需的。</p><p>垂直竖线用于分隔对齐位置和对齐标记，只有当存在对齐标记时才应存在。</p><p> 如果对齐类型为 D，则对齐标记是可选的，如果是其它对齐类型，则对齐标记不应存在。对齐标记可以是由制表位末尾空白所终止的任何字符序列（对于最后一个制表位，末尾空白可选，默认为对齐标记的末尾）。如果空格由反斜杠进行转义 (\ )，则可以是对齐标记本身的一部分。如果反斜杠由另一个反斜杠进行转义 (\\)，则可以是对齐标记本身的一部分。如果对齐类型为 D，且未指定对齐标记，则会使用默认值 null。</p><p>如果未指定制表位，则制表符操作默认为到达行的末尾。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 null。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 两端对齐文本中段落最后一行（或唯一的一行）与容器的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 两端对齐文本中段落最后一行（或唯一的一行）与容器的对齐方式。如果 <codeph>textAlign</codeph> 设置为 <codeph>TextAlign.JUSTIFY</codeph>，则 <codeph>textAlignLast</codeph> 指定最后一行（如果是只含一行的块则为唯一一行）的对齐方式。其值类似于 <codeph>textAlign</codeph>。
		 <p>合法值为 flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 START。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 段落中的行与容器的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 段落中的行与容器的对齐方式。<codeph>TextAlign.LEFT</codeph> 将文本行与容器左边缘对齐。<codeph>TextAlign.RIGHT</codeph> 与右边缘对齐。<codeph>TextAlign.CENTER</codeph> 等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。<codeph>TextAlign.JUSTIFY</codeph> 会展开行，使其充满整个空间。<codeph>TextAlign.START</codeph> 等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。<codeph>TextAlign.END</codeph> 等效于将从左至右的文本设置为右对齐，或将从右至左的文本设置为左对齐。
		 <p>合法值为 flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 START。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 文本的 Alpha（透明度）值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的 Alpha（透明度）值。值为 0 表示完全透明，值为 1 表示完全不透明。<codeph>textAlpha</codeph> 设置为 0 的显示对象是活动对象，即使它们不可见。
		 <p>合法值为 0 到 1 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 1。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 文本上的装饰。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本上的装饰。用于应用下划线，默认值为 none。
		 <p>合法值为 flashx.textLayout.formats.TextDecoration.NONE、flashx.textLayout.formats.TextDecoration.UNDERLINE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NONE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 一个数字，指定段落第一行的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定段落第一行的缩进量（像素数）。如果为负值，则会将行向边缘中推进，可能会推到容器之外。
		 <p>合法值为 -1000 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 指定文本两端对齐的选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定文本两端对齐的选项。默认值为 <codeph>TextJustify.INTER_WORD</codeph>，表示向空格符添加额外空格。<codeph>TextJustify.DISTRIBUTE</codeph> 会向空格符和各字母之间添加额外空格。仅与 <codeph>JustificationRule.SPACE</codeph> 的 <codeph>justificationRule</codeph> 值一起使用。
		 <p>合法值为 flashx.textLayout.formats.TextJustify.INTER_WORD、flashx.textLayout.formats.TextJustify.DISTRIBUTE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 INTER_WORD。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 确定要旋转此文本的度数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 确定要旋转此文本的度数。
		 <p>合法值为 flash.text.engine.TextRotation.ROTATE_0、flash.text.engine.TextRotation.ROTATE_180、flash.text.engine.TextRotation.ROTATE_270、flash.text.engine.TextRotation.ROTATE_90、flash.text.engine.TextRotation.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 像素数（或 fontSize 的百分比，如 120%），指示应用于每个字符左侧的间隙数（手动字距调整）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 数字（以像素为单位）（或 <codeph>fontSize</codeph> 的百分比，如 120%）表示要应用到每个字符左边的间距的量（手动字距调整）。如果启用字距调整，则会将 <codeph>trackingLeft</codeph> 值与字体字距调整表中的值相加。如果禁用字距调整，则使用 <codeph>trackingLeft</codeph> 值作为手动字距调整值。同时支持正值和负值。 
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 数字（以像素为单位）（或 fontSize 的百分比，如 120%）表示要应用到每个字符右边的间距的量（手动字距调整）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 数字（以像素为单位）（或 <codeph>fontSize</codeph> 的百分比，如 120%）表示要应用到每个字符右边的间距的量（手动字距调整）。如果启用字距调整，则会将 <codeph>trackingRight</codeph> 值与字体字距调整表中的值相加。如果禁用字距调整，则使用 <codeph>trackingRight</codeph> 值作为手动字距调整值。同时支持正值和负值。 
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 用于此文本的印刷大小写的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的印刷大小写的类型。下面给出了一些示例：<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.TLFTypographicCase.DEFAULT、flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS、flashx.textLayout.formats.TLFTypographicCase.UPPERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 垂直对齐或两端对齐（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 垂直对齐或两端对齐（如果在层叠期间未定义，则使用默认值）。确定 TextFlow 元素在容器内如何对齐。
		 <p>合法值为 flashx.textLayout.formats.VerticalAlign.TOP、flashx.textLayout.formats.VerticalAlign.MIDDLE、flashx.textLayout.formats.VerticalAlign.BOTTOM、flashx.textLayout.formats.VerticalAlign.JUSTIFY 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TOP。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 将文本导入到 TextFlow 中时压缩或保留空白。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 将文本导入到 TextFlow 中时压缩或保留空白。<codeph>WhiteSpaceCollapse.PRESERVE</codeph> 会保留所有空白字符。如果为 <codeph>WhiteSpaceCollapse.COLLAPSE</codeph>，则会删除导入的文本块中的新行、制表符以及前导或结尾空格。换行标记 () 和 Unicode 行分隔符将会保留。
		 <p>合法值为 flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE、flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 COLLAPSE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BackgroundColor"><apiName>BackgroundColor</apiName><shortdesc>
	  定义一个常量，用于指定 TextLayoutFormat 类的 backgroundColor 属性值为“transparent”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  定义一个常量，用于指定 <codeph>TextLayoutFormat</codeph> 类的 <codeph>backgroundColor</codeph> 属性的值为“transparent”。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/backgroundColor"><linktext>TextLayoutFormat.backgroundColor</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BackgroundColor:TRANSPARENT"><apiName>TRANSPARENT</apiName><shortdesc> Transparent - 不应用任何背景色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>transparent</apiData><apiType value="String"/></apiValueDef><apiDesc> Transparent - 不应用任何背景色。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LineBreak"><apiName>LineBreak</apiName><shortdesc> 为设置 TextLayoutFormat 的 lineBreak 属性定义值，以指定在连续文本内如何换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 为设置 <codeph>TextLayoutFormat</codeph> 的 <codeph>lineBreak</codeph> 属性定义值，以指定在连续文本内如何换行。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/linebreak"><linktext>TextLayoutFormat.linebreak</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LineBreak:EXPLICIT"><apiName>EXPLICIT</apiName><shortdesc> 指定仅在显式回车或换行符处进行换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>explicit</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定仅在显式回车或换行符处进行换行。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LineBreak:TO_FIT"><apiName>TO_FIT</apiName><shortdesc> 指定换行以适合容器宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toFit</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定换行以适合容器宽度。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BlockProgression"><apiName>BlockProgression</apiName><shortdesc>
	  为 TextLayoutFormat 类的 blockProgression 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为 <codeph>TextLayoutFormat</codeph> 类的 <codeph>blockProgression</codeph> 属性定义值。BlockProgression 指定行在容器内的放置方向。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/blockProgression"><linktext>TextLayoutFormat.blockProgression</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BlockProgression:RL"><apiName>RL</apiName><shortdesc> 
		  指定从右至左的块行进方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rl</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  指定从右至左的块行进方向。行将垂直排列，从容器的右边缘开始，向左行进。适用于垂直文本，例如垂直中文或日语文本。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BlockProgression:TB"><apiName>TB</apiName><shortdesc> 
		  指定从上自下的块行进方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tb</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  指定从上自下的块行进方向。行将水平排列，从容器顶部开始，向底部行进。适用于水平文本。 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat"><apiName>ITextLayoutFormat</apiName><shortdesc>
	 该接口提供对 FlowElement 相关的属性的读取访问。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 该接口提供对 FlowElement 相关的属性的读取访问。
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 指定主导基线对齐到的基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定主导基线对齐到的基线。例如，如果将 <codeph>dominantBaseline</codeph> 设置为 ASCENT，则将 <codeph>alignmentBaseline</codeph> 设置为 DESCENT 会将文本的顶部与 DESCENT 基线对齐，或在该线下面。基线通常由行中最大的元素决定。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>合法值为 flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM、flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有任何祖代设置此属性，则它将具有值 USE_DOMINANT_BASELINE。</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 背景的 Alpha（透明度）值（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 背景的 Alpha（透明度）值（如果在层叠期间未定义，则使用默认值）。值为 0 表示完全透明，值为 1 表示完全不透明。Alpha 设置为 0 的显示对象是活动对象，即使它们不可见。
		 <p>合法值为 0 到 1 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 1。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 文本的背景颜色（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的背景颜色（如果在层叠期间未定义，则使用默认值）。可以是常量值 <codeph>BackgroundColor.TRANSPARENT</codeph>，或一个指定三个 8 位 RGB（红、绿、蓝）值的十六进制值，例如 0xFF0000 表示红色，0x00FF00 表示绿色。
		 <p>合法值为字符串 flashx.textLayout.formats.BackgroundColor.TRANSPARENT、flashx.textLayout.formats.FormatValue.INHERIT 和 0x0 到 0xffffffff 范围内的 uint。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TRANSPARENT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 从 dominantBaseline 值偏移基线的数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 基线距 <codeph>dominantBaseline</codeph> 值的偏移量。单位是像素或者 <codeph>fontSize</codeph> 的百分比（此时应输入字符串值，例如 140%）。如果是正值，则将水平文本行向上（对于垂直文本行是向右）移动；如果是负值，则将水平文本行向下（对于垂直文本行是向左）移动。 
		 <p>合法值为 flashx.textLayout.formats.BaselineShift.SUPERSCRIPT、flashx.textLayout.formats.BaselineShift.SUBSCRIPT 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>百分比合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0.0。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 指定线位置的垂直或水平行进。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定线位置的垂直或水平行进。将行按照从上至下（<codeph>BlockProgression.TB</codeph>，用于水平文本行）或从右至左（<codeph>BlockProgression.RL</codeph>，用于垂直文本行）的顺序放置。
		 <p>合法值为 flashx.textLayout.formats.BlockProgression.RL、flashx.textLayout.formats.BlockProgression.TB 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 TB。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 控制在将连续文本断开为多行时允许行断开的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 控制在将连续文本断开为多行时允许行断开的位置。设置为 <codeph>BreakOpportunity.AUTO</codeph> 以正常断开文本。设置为 <codeph>BreakOpportunity.NONE</codeph> 以不<i/>断开文本，除非文本会超出测量限度且不存在任何其它位置来断开行。设置为 <codeph>BreakOpportunity.ANY</codeph> 以允许该行在任意位置断开，而不是仅仅在单词之间断开。设置为 <codeph>BreakOpportunity.ALL</codeph> 以将每个排版群集放置在一个单独的行上（对于路径上的文本很有用）。
		 <p>合法值为 flash.text.engine.BreakOpportunity.ALL、flash.text.engine.BreakOpportunity.ANY、flash.text.engine.BreakOpportunity.AUTO、flash.text.engine.BreakOpportunity.NONE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 用于此文本的 CFF 提示的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的 CFF 提示的类型。CFF 提示决定了 Flash 运行时是否强制让粗水平线适合子像素网格。只有当 <codeph>renderingMode</codeph> 属性被设置为 <codeph>RenderingMode.CFF</codeph> 且嵌入了字体（<codeph>fontLookup</codeph> 属性被设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph>）时，才会应用此属性。对于小的屏幕尺寸，提示将生成让人易于阅读的清晰文本。
		 <p>合法值为 flash.text.engine.CFFHinting.NONE、flash.text.engine.CFFHinting.HORIZONTAL_STEM 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 HORIZONTAL_STEM。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 文本的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的颜色。一个十六进制数字，指定三个 8 位 RGB（红、绿、蓝）值，例如 0xFF0000 表示红色，0x00FF00 表示绿色。 
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 文本列数（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本列数（如果在层叠期间未定义，则使用默认值）。该列数会覆盖其它列设置。该值是一个整数，如果未指定，则为 <codeph>FormatValue.AUTO</codeph>。如果未指定 <codeph>columnCount</codeph>，则系统使用 <codeph>columnWidth</codeph> 创建容器可容纳的尽可能多的列。
		 <p>合法字符串值为 flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT 及从 1 到 50 范围内的整数。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 指定要在列之间留出的装订线空间量（以像素为单位），如果在层叠期间未定义，则使用默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定要在列之间留出的装订线空间量（以像素为单位），如果在层叠期间未定义，则使用默认值。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 20。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 列宽（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 列宽（以像素为单位）（如果在层叠期间未定义，则使用默认值）。如果指定了列宽而没有指定列数，则 TextLayout 将根据容器宽度和 <codeph>columnGap</codeph> 设置，尽可能多地创建具有该宽度的列。在最后一个列之后将留出任意空格。该值是一个数字。
		 <p>合法值为字符串 flashx.textLayout.formats.FormatValue.AUTO、flashx.textLayout.formats.FormatValue.INHERIT，和 0 到 8000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 用于此文本的数字大小写类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的数字大小写类型。将该值设置为 <codeph>DigitCase.OLD_STYLE</codeph> 时接近支持不同上行字母和下行字母的小写字母形式。各位数字之间等比间隔。此样式只适用于所选的字体，最常用于 supplemental 或 expert 字体。<codeph>DigitCase.LINING</codeph> 设置具有 all-cap（全大写）高度，通常为等宽以便在图表中对齐。<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>合法值为 flash.text.engine.DigitCase.DEFAULT、flash.text.engine.DigitCase.LINING、flash.text.engine.DigitCase.OLD_STYLE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 用于此文本的数字宽度类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的数字宽度类型。可以是 <codeph>DigitWidth.PROPORTIONAL</codeph>，最适用于显示单独出现的数字，或者是 <codeph>DigitWidth.TABULAR</codeph>，最适用于显示表、图表和垂直行中的数字。<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>合法值为 flash.text.engine.DigitWidth.DEFAULT、flash.text.engine.DigitWidth.PROPORTIONAL、flash.text.engine.DigitWidth.TABULAR 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 指定文本在文本块中的默认双向嵌入级别。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定文本在文本块中的默认双向嵌入级别。从左到右的阅读顺序，如在拉丁风格的文本中，或者从右到左的阅读顺序，如阿拉伯语或希伯来语。此属性还影响在容器级别应用时列的方向。与文本一样，列可以为从左到右或从右到左排列。下面给出了一些示例：<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>合法值为 flashx.textLayout.formats.Direction.LTR、flashx.textLayout.formats.Direction.RTL 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 LTR。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 指定该元素的哪条基线紧贴到 alignmentBaseline 以确定元素在该行上的垂直位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定该元素的哪条基线紧贴到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。值为 <codeph>TextBaseline.AUTO</codeph> 会基于父段落的 <codeph>locale</codeph> 属性选择主导基线。对于日语和中文，选定的基线值是 <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>；对于所有其它语言，选定的基线值是 <codeph>TextBaseline.ROMAN</codeph>。这些基线选项由选择的字体和字体大小决定。<p><adobeimage alt="baselines" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>合法值为 flashx.textLayout.formats.FormatValue.AUTO、flash.text.engine.TextBaseline.ROMAN、flash.text.engine.TextBaseline.ASCENT、flash.text.engine.TextBaseline.DESCENT、flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP、flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER、flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 指定容器中第一行的基线位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定容器中第一行的基线位置。该属性引用的基线取决于容器级别的区域设置。对于日语和中文，为 <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>；对于所有其它语言，为 <codeph>TextBaseline.ROMAN</codeph>。从容器顶部边界（如果 <codeph>blockProgression</codeph> 是 RL 则为右侧边界）到第一行的基线之间的偏移可以是 <codeph>BaselineOffset.ASCENT</codeph>，表示等于行的 ascent（文本顶端或右端到基线的距离），也可以是 <codeph>BaselineOffset.LINE_HEIGHT</codeph>，表示等于第一行的高度，或者是任何固定值数字，用于指定绝对距离。<codeph>BaselineOffset.AUTO</codeph> 可将行的 ascent 与容器顶部边界对齐。<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>合法值为字符串 flashx.textLayout.formats.BaselineOffset.AUTO、flashx.textLayout.formats.BaselineOffset.ASCENT、flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT、flashx.textLayout.formats.FormatValue.INHERIT 和 0 到 1000 范围内的数字。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  要使用的字体的名称或用逗号分隔的字体名称列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  要使用的字体的名称或用逗号分隔的字体名称列表。Flash 运行时使用列表中的第一个可用字体呈现该元素。例如，“Arial, Helvetica, _sans”使播放器搜索 Arial；如果没有找到 Arial，则搜索 Helvetica；如果两者都没找到，则搜索 _sans。
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 Arial。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 要使用的字体查找。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 要使用的字体查找。指定为 <codeph>FontLookup.DEVICE</codeph> 时会使用运行 SWF 文件的系统上安装的字体。设备字体会减小影片大小，但是在不同系统和平台中文本的呈现方式可能不同。指定为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 时会使用嵌入到已发布的 SWF 文件中的字体轮廓。嵌入的字体会增大 SWF 文件大小（有时程度很大），但是文本以所选的字体一致显示。
		 <p>合法值为 flash.text.engine.FontLookup.DEVICE、flash.text.engine.FontLookup.EMBEDDED_CFF 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEVICE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 文本的大小（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的大小（以像素为单位）。
		 <p>合法值为 1 到 720 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 12。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 文本的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的样式。可以为 <codeph>FontPosture.NORMAL</codeph>，用于纯文本，或者为 <codeph>FontPosture.ITALIC</codeph>，用于斜体。此属性只应用于设备字体（<codeph>fontLookup</codeph> 属性设置为 flash.text.engine.FontLookup.DEVICE 时）。
		 <p>合法值为 flash.text.engine.FontPosture.NORMAL、flash.text.engine.FontPosture.ITALIC 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NORMAL。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 文本的粗细。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的粗细。可以为 <codeph>FontWeight.NORMAL</codeph>，用于纯文本，或者为 <codeph>FontWeight.BOLD</codeph>。只应用于设备字体（<codeph>fontLookup</codeph> 属性设置为 flash.text.engine.FontLookup.DEVICE 时）。
		 <p>合法值为 flash.text.engine.FontWeight.NORMAL、flash.text.engine.FontWeight.BOLD 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NORMAL。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 用于将段落文本两端对齐的规则。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于将段落文本两端对齐的规则。默认值为 <codeph>FormatValue.AUTO</codeph>，它基于段落的 <codeph>locale</codeph> 属性将文本两端对齐。对于除了日语和中文之外的所有语言，<codeph>FormatValue.AUTO</codeph> 会变成 <codeph>JustificationRule.SPACE</codeph>，后者会向空格字符添加额外的空格。对于日语和中文，<codeph>FormatValue.AUTO</codeph> 会变成 <codeph>JustficationRule.EAST_ASIAN</codeph>。在某种程度上，两端对齐会改变标点的间距。在罗马文本中，逗号和日语句号占一个全字符的宽度，但在东亚文本中，仅占一个字符宽度的一半。另外，在东亚文本中，连续的标点符号之间的间距会变得更紧密，遵守传统东亚排版惯例。同样要注意的是，在下面的示例中，应用到段落的第二行的行距。在东亚版本中，最后两行向左推进。在罗马版本中，第二行和之后的行向左推进。<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.JustificationRule.EAST_ASIAN、flashx.textLayout.formats.JustificationRule.SPACE、flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 段落两端对齐所用的样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 段落两端对齐所用的样式。仅与 <codeph>JustificationRule.EAST_ASIAN</codeph> 的 <codeph>justificationRule</codeph> 设置一起使用。对于所有区域设置，<codeph>FormatValue.AUTO</codeph> 的默认值被解析为 <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>。JustificationStyle 类定义的常量指定用于处理避头尾 (kinsoku) 字符的选项；避头尾字符是指不能出现在一行首尾的日语字符。如果希望文本布局更宽松，请指定 <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>。如果希望文本布局类似于使用<codeph> JustificationRule.SPACE</codeph> 的 <codeph>justificationRule</codeph> 得到的结果，可使用 <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>。
		 <p>合法值为 flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT、flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU、flash.text.engine.JustificationStyle.PUSH_OUT_ONLY、flashx.textLayout.formats.FormatValue.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 flashx.textLayout.formats.FormatValue.AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 字距调整用于调整某些字符对之间的像素以提高可读性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 字距调整用于调整某些字符对之间的像素以提高可读性。字距调整表的所有字体都支持字距调整。
		 <p>合法值为 flash.text.engine.Kerning.ON、flash.text.engine.Kerning.OFF、flash.text.engine.Kerning.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 指定行距模型，它是行距基础和行距方向的组合。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定行距模型，它是行距基础和行距方向的组合。行距基础是 <codeph>lineHeight</codeph> 属性引用的基线。行距方向决定了 <codeph>lineHeight</codeph> 属性是引用一行基线与前一行基线之间的距离，还是与后一行基线之间的距离。默认值 <codeph>FormatValue.AUTO</codeph> 根据段落的 <codeph>locale</codeph> 属性进行解析。对于日语和中文，为 <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>，对于所有其它语言，为 <codeph>LeadingModel.ROMAN_UP</codeph>。<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.LeadingModel.ROMAN_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN、flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN、flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD、flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP、flashx.textLayout.formats.LeadingModel.AUTO、flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 控制可以在该文本中使用字体中定义的哪些连字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 控制可以在该文本中使用字体中定义的哪些连字。对于每个设置显示的连字取决于字体。由两个或两个以上的字母结合在一起形成单个字型时就是连字。连字通常用于替换一些共享公共部分的连续字符，例如字母对“fi”、“fl”或“ae”。在拉丁语字符集和非拉丁语字符集中均可使用连字。LigatureLevel 类的值（<codeph>MINIMUM</codeph>、<codeph>COMMON</codeph>、<codeph>UNCOMMON</codeph> 和 <codeph>EXOTIC</codeph>）支持的连字是添加的。每个值支持一个新连字集，而且包含先前类型的那些连字。<p><b>注意：</b>使用阿拉伯语或叙利亚语字体时，必须将 <codeph>ligatureLevel</codeph> 设置为 MINIMUM 或更高。</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>合法值为 flash.text.engine.LigatureLevel.MINIMUM、flash.text.engine.LigatureLevel.COMMON、flash.text.engine.LigatureLevel.UNCOMMON、flash.text.engine.LigatureLevel.EXOTIC 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 COMMON。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 控制容器内的换行（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 控制容器内的换行（如果在层叠期间未定义，则使用默认值）。可以将容器中的文本设置为适合容器的宽度 (<codeph>LineBreak.TO_FIT</codeph>)，也可以设置为只在显式回车或换行符处断开 (<codeph>LineBreak.EXPLICIT</codeph>)。
		 <p>合法值为 flashx.textLayout.formats.LineBreak.EXPLICIT、flashx.textLayout.formats.LineBreak.TO_FIT 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TO_FIT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 文本的行距控制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的行距控制。上一行或下一行（取决于 <codeph>LeadingModel</codeph>）的基线与当前行的基线之间的距离，等于应用于该行中任意字符的最大行距。该值可以是数字或百分比。如果指定百分比，请输入字符串值，例如 140%。<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>合法值为 -720 到 720 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 120%。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 若为 true，则应用删除线（一条穿过文本中间的直线）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 如果为 <codeph>true</codeph>，则应用删除线（贯穿文本中间绘制的线）。
		 <p>合法值为 true、false 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 false。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 文本的区域设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，en、en_US 和 en-US 均表示英语，ja 表示日语。 
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 en。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 底部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 底部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器底部边缘与文本之间的空间。该值是一个数字。 <p> 对于水平文本，在含有多个列的可滚动容器中，第一列和后续列将填充部分显示为容器底部的空白，但是对于最后一列，如果文本没有完全填充，可能必须进行滚动才能看到填充。</p>
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 左边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 左边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器左边缘与文本之间的空间。该值是一个数字。<p> 对于垂直文本，在含有多个列的可滚动容器中，第一列和后续列将填充部分显示为容器末尾的空白，但是对于最后一列，如果文本没有完全填充，可能必须进行滚动才能看到填充。</p>
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 右边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 右边边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器右边缘与文本之间的空间。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 顶部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 顶部边界（以像素为单位）（如果在层叠期间未定义，则使用默认值）。容器顶部边缘与文本之间的空间。该值是一个数字。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 一个数字，指定段落结束边缘的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定段落结束边缘的缩进量（像素数）。是指从左到右文本中的右边缘和从右到左文本中的左边缘。 
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 一个数字，指定在段落后留出的空白（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定在段落后留出的空白（像素数）。与 <codeph>paragraphSpaceBefore</codeph> 一起使用时会合并。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 一个数字，指定在段落前留出的空白（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定在段落前留出的空白（像素数）。与 <codeph>paragraphSpaceAfter</codeph> 一起使用时会合并。
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 一个数字，指定段落开始边缘的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定段落开始边缘的缩进量（像素数）。是指从左至右文本的左边和从右至左文本的右边。 
		 <p>合法值为 0 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 用于此文本的呈现模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的呈现模式。只应用于嵌入字体（<codeph>fontLookup</codeph> 属性设置为 <codeph>FontLookup.EMBEDDED_CFF</codeph> 时）。
		 <p>合法值为 flash.text.engine.RenderingMode.NORMAL、flash.text.engine.RenderingMode.CFF 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 CFF。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 指定与段落关联的制表位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定与段落关联的制表位。Setter 可采用 flashx.textLayout.formats.TabStopFormat 数组、精简的字符串表示形式、undefined 或 <codeph>FormatValue.INHERIT</codeph>。精简的字符串形式始终转换为 flashx.textLayout.formats.TabStopFormat 的一个数组。 <p>基于字符串的格式是一个制表位列表，其中各个制表位由一个或多个空格分隔。</p><p>制表位的形式为：&lt;对齐类型>&lt;对齐位置>|&lt;对齐标记>。</p><p>对齐类型由一个字符表示，可以是 S、E、C 或 D（或相应小写字母）。S 或 s 表示起始，E 或 e 表示末尾，C 或 c 表示中心，D 或 d 表示小数。对齐类型是可选的，如果未指定，将默认为 S。</p><p>对齐位置是一个数字，根据数字的 FXG 规范（小数或科学表示法）指定。对齐位置是必需的。</p><p>垂直竖线用于分隔对齐位置和对齐标记，只有当存在对齐标记时才应存在。</p><p> 如果对齐类型为 D，则对齐标记是可选的，如果是其它对齐类型，则对齐标记不应存在。对齐标记可以是由制表位末尾空白所终止的任何字符序列（对于最后一个制表位，末尾空白可选，默认为对齐标记的末尾）。如果空格由反斜杠进行转义 (\ )，则可以是对齐标记本身的一部分。如果反斜杠由另一个反斜杠进行转义 (\\)，则可以是对齐标记本身的一部分。如果对齐类型为 D，且未指定对齐标记，则会使用默认值 null。</p><p>如果未指定制表位，则制表符操作默认为到达行的末尾。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 null。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 两端对齐文本中段落最后一行（或唯一的一行）与容器的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 两端对齐文本中段落最后一行（或唯一的一行）与容器的对齐方式。如果 <codeph>textAlign</codeph> 设置为 <codeph>TextAlign.JUSTIFY</codeph>，则 <codeph>textAlignLast</codeph> 指定最后一行（如果是只含一行的块则为唯一一行）的对齐方式。其值类似于 <codeph>textAlign</codeph>。
		 <p>合法值为 flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 START。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 段落中的行与容器的对齐方式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 段落中的行与容器的对齐方式。<codeph>TextAlign.LEFT</codeph> 将文本行与容器左边缘对齐。<codeph>TextAlign.RIGHT</codeph> 与右边缘对齐。<codeph>TextAlign.CENTER</codeph> 等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。<codeph>TextAlign.JUSTIFY</codeph> 会展开行，使其充满整个空间。<codeph>TextAlign.START</codeph> 等效于将从左至右的文本设置为左对齐，或将从右至左的文本设置为右对齐。<codeph>TextAlign.END</codeph> 等效于将从左至右的文本设置为右对齐，或将从右至左的文本设置为左对齐。
		 <p>合法值为 flashx.textLayout.formats.TextAlign.LEFT、flashx.textLayout.formats.TextAlign.RIGHT、flashx.textLayout.formats.TextAlign.CENTER、flashx.textLayout.formats.TextAlign.JUSTIFY、flashx.textLayout.formats.TextAlign.START、flashx.textLayout.formats.TextAlign.END 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 START。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 文本的 Alpha（透明度）值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本的 Alpha（透明度）值。值为 0 表示完全透明，值为 1 表示完全不透明。<codeph>textAlpha</codeph> 设置为 0 的显示对象是活动对象，即使它们不可见。
		 <p>合法值为 0 到 1 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 1。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 文本上的装饰。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 文本上的装饰。用于应用下划线，默认值为 none。
		 <p>合法值为 flashx.textLayout.formats.TextDecoration.NONE、flashx.textLayout.formats.TextDecoration.UNDERLINE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 NONE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 一个数字，指定段落第一行的缩进量（像素数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 一个数字，指定段落第一行的缩进量（像素数）。如果为负值，则会将行向边缘中推进，可能会推到容器之外。
		 <p>合法值为 -1000 到 1000 范围内的数字和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 指定文本两端对齐的选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 指定文本两端对齐的选项。默认值为 <codeph>TextJustify.INTER_WORD</codeph>，表示向空格符添加额外空格。<codeph>TextJustify.DISTRIBUTE</codeph> 会向空格符和各字母之间添加额外空格。仅与 <codeph>JustificationRule.SPACE</codeph> 的 <codeph>justificationRule</codeph> 值一起使用。
		 <p>合法值为 flashx.textLayout.formats.TextJustify.INTER_WORD、flashx.textLayout.formats.TextJustify.DISTRIBUTE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 INTER_WORD。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 确定要旋转此文本的度数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 确定要旋转此文本的度数。
		 <p>合法值为 flash.text.engine.TextRotation.ROTATE_0、flash.text.engine.TextRotation.ROTATE_180、flash.text.engine.TextRotation.ROTATE_270、flash.text.engine.TextRotation.ROTATE_90、flash.text.engine.TextRotation.AUTO 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 AUTO。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 像素数（或 fontSize 的百分比，如 120%），指示应用于每个字符左侧的间隙数（手动字距调整）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 数字（以像素为单位）（或 <codeph>fontSize</codeph> 的百分比，如 120%）表示要应用到每个字符左边的间距的量（手动字距调整）。如果启用字距调整，则会将 <codeph>trackingLeft</codeph> 值与字体字距调整表中的值相加。如果禁用字距调整，则使用 <codeph>trackingLeft</codeph> 值作为手动字距调整值。同时支持正值和负值。 
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 数字（以像素为单位）（或 fontSize 的百分比，如 120%）表示要应用到每个字符右边的间距的量（手动字距调整）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 数字（以像素为单位）（或 <codeph>fontSize</codeph> 的百分比，如 120%）表示要应用到每个字符右边的间距的量（手动字距调整）。如果启用字距调整，则会将 <codeph>trackingRight</codeph> 值与字体字距调整表中的值相加。如果禁用字距调整，则使用 <codeph>trackingRight</codeph> 值作为手动字距调整值。同时支持正值和负值。 
		 <p>合法值为 -1000 到 1000 范围内的数字。</p>
		 <p>合法值为 -1000% 到 1000% 范围内的百分比数字。</p>
		 <p>合法值包括 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 0。</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 用于此文本的印刷大小写的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 用于此文本的印刷大小写的类型。下面给出了一些示例：<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>合法值为 flashx.textLayout.formats.TLFTypographicCase.DEFAULT、flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS、flashx.textLayout.formats.TLFTypographicCase.UPPERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE、flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 DEFAULT。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 垂直对齐或两端对齐（如果在层叠期间未定义，则使用默认值）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 垂直对齐或两端对齐（如果在层叠期间未定义，则使用默认值）。确定 TextFlow 元素在容器内如何对齐。
		 <p>合法值为 flashx.textLayout.formats.VerticalAlign.TOP、flashx.textLayout.formats.VerticalAlign.MIDDLE、flashx.textLayout.formats.VerticalAlign.BOTTOM、flashx.textLayout.formats.VerticalAlign.JUSTIFY 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性值为 TOP。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 将文本导入到 TextFlow 中时压缩或保留空白。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>当设置的值不在此属性的范围内时
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 将文本导入到 TextFlow 中时压缩或保留空白。<codeph>WhiteSpaceCollapse.PRESERVE</codeph> 会保留所有空白字符。如果为 <codeph>WhiteSpaceCollapse.COLLAPSE</codeph>，则会删除导入的文本块中的新行、制表符以及前导或结尾空格。换行标记 () 和 Unicode 行分隔符将会保留。
		 <p>合法值为 flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE、flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE 和 flashx.textLayout.formats.FormatValue.INHERIT。</p>
		 <p>默认值未定义，指示未设置。</p>
		 <p>如果在层叠期间未定义，则此属性将从一个祖代继承值。如果没有祖代设置了此属性，则其值为 COLLAPSE。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LeadingModel"><apiName>LeadingModel</apiName><shortdesc>
	  为设置 TextLayoutFormat 类的 leadingModel 属性定义值，由行距基础和行距方向的有效组合组成。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为设置 <codeph>TextLayoutFormat</codeph> 类的 <codeph>leadingModel</codeph> 属性定义值，由行距基础和行距方向的有效组合组成。行距基础描述哪些基线确定段落中行的行距（即 <codeph>lineHeight</codeph>）。行距方向指定 <codeph>lineHeight</codeph> 属性指的是一行基线与前一行基线之间的距离，还是与后一行基线之间的距离。 
	  <p>
	  <adobeimage alt="baselines" border="0" href="../../../images/textLayout_baselines.jpg"/> <adobeimage alt="leadingDirection_1" border="0" href="../../../images/textLayout_LD1.jpg"/> <adobeimage alt="leadingDirection_2" border="0" href="../../../images/textLayout_LD2.jpg"/> <adobeimage alt="leadingDirection_3" border="0" href="../../../images/textLayout_LD3.jpg"/>
	  </p>
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/leadingModel"><linktext>TextLayoutFormat.leadingModel</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/lineHeight"><linktext>TextLayoutFormat.lineHeight</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LeadingModel:APPROXIMATE_TEXT_FIELD"><apiName>APPROXIMATE_TEXT_FIELD</apiName><shortdesc> 指定接近 TextField 的行距行为的行距模型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>approximateTextField</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定接近 <codeph>TextField</codeph> 的行距行为的行距模型。它类似于 <codeph>ASCENT_DESCENT_UP</codeph>，<codeph>lineHeight</codeph> 是指一行的上缘基线与上一行的下缘基线之间的距离。但是，基线位置近似由 <codeph>TextField</codeph> 确定的位置，而不是由 <codeph>TextLine</codeph> 提供的度量标准。  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ASCENT_DESCENT_UP"><apiName>ASCENT_DESCENT_UP</apiName><shortdesc> 指定行距基础为 ASCENT/DESCENT，行距方向为 UP。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascentDescentUp</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定行距基础为 ASCENT/DESCENT，行距方向为 UP。换句话说，<codeph>lineHeight</codeph> 是指一行的 Ascent 基线与上一行的 Descent 基线之间的距离。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:AUTO"><apiName>AUTO</apiName><shortdesc> 指定根据段落的 locale 属性自动选择行距模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="3.0" version="#IDEOGRAPHIC_TOP_DOWN"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定根据段落的<codeph> locale </codeph>属性自动选择行距模式。对于日语和中文，为 IDEOGRAPHIC_TOP_DOWN，对于所有其它语言，为 ROMAN_UP。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_DOWN"><apiName>IDEOGRAPHIC_CENTER_DOWN</apiName><shortdesc> 指定行距基础为 IDEOGRAPHIC_CENTER，行距方向为 down。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterDown</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定行距基础为 IDEOGRAPHIC_CENTER，行距方向为 down。换句话说，<codeph>lineHeight</codeph> 是指一行的 Ideographic Center 基线与下一行的 Ideographic Center 基线之间的距离。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_UP"><apiName>IDEOGRAPHIC_CENTER_UP</apiName><shortdesc> 指定行距基础为 IDEOGRAPHIC_CENTER，行距方向为 UP。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterUp</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定行距基础为 IDEOGRAPHIC_CENTER，行距方向为 UP。换句话说，<codeph>lineHeight</codeph> 是指一行的 Ideographic Center 基线与下一行的 Ideographic Center 基线之间的距离。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_DOWN"><apiName>IDEOGRAPHIC_TOP_DOWN</apiName><shortdesc> 指定行距基础为 IDEOGRAPHIC_TOP，行距方向为 DOWN。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopDown</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定行距基础为 IDEOGRAPHIC_TOP，行距方向为 DOWN。换句话说，<codeph>lineHeight</codeph> 是指一行的 Ideographic TOP 基线与下一行的 Ideographic TOP 基线之间的距离。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_UP"><apiName>IDEOGRAPHIC_TOP_UP</apiName><shortdesc> 指定行距基础为 IDEOGRAPHIC_TOP，行距方向为 UP。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopUp</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定行距基础为 IDEOGRAPHIC_TOP，行距方向为 UP。换句话说，<codeph>lineHeight</codeph> 是指一行的 Ideographic TOP 基线与下一行的 Ideographic TOP 基线之间的距离。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ROMAN_UP"><apiName>ROMAN_UP</apiName><shortdesc> 指定行距基础为 ROMAN，行距方向为 UP。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>romanUp</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定行距基础为 ROMAN，行距方向为 UP。换句话说，<codeph>lineHeight</codeph> 是指一行的 Roman 基线与上一行的 Roman 基线之间的距离。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:IMEStatus"><apiName>IMEStatus</apiName><shortdesc>
	  内部使用，用于在 IME 文本输入会话时指定 IME 文本中子句的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  内部使用，用于在 IME 文本输入会话时指定 IME 文本中子句的状态。
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.formats:IMEStatus:IMEStatus"><apiName>IMEStatus</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.formats:IMEStatus:DEAD_KEY_INPUT_STATE"><apiName>DEAD_KEY_INPUT_STATE</apiName><shortdesc> 死键输入状态 - 在输入多键字符的过程中，例如，一个重音字符
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deadKeyInputState</apiData><apiType value="String"/></apiValueDef><apiDesc> 死键输入状态 - 在输入多键字符的过程中，例如，一个重音字符
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:IME_CLAUSE"><apiName>IME_CLAUSE</apiName><shortdesc> IMEClause 属性的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeClause</apiData><apiType value="String"/></apiValueDef><apiDesc> IMEClause 属性的名称。值为整数。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:IME_STATUS"><apiName>IME_STATUS</apiName><shortdesc> IMEStatus 属性的名称。
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeStatus</apiData><apiType value="String"/></apiValueDef><apiDesc> IMEStatus 属性的名称。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:NOT_SELECTED_CONVERTED"><apiName>NOT_SELECTED_CONVERTED</apiName><shortdesc> 未选中已转换文本 — 文本已被转换且不是 IME 会话中当前子句的一部分
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>notSelectedConverted</apiData><apiType value="String"/></apiValueDef><apiDesc> 未选中已转换文本 — 文本已被转换且不是 IME 会话中当前子句的一部分
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:NOT_SELECTED_RAW"><apiName>NOT_SELECTED_RAW</apiName><shortdesc> 未选中原始文本 — 文本已被转换且不是 IME 会话中当前子句的一部分
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>notSelectedRaw</apiData><apiType value="String"/></apiValueDef><apiDesc> 未选中原始文本 — 文本已被转换且不是 IME 会话中当前子句的一部分
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:SELECTED_CONVERTED"><apiName>SELECTED_CONVERTED</apiName><shortdesc> 选中已转换文本 — 文本已被转换且是 IME 会话中的当前子句
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectedConverted</apiData><apiType value="String"/></apiValueDef><apiDesc> 选中已转换文本 — 文本已被转换且是 IME 会话中的当前子句
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:SELECTED_RAW"><apiName>SELECTED_RAW</apiName><shortdesc> 选中原始文本 — 文本已被转换且是 IME 会话中的当前子句
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectedRaw</apiData><apiType value="String"/></apiValueDef><apiDesc> 选中原始文本 — 文本已被转换且是 IME 会话中的当前子句
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineOffset"><apiName>BaselineOffset</apiName><shortdesc>
	  定义 TextLayoutFormat 和 ContainerFormattedElement 类的 firstBaselineOffset 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  定义 <codeph>TextLayoutFormat</codeph> 和 <codeph>ContainerFormattedElement</codeph> 类的 <codeph>firstBaselineOffset</codeph> 属性值。确定从容器顶部边界到第一行基线之间的偏移。可以将基线偏移指定为行的 ascent、行高或自动生成的量。
	  <p>
	  <adobeimage alt="firstBaselineOffset_1" border="0" href="../../../images/textLayout_FBO1.jpg"/> <adobeimage alt="firstBaselineOffset_2" border="0" href="../../../images/textLayout_FBO2.jpg"/> <adobeimage alt="firstBaselineOffset_3" border="0" href="../../../images/textLayout_FBO3.jpg"/> <adobeimage alt="firstBaselineOffset_4" border="0" href="../../../images/textLayout_FBO4.jpg"/>
	  </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/firstBaselineOffset"><linktext>TextLayoutFormat.firstBaselineOffset</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineOffset:ASCENT"><apiName>ASCENT</apiName><shortdesc> 指定等于行的 ascent 的偏移量，即，行中最高字体的 ascent，考虑内联图形，以图形底部作为基线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定等于行的 ascent 的偏移量，即，行中最高字体的 ascent，考虑内联图形，以图形底部作为基线。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:AUTO"><apiName>AUTO</apiName><shortdesc> 将行的 ascent 与容器顶部边界对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 将行的 ascent 与容器顶部边界对齐。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:LINE_HEIGHT"><apiName>LINE_HEIGHT</apiName><shortdesc> 指定等于行高的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineHeight</apiData><apiType value="String"/></apiValueDef><apiDesc> 指定等于行高的偏移量。
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse"><apiName>WhiteSpaceCollapse</apiName><shortdesc>
	  为设置 TextLayoutFormat 类的 whiteSpaceCollapse 属性定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  为设置 <codeph>TextLayoutFormat</codeph> 类的 <codeph>whiteSpaceCollapse</codeph> 属性定义值。 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/whiteSpaceCollapse"><linktext>TextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:COLLAPSE"><apiName>COLLAPSE</apiName><shortdesc> 
		 导入文本时合并空白（默认）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>collapse</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 导入文本时合并空白（默认）。在导入的文本块内，删除新行、制表符和首尾空格。保留换行标记 (br/) 和 Unicode 行分隔符。
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:PRESERVE"><apiName>PRESERVE</apiName><shortdesc> 导入文本时保留空白。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>preserve</apiData><apiType value="String"/></apiValueDef><apiDesc> 导入文本时保留空白。 
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>