<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiDetail/><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><shortdesc> Интерфейс для поддержки TLF-управляемых контейнеров в программной среде безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Интерфейс для поддержки TLF-управляемых контейнеров в программной среде безопасности.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Вызывается для запроса клиентов начать передачу событий mouseup и mousemove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Вызывается для запроса клиентов начать передачу событий mouseup и mousemove извне программной среды безопасности.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Вызывается для уведомления клиентов о том, что больше не требуется передача событий mouseup и mousemove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Вызывается для уведомления клиентов о том, что больше не требуется передача событий mouseup и mousemove извне программной среды безопасности.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Вызов клиента для передачи события mouseMove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Вызов клиента для передачи события mouseMove извне программной среды безопасности. Координаты перемещения мыши не требуются.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Вызов клиента для передачи события mouseUp извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Вызов клиента для передачи события mouseUp извне программной среды безопасности. Координаты отпускания левой кнопки мыши не требуются.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Управляет текстом в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="callInContext"/><Exclude kind="method" name="getBaseSWFContext"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> Управляет текстом в контейнере. Предполагается, что он управляет всеми нижестоящими элементами контейнера. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Передается объектом TextFlow каждый раз при добавлении к контейнеру новых DisplayObject или обновлении их в результате создания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается объектом TextFlow каждый раз при добавлении к контейнеру новых DisplayObject или обновлении их в результате создания.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Передается объектом TextFlow при каждом повреждении. 
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается объектом TextFlow при каждом повреждении. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Передается объектом TextFlow после прокрутки текста в контейнере контроллера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается объектом TextFlow после прокрутки текста в контейнере контроллера.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Передается при изменении размера InlineGraphicElement вследствие установки для ширины или высоты значения auto или процентного значения после окончания загрузки изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при изменении размера InlineGraphicElement вследствие установки для ширины или высоты значения auto или процентного значения после окончания загрузки изображения. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Передается при нажатии любой ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при нажатии любой ссылки. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Передается при снятии указателя мыши с любой ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при снятии указателя мыши с любой ссылки. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Передается при первом наведении указателя мыши на любую ссылку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при первом наведении указателя мыши на любую ссылку. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Передается при прохождении указателя мыши над любой ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при прохождении указателя мыши над любой ссылкой. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Передается, когда указатель мыши находится над какой-либо ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается, когда указатель мыши находится над какой-либо ссылкой. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Передается при нажатии кнопки мыши над любой ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при нажатии кнопки мыши над любой ссылкой. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Передается после каждой перекомпоновки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается после каждой перекомпоновки. 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Передается при каждом изменении выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при каждом изменении выбора. Первоначально используется для обновления пользовательского интерфейса, зависимого от выбора. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.container:TextContainerManager:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Функция конструктора – создает экземпляр TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>DisplayObjectContainer для управления текстовыми строками.
		 </apiDesc></apiParam><apiParam><apiItemName>configuration</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>- экземпляр IConfiguration, используемый с этим экземпляром TextContainerManager. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Функция конструктора – создает экземпляр TextContainerManager. Для получения оптимальных результатов выполните следующее.
		 <ol>
		 <li>Запустите TextContainerManager.defaultConfiguration и измените его</li>   
		 <li>Используйте одну и ту же конфигурацию для нескольких InputManager</li>
		 </ol>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:TextContainerManager:activateHandler"><apiName>activateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginInteraction"><apiName>beginInteraction</apiName><shortdesc> Возвращает текущий экземпляр ISelectionManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>диспетчер операций для этого экземпляра TextContainerManager.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает текущий экземпляр ISelectionManager. Преобразовывает в экземпляр TextFlow и создает его при необходимости. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Вызывается для запроса клиентов начать передачу событий mouseup и mousemove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Вызывается для запроса клиентов начать передачу событий mouseup и mousemove извне программной среды безопасности.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:compose"><apiName>compose</apiName><shortdesc> Создает текст контейнера; вызывает либо фабрику, либо updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Создает текст контейнера; вызывает либо фабрику, либо <codeph>updateAllControllers()</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> Создает ContextMenu для TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>созданное контекстное меню.
		 
		 </apiDesc><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> Создает ContextMenu для TextContainerManager. Методы класса ContextMenu используются для добавления элементов к меню. 
		 <p>Для определения пользовательского контекстного меню можно переопределить этот метод.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createEditManager"><apiName>createEditManager</apiName><shortdesc>Создайте диспетчер редактирования для использования при редактировании.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>диспетчер редактирования для этого экземпляра TextContainerManager .
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:IEditManager</apiOperationClassifier></apiReturn><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>Экземпляр IUndoManager для создаваемого EditManager.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>Создайте диспетчер редактирования для использования при редактировании. Переопределите этот метод, если необходимо применить пользовательский EditManager вместо принятого по умолчанию.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createSelectionManager"><apiName>createSelectionManager</apiName><shortdesc>Создайте диспетчер выбора для использования при выборе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>новый экземпляр SelectionManager.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>Создайте диспетчер выбора для использования при выборе. Переопределите этот метод, если необходимо применить пользовательский SelectionManager вместо принятого по умолчанию.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:drawBackgroundAndSetScrollRect"><apiName>drawBackgroundAndSetScrollRect</apiName><shortdesc>   
		 Возвращает значение true, если свойство контейнера scrollRect заполнено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение равно <codeph>true</codeph>, если создан объект <codeph>scrollRect</codeph>.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>scrollX</apiItemName><apiType value="Number"/><apiDesc>Начальная горизонтальная позиция прямоугольника прокрутки.
		 </apiDesc></apiParam><apiParam><apiItemName>scrollY</apiItemName><apiType value="Number"/><apiDesc>Начальная вертикальная позиция прямоугольника прокрутки.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>   
		 Возвращает значение <codeph>true</codeph>, если свойство контейнера scrollRect заполнено. Этот метод включает проверку наличия установки <codeph>scrollRect</codeph> без фактического обращения к свойству <codeph>scrollRect</codeph>, что может привести к возникновению проблем с производительностью. 
		 <p>Переопределите этот метод для отображения фона или границы. Переопределение этого метода может оказаться сложным, поскольку scrollRect <b>должен</b> быть установлен по правилам.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:editHandler"><apiName>editHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Событие</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endInteraction"><apiName>endInteraction</apiName><shortdesc> Завершает взаимодействие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Завершает взаимодействие. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Вызывается для уведомления клиентов о том, что больше не требуется передача событий mouseup и mousemove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Вызывается для уведомления клиентов о том, что больше не требуется передача событий mouseup и mousemove извне программной среды безопасности.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Обрабатывает событие focusIn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> Обрабатывает событие focusIn.
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> Создает прямоугольник, показывающий размещение текста после последнего вызова метода compose() или метода updateContainer().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>границы содержимого
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> Создает прямоугольник, показывающий размещение текста после последнего вызова метода <codeph>compose()</codeph> или метода <codeph>updateContainer()</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.container.xml#TextContainerManager/compose()"><linktext>compose()</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager/updateContainer()"><linktext>updateContainer()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getFocusedSelectionFormat"><apiName>getFocusedSelectionFormat</apiName><shortdesc> Возвращает focusedSelectionFormat – по умолчанию значение берется из конфигурации.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает focusedSelectionFormat – по умолчанию значение берется из конфигурации. В подклассе это значение может быть переопределено для обеспечения другого SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getInactiveSelectionFormat"><apiName>getInactiveSelectionFormat</apiName><shortdesc> Возвращает inactiveSelectionFormat – по умолчанию значение берется из конфигурации. В подклассе оно может быть переопределено для обеспечения другого SelectionFormat
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает inactiveSelectionFormat – по умолчанию значение берется из конфигурации. В подклассе оно может быть переопределено для обеспечения другого SelectionFormat
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getLineAt"><apiName>getLineAt</apiName><shortdesc> Возвращает TextLine в индексе из массива созданных строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLine, возникающий в указанном индексе.
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Находит строку в этой позиции индекса в тексте.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Возвращает TextLine в индексе из массива созданных строк.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>сумма дельта объема пространства прокрутки
		
		</apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>Количество прокручиваемых строк.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getTextFlow"><apiName>getTextFlow</apiName><shortdesc> Текущий TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>текущий объект TextFlow
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Текущий TextFlow. Преобразовывает в полное представление TextFlow, если он таковым не является. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getText"><apiName>getText</apiName><shortdesc>
		 Возвращает текущий текст с использованием разделителя между абзацами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>separator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>Настраиваемая строка между абзацами.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Возвращает текущий текст с использованием разделителя между абзацами. Разделитель может быть указан посредством параметра <codeph>separator</codeph>. Значением по умолчанию для параметра <codeph>separator</codeph> является символ Юникод <codeph>'PARAGRAPH SEPARATOR' (U+2029)</codeph>.
		 
		 <p>Вызов установщика удаляет любой прикрепленный TextFlow. Все выделенные области будут утрачены.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUndoManager"><apiName>getUndoManager</apiName><shortdesc> 
		 Возвращает используемый диспетчер отмены.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>новый экземпляр IUndoManager.
		 
		 </apiDesc><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
		 Возвращает используемый диспетчер отмены. По умолчанию создает уникальный диспетчер отмены. В подклассе можно переопределить это значение, если требуется настроить пользовательский диспетчер отмены (например, использовать общий диспетчер отмены для нескольких экземпляров TextContainerManager).
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUnfocusedSelectionFormat"><apiName>getUnfocusedSelectionFormat</apiName><shortdesc> Возвращает unfocusedSelectionFormat – по умолчанию значение берется из конфигурации. Это значение может быть переопределено в подклассе для обеспечения другого SelectionFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает unfocusedSelectionFormat – по умолчанию значение берется из конфигурации. Это значение может быть переопределено в подклассе для обеспечения другого SelectionFormat.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Обрабатывает событие IME.START_COMPOSITION при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> Объект IMEEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>IME.START_COMPOSITION</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#IMEEvent/START_COMPOSITION"><linktext>IMEEvent.START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateSelectionFormats"><apiName>invalidateSelectionFormats</apiName><shortdesc> Вызовите его для изменения форматов выбора (SelectionFormat) и обновления interactionManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Вызовите его для изменения форматов выбора (SelectionFormat) и обновления interactionManager. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateUndoManager"><apiName>invalidateUndoManager</apiName><shortdesc> Вызовите его при редактировании, когда необходимо сбросить настройки диспетчера отмены, используемого для редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Вызовите его при редактировании, когда необходимо сбросить настройки диспетчера отмены, используемого для редактирования.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:isDamaged"><apiName>isDamaged</apiName><shortdesc> Возвращает значение true, если содержимое необходимо создать.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если содержимое необходимо создать, в противном случае – <codeph>false</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Возвращает <codeph>true</codeph>, если содержимое необходимо создать. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект KeyboardEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект KeyboardEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>Объект ContextMenuEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Вызов клиента для передачи события mouseMove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Вызов клиента для передачи события mouseMove извне программной среды безопасности. Координаты перемещения мыши не требуются.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> Обрабатывает событие mouseOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> Обрабатывает событие mouseOver.
		</apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Вызов клиента для передачи события mouseUp извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Вызов клиента для передачи события mouseUp извне программной среды безопасности. Координаты отпускания левой кнопки мыши не требуются.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Конец выбора, изменяющийся при расширении выбора. Может быть либо началом, либо концом выбора, выраженным смещением по отношению к началу текстового потока.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	Устойчивый конец выбора при расширении выбора. Может быть либо началом, либо концом выбора.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setTextFlow"><apiName>setTextFlow</apiName><shortdesc> Устанавливает TextFlow в этот TextContainerManager, заменяя любой существующий TextFlow и удаляя текущий текст.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Устанавливает TextFlow в этот TextContainerManager, заменяя любой существующий TextFlow и удаляя текущий текст. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setText"><apiName>setText</apiName><shortdesc>
		 Устанавливает свойство text для указанной строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>настраиваемая строка
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Устанавливает свойство <codeph>text</codeph> для указанной строки. Удаляет любой прикрепленный TextFlow. Все выделенные области будут утрачены.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> Объект TextEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:updateContainer"><apiName>updateContainer</apiName><shortdesc> Обновляет отображение; вызывает либо фабрику, либо updateAllControllers().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Обновляет отображение; вызывает либо фабрику, либо updateAllControllers().
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:TextContainerManager:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> Возвращает допустимый вертикальный размер текста в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Возвращает допустимый вертикальный размер текста в контейнере. Значение указано в пикселях. 
		 <p>После установки этого свойства текст в контейнере становится поврежденным и требует повторного создания.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> Возвращает допустимый горизонтальный размер текста в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Возвращает степень горизонтального смещения, допустимую для текста в контейнере. Значение указано в пикселях.
		 
		 <p>После установки этого свойства текст в контейнере становится поврежденным и требует повторного создания.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:configuration:get"><apiName>configuration</apiName><shortdesc> Объект Configuration для данного TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> Объект Configuration для данного TextContainerManager. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.IConfiguration.xml"><linktext>IConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:container:get"><apiName>container</apiName><shortdesc> Возвращает контейнер (DisplayObjectContainer), содержащий текст, управляемый TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> Возвращает контейнер (DisplayObjectContainer), содержащий текст, управляемый TextContainerManager.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>ContainerController.container</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> Стандартная конфигурация для данного TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> Стандартная конфигурация для данного TextContainerManager. Для атрибутов столбца и заполнения устанавливается значение <codeph>FormatValue.INHERIT</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:editingMode:get"><apiName>editingMode</apiName><shortdesc> Режим редактирования этого TextContainerManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Режим редактирования этого TextContainerManager. Разрешенные режимы: reading only, reading and selection permitted, и editing (чтение, выбор, и запись). Для настройки этого свойства используются значения констант, определенные в классе EditingMode. 
		 <p>Значением по умолчанию является READ_WRITE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Определяет, генерирует ли фабрика все текстовые строки или останавливается при заполнении пределов контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Определяет, генерирует ли фабрика все текстовые строки или останавливается при заполнении пределов контейнера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> Устанавливает формат, отображающий только строку.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Устанавливает формат, отображающий только строку. При отображении TextFlow не приводит к немедленному эффекту. Предоставляемый ITextLayoutFormat не копируется. Изменение его без вызова этого установщика может иметь непредсказуемые последствия. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:numLines:get"><apiName>numLines</apiName><shortdesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Необязательный экземпляр ISWFContext, используемый для выполнения необходимых вызовов FTE в соответствующем контексте SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Необязательный экземпляр ISWFContext, используемый для выполнения необходимых вызовов FTE в соответствующем контексте SWF. 
		
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Определяет, генерирует ли фабрика все текстовые строки или останавливается при заполнении пределов контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Определяет, генерирует ли фабрика все текстовые строки или останавливается при заполнении пределов контейнера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
	  Класс ScrollPolicy является классом перечисления, определяющим значения параметров свойств horizontalScrollPolicy и verticalScrollPolicy класса ContainerController, который определяет контейнер текстового потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Класс ScrollPolicy является классом перечисления, определяющим значения параметров свойств <codeph>horizontalScrollPolicy</codeph> и <codeph>verticalScrollPolicy</codeph> класса ContainerController, который определяет контейнер текстового потока. 
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/horizontalScrollPolicy"><linktext>ContainerController.horizontalScrollPolicy</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/verticalScrollPolicy"><linktext>ContainerController.verticalScrollPolicy</linktext></link></related-links><apiValue id="flashx.textLayout.container:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 Указывает на необходимость прокрутки, если содержимое превышает размеры контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Указывает на необходимость прокрутки, если содержимое превышает размеры контейнера. Во время выполнения вычисляет количество строк, переполняющих контейнер; пользователь может переходить к ним с помощью клавиш управления курсором, перетаскивания или вращая колесико мыши. Прокрутка также осуществляется путем установки соответствующего значения позиции, либо <codeph>ContainerController.horizontalScrollPosition</codeph>, либо <codeph>ContainerController.verticalScrollPosition</codeph>. Кроме того, при выполнении содержимое контейнера может автоматически прокручиваться в процессе редактирования.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc> 
		 При выполнении вызывает отсутствие отображения строк переполнения, что означает, что пользователь не может переходить к ним.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 При выполнении вызывает отсутствие отображения строк переполнения, что означает, что пользователь не может переходить к ним. В этом случае установка соответствующих свойств <codeph>ContainerController.horizontalScrollPosition</codeph> и <codeph>ContainerController.verticalScrollPosition</codeph> не дает какого-либо эффекта. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc> 
		 Определяет доступность прокрутки для перехода к содержимому, превышающему размеры контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Определяет доступность прокрутки для перехода к содержимому, превышающему размеры контейнера. Во время выполнения вычисляет количество строк, переполняющих контейнер, и позволяет пользователю выполнять прокрутку с целью их отображения с помощью клавиш управления курсором, перетаскивания или вращая колесико мыши. Прокрутка также осуществляется путем установки соответствующего значения позиции, либо <codeph>ContainerController.horizontalScrollPosition</codeph>, либо <codeph>ContainerController.verticalScrollPosition</codeph>. Кроме того, при выполнении содержимое контейнера может автоматически прокручиваться в процессе редактирования.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><shortdesc> 
	 Класс ColumnState вычисляет размеры и местоположение столбцов с использованием ширины контейнера и атрибутов контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс ColumnState вычисляет размеры и местоположение столбцов с использованием ширины контейнера и атрибутов контейнера. Для вычисления значений столбцов можно либо создать экземпляры этого класса независимо, либо получить значения столбцов, использованных для текста после составления или обновления (изменения) контейнера.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ColumnState:ColumnState"><apiName>ColumnState</apiName><shortdesc>
		 Функция конструктора – создает объект ColumnState.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>blockProgression</apiItemName><apiType value="String"/><apiDesc>Направление строк для текстового потока – либо BlockProgression.TB (сверху вниз), либо BlockProgression.RL (справа налево).
		 </apiDesc></apiParam><apiParam><apiItemName>columnDirection</apiItemName><apiType value="String"/><apiDesc>Направление макета столбца для текстового потока – либо Direction.RTL (справа налево), либо Direction.LTR (слева направо).
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Экземпляр ContainerController, атрибуты которого используются для вычисления значений столбцов.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiDesc>Допустимый горизонтальный размер текста в контейнере в пикселях.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiDesc>Допустимый вертикальный размер текста в контейнере в пикселях.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Функция конструктора – создает объект ColumnState. Если значения <codeph>controller.compositionWidth</codeph> и <codeph>controller.compositionHeight</codeph> равны <codeph>NaN</codeph> (не числу), то конструктор измеряет содержимое контейнера для определения фактической ширины и высоты компоновки, поступающей в ColumnState. Для установки значения параметра <codeph>blockProgression</codeph> используются константы, определяемые классом <codeph>flashx.textLayout.formats.BlockProgression</codeph>. Для установки значения параметра <codeph>columnDirection</codeph> используются константы, определяемые классом <codeph>flashx.textLayout.formats.Direction</codeph>.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>BlockProgression</linktext></link><link href="flashx.textLayout.formats.xml#Direction"><linktext>Направление</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.container:ColumnState:getColumnAt"><apiName>getColumnAt</apiName><shortdesc> 
		 Возвращает область, которую столбец принимает внутри контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Область указанного столбца.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Относительная позиция столбца по отношению ко всем столбцам в контейнере, если первый столбец имеет позицию 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает область, которую столбец принимает внутри контейнера. Позволяет обращаться к области конкретного столбца.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ColumnState:columnCount:get"><apiName>columnCount</apiName><shortdesc> 
		 Количество столбцов в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Количество столбцов в контейнере. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnGap:get"><apiName>columnGap</apiName><shortdesc> 
		 Объем пространства, в пикселях, оставляемый между столбцами контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Объем пространства, в пикселях, оставляемый между столбцами контейнера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnWidth:get"><apiName>columnWidth</apiName><shortdesc> 
		 Ширина столбцов контейнера в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Ширина столбцов контейнера в пикселях. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
	 Класс ContainerController определяет связь между объектом TextFlow и контейнером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс ContainerController определяет связь между объектом TextFlow и контейнером. TextFlow содержит IFlowComposer, который управляет контейнером или набором контейнеров для TextFlow. IFlowComposer имеет ContainerController для каждого управляемого им контейнера. ContainerController управляет контейнером, а также уникальными для этого контейнера атрибутами и текстом контейнера.
	 
	 <p><adobeimage alt="IContainerController" href="../../../images/textLayout_multiController.gif"/></p>
	 
	 </apiDesc><example conref="examples\ContainerControllerExample1.as"/><example conref="examples\ContainerControllerExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ContainerController:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
		 Конструктор создает экземпляр ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>DisplayObjectContainer для управления текстовыми строками.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>Первоначальная ширина создаваемого текста в контейнере.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>Первоначальная высота создаваемого текста в контейнере.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Конструктор создает экземпляр ContainerController. ContainerController по умолчанию имеет параметры <codeph>compositionWidth</codeph> и <codeph>compositionHeight</codeph>; если пользователь не указал ширину и высоту, в контейнере отображается фрагмент текста.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:ContainerController:activateHandler"><apiName>activateHandler</apiName><shortdesc> Обрабатывает событие Event.ACTIVATE при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>Event.ACTIVATE</codeph> при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_activateHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addBackgroundShape"><apiName>addBackgroundShape</apiName><shortdesc>
		 Добавляет объект flash.display.Shape, на котором нарисованы фоновые формы (например, цвет фона).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc>Добавляемый объект <codeph>flash.display.Shape</codeph>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Добавляет объект <codeph>flash.display.Shape</codeph>, на котором нарисованы фоновые формы (например, цвет фона). Реализация по умолчанию этого перезаписываемого метода добавляет объект к <codeph>container</codeph> непосредственно перед первым нижестоящим объектом <codeph>flash.text.engine.TextLine</codeph>, если он существует, в остальных случаях после последнего существующего нижестоящего объекта. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addSelectionContainer"><apiName>addSelectionContainer</apiName><shortdesc>
		 Добавляет объект flash.display.DisplayObjectContainer, к которому добавлены формы выборки (например, выделение блока, курсор и т.д.) .</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Добавляемый объект <codeph>flash.display.DisplayObjectContainer</codeph>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Добавляет объект <codeph>flash.display.DisplayObjectContainer</codeph>, к которому добавлены формы выборки (например, выделение блока, курсор и т.д.) . Реализация по умолчанию перезаписываемого метода имеет следующие варианты поведения: объект добавляется непосредственно перед первым нижестоящим объектом <codeph>flash.text.engine.TextLine</codeph> для <codeph>container</codeph>, если он существует, и объект является непрозрачным и имеет стандартный режим наложения. Во всех остальных случаях объект добавляется как последний нижестоящий объект <codeph>container</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addTextLine"><apiName>addTextLine</apiName><shortdesc>
		 Добавляет объект flash.text.engine.TextLine в виде потомка container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>Добавляемый объект <codeph>flash.text.engine.TextLine</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс вставки текстовой строки в вышестоящий объект 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Добавляет объект <codeph>flash.text.engine.TextLine</codeph> в виде потомка <codeph>container</codeph>. Реализация по умолчанию этого перезаписываемого метода добавляет объект в виде прямого нижестоящего объекта <codeph>container</codeph> в указанном индексе.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:autoScrollIfNecessary"><apiName>autoScrollIfNecessary</apiName><shortdesc> 
		 Событие прокрутки обрабатывается при выборе перетаскиванием.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mouseX</apiItemName><apiType value="int"/><apiDesc>Горизонтальная позиция курсора мыши в рабочей области.
		 </apiDesc></apiParam><apiParam><apiItemName>mouseY</apiItemName><apiType value="int"/><apiDesc>Вертикальная позиция курсора мыши в рабочей области.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Событие прокрутки обрабатывается при выборе перетаскиванием. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Вызывается для запроса клиентов начать передачу событий mouseup и mousemove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Вызывается для запроса клиентов начать передачу событий mouseup и mousemove извне программной среды безопасности.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:clearStyle"><apiName>clearStyle</apiName><shortdesc> Отменяет стиль, указанный styleProp из этого FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Отменяет стиль, указанный <codeph>styleProp</codeph> из этого FlowElement. Устанавливает значение <codeph>undefined</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> 
		 Создает контекстное меню для ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> 
		 Создает контекстное меню для ContainerController. Методы класса ContextMenu используются для добавления элементов к меню.
		 <p>Для определения пользовательского контекстного меню можно переопределить этот метод.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> Обрабатывает событие Event.DEACTIVATE при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>Event.DEACTIVATE</codeph> при управлении событиями клиентом. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:editHandler"><apiName>editHandler</apiName><shortdesc>
		 Обрабатывает событие редактирования (CUT, COPY, PASTE, SELECT_ALL) при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Обрабатывает событие редактирования (CUT, COPY, PASTE, SELECT_ALL) при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_editHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Событие</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Вызывается для уведомления клиентов о том, что больше не требуется передача событий mouseup и mousemove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Вызывается для уведомления клиентов о том, что больше не требуется передача событий mouseup и mousemove извне программной среды безопасности.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Обрабатывает события FocusEvent.KEY_FOCUS_CHANGE и FocusEvent.MOUSE_FOCUS_CHANGE при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Обрабатывает события <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> и <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Обрабатывает событие FocusEvent.FOCUS_IN при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>FocusEvent.FOCUS_IN</codeph> при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_focusInHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FocusEvent.FOCUS_IN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> Обрабатывает событие FocusEvent.FOCUS_OUT при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>FocusEvent.FOCUS_OUT</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> 
		 Возвращает область, занятую текстом, в состояние, отраженное в последней операции создания или обновления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>описывает область, занимаемую текстом.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Возвращает область, занятую текстом, в состояние, отраженное в последней операции создания или обновления. Ширину и высоту можно оценивать, если контейнер является прокручиваемым, и текст выходит за пределы видимой области.
		 
		 </apiDesc><example conref="examples\ContainerController_getContentBoundsExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>Прямоугольник</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:getFirstTextLineChildIndex"><apiName>getFirstTextLineChildIndex</apiName><shortdesc>
		 Получает индекс, в котором первая текстовая строка должна появиться в вышестоящем объекте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>индекс, в котором первая текстовая строка должна появиться в вышестоящем объекте.
		 
		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Получает индекс, в котором первая текстовая строка должна появиться в вышестоящем объекте. Реализация по умолчанию этого перезаписываемого метода возвращает индекс первого нижестоящего объекта <codeph>flash.text.engine.TextLine</codeph> для <codeph>container</codeph>, если он существует, в остальных случаях индекс последнего нижестоящего объекта <codeph>container</codeph>. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		Определение длины прокрутки, необходимой для прокрутки вверх или вниз на указанное количество строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>сумма дельта объема пространства прокрутки
		
		</apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>Количество прокручиваемых строк.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Определение длины прокрутки, необходимой для прокрутки вверх или вниз на указанное количество строк. Отрицательные числа означают прокрутку вверх, с отображением преимущественно верхней части TextFlow. Положительные числа означают прокрутку вниз, с полным отображением следующей строки из нижней части.
		
		<p>При прокрутке, например, вверх, в данном методе следующая строка становится полностью видимой. Если следующая строка частично скрыта, а указанное количество строк равно 1, то частично скрытая строка становится полностью видимой.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getStyle"><apiName>getStyle</apiName><shortdesc> Возвращает значение стиля, заданное параметром styleProp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Текущее значение указанного стиля.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя устанавливаемого свойства стиля.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Возвращает значение стиля, заданное параметром <codeph>styleProp</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Обрабатывает событие IMEEvent.IME_START_COMPOSITION при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> Объект IMEEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>IMEEvent.IME_START_COMPOSITION</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.IMEEvent.IME_START_COMPOSITION.xml"><linktext>flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:invalidateContents"><apiName>invalidateContents</apiName><shortdesc> 
		 Маркирует весь текст этого контейнера как требующий создания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Маркирует весь текст этого контейнера как требующий создания. 
		 
		 </apiDesc><example conref="examples\ContainerController_invalidateContentsExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Определяет, имеется ли в контейнере текст, который необходимо создать.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true, если контейнер необходимо создать.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Определяет, имеется ли в контейнере текст, который необходимо создать. 
		 
		 </apiDesc><example conref="examples\ContainerController_isDamagedExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> Обрабатывает событие KeyboardEvent.KEY_DOWN при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект KeyboardEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>KeyboardEvent.KEY_DOWN</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> Обрабатывает событие FocusEvent.KEY_FOCUS_CHANGE при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект FocusEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> Обрабатывает событие Keyboard.KEY_UP при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект KeyboardEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>Keyboard.KEY_UP</codeph> при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_keyUpHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Обрабатывает событие ContextMenuEvent.MENU_SELECT при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>Объект ContextMenuEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Обрабатывает событие <codeph>ContextMenuEvent.MENU_SELECT</codeph> при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_menuSelectHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> Обрабатывает событие MouseEvent.DOUBLE_CLICK при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>MouseEvent.DOUBLE_CLICK</codeph> при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_mouseDoubleClickHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> Обрабатывает событие MouseEvent.MOUSE_DOWN при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>MouseEvent.MOUSE_DOWN</codeph> при управлении событиями клиентом. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Обрабатывает событие MouseEvent.MOUSE_MOVE при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Обрабатывает событие <codeph>MouseEvent.MOUSE_MOVE</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Вызов клиента для передачи события mouseMove извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Вызов клиента для передачи события mouseMove извне программной среды безопасности. Координаты перемещения мыши не требуются.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> Обрабатывает событие MouseEvent.MOUSE_OUT при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>MouseEvent.MOUSE_OUT</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Обрабатывает событие MouseEvent.MOUSE_OVER при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Обрабатывает событие <codeph>MouseEvent.MOUSE_OVER</codeph> при управлении событиями клиентом. 
		 
		 </apiDesc><example conref="examples\ContainerController_mouseOverHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Обрабатывает событие MouseEvent.MOUSE_UP при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Обрабатывает событие <codeph>MouseEvent.MOUSE_UP</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Вызов клиента для передачи события mouseUp извне программной среды безопасности.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Вызов клиента для передачи события mouseUp извне программной среды безопасности. Координаты отпускания левой кнопки мыши не требуются.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> Обрабатывает событие MouseEvent.MOUSE_WHEEL при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>MouseEvent.MOUSE_WHEEL</codeph> при управлении событиями клиентом.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeSelectionContainer"><apiName>removeSelectionContainer</apiName><shortdesc>
		 Удаляет объект flash.display.DisplayObjectContainer, содержащий формы выборки (например, выделение блока, курсор и т.д.).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Удаляемый объект <codeph>flash.display.DisplayObjectContainer</codeph>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Удаляет объект <codeph>flash.display.DisplayObjectContainer</codeph>, содержащий формы выборки (например, выделение блока, курсор и т.д.). Реализация по умолчанию этого перезаписываемого метода удаляет объект из вышестоящего объекта, если он существует.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeTextLine"><apiName>removeTextLine</apiName><shortdesc>
		 Удаляет объект flash.text.engine.TextLine из вышестоящего объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>Удаляемый объект <codeph>flash.text.engine.TextLine</codeph> 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Удаляет объект <codeph>flash.text.engine.TextLine</codeph> из вышестоящего объекта. Реализация по умолчанию этого перезаписываемого метода удаляет объект из <codeph>container</codeph>, если он является прямым нижестоящим объектом последнего объекта. Этот метод может вызваться, даже если объект не является потомком <codeph>container</codeph>. Любая реализация этого метода должна обеспечивать невозможность выполнения в этом случае каких-либо действий.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 Выполняет прокрутку с целью отображения диапазона текста в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>Конец выбора, изменяющийся при расширении выбора. Может быть либо началом, либо концом выбора, выраженным смещением по отношению к началу текстового потока.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	Устойчивый конец выбора при расширении выбора. Может быть либо началом, либо концом выбора.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет прокрутку с целью отображения диапазона текста в контейнере.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:selectRange"><apiName>selectRange</apiName><shortdesc> 
		 Устанавливает диапазон выбранного текста в компоненте, реализующем ITextSupport.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемое от нуля значение индекса символа в опорной конечной точке выделенного фрагмента.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Отсчитываемое от нуля значение индекса символа в активной конечной точке выделенного фрагмента.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Устанавливает диапазон выделенного текста в компоненте, который реализует интерфейс ITextSupport. Если любой из аргументов превышает заданные пределы, не следует изменять выделенный фрагмент. Компоненты для поддержки встроенного IME следует вызывать в этом методе.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setCompositionSize"><apiName>setCompositionSize</apiName><shortdesc> 
		 Устанавливает допустимую ширину и высоту текста в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Доступная ширина текста в контейнере в пикселях.
		 </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Доступная высота текста в контейнере в пикселях.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Устанавливает допустимую ширину и высоту текста в контейнере. 
		 
		 </apiDesc><example conref="examples\ContainerController_setCompositionSizeExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setStyle"><apiName>setStyle</apiName><shortdesc> 
		Изменяет значение стиля, заданного параметром styleProp, на значение, заданное параметром newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля, значение которого требуется установить.
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>Значение, которое требуется присвоить стилю.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Изменяет значение стиля, заданного параметром <codeph>styleProp</codeph>, на значение, заданное параметром <codeph>newValue</codeph>.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> Обрабатывает событие TextEvent.TEXT_INPUT при управлении событиями клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> Объект TextEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обрабатывает событие <codeph>TextEvent.TEXT_INPUT</codeph> при управлении событиями клиентом.
		 
		 </apiDesc><example conref="examples\ContainerController_textInputHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:updateVisibleRectangle"><apiName>updateVisibleRectangle</apiName><shortdesc> 
		 При прокрутке устанавливает прямоугольник прокрутки на прямоугольник контейнера таким образом, что наполовину видимые строки переносятся в область прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 При прокрутке устанавливает прямоугольник прокрутки на прямоугольник контейнера таким образом, что наполовину видимые строки переносятся в область прокрутки. Если прокрутка не выполняется, необходимо убрать прямоугольник прокрутки во избежание отсечения.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ContainerController:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Возвращает первый символ в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Возвращает первый символ в контейнере. Если контейнер не является первым в потоке, это значение обновляется при создании текста, т.е. при вызове методов <codeph>compose()</codeph> или <codeph>updateAllControllers()</codeph> IFlowComposer.
		 
	 	 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat: указывает базовую линию по которой выравнивается доминирующая базовая линия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: определяет базовую линию, по которой выравнивается основная базовая линия. Например, если значение <codeph>dominantBaseline</codeph> установлено на ASCENT, то установка <codeph>alignmentBaseline</codeph> на DESCENT выравнивает верхнюю границу текста по базовой линии DESCENT или под строкой. Как правило, базовые линии определяет наибольший элемент в строке.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимыми значениями являются flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение alpha равно 0, являются активными, несмотря на невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat: цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). Может иметь либо постоянное значение <codeph>BackgroundColor.TRANSPARENT</codeph>, либо шестнадцатеричное значение, задающее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого.
		 <p>Допустимые строковые значения – flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT, а также uints от 0x0 до 0xffffffff.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat: величина сдвига базовой линии от значения dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: величина сдвига базовой линии от значения <codeph>dominantBaseline</codeph>. Единицей измерения являются пиксели или процент от <codeph>fontSize</codeph> (в этом случае вводится строковое значение, например, 140%). Положительные значения сдвигают строку вверх для горизонтального текста (вправо для вертикального), а отрицательные значения сдвигают ее вниз для горизонтального текста (влево для вертикального). 
		 <p>Допустимые значения: flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Допустимые числовые значения – от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat: указывает размещение срок по вертикали или горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: определяет вертикальное или горизонтальное размещение строки. Строки располагаются либо сверху вниз <codeph>BlockProgression.TB</codeph> (используется для горизонтального текста), либо справа налево <codeph>BlockProgression.RL</codeph> (используется для вертикального текста).
		 <p>Допустимые значения: flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat: определяет допустимые места разбиения строк, когда обтекающий текст разбивается на несколько строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управляет местом разрыва строк при форматировании текста по размеру окна. Установите значение <codeph>BreakOpportunity.AUTO</codeph> для стандартного разрыва строк. Установите значение <codeph>BreakOpportunity.NONE</codeph> для <i>предотвращения</i> разрыва строк до тех пор, пока текст не превысит допустимых размеров, при этом в самом тексте будут отсутствовать заданные места разрыва. Установите значение <codeph>BreakOpportunity.ANY</codeph> для разрешения разрыва строки в любом месте, не только между словами. Установите значение <codeph>BreakOpportunity.ALL</codeph>, чтобы каждая группа символов находилась в отдельной строке (рекомендуется использовать для путей к файлам).
		 <p>Допустимые значения: flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat: тип используемого для текста хинтинга CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип используемого для текста хинтинга CFF. Тип подсказки CFF определяет, будет ли среда выполнения Flash в принудительном порядке привязывать жирные горизонтальные основы к субпиксельной сетке. Это свойство применяется только в том случае, если для свойства <codeph>renderingMode</codeph> установлено значение <codeph>RenderingMode.CFF</codeph>, и используется встроенный шрифт (для свойства <codeph>fontLookup</codeph> установлено значение <codeph>FontLookup.EMBEDDED_CFF</codeph>). На экранах небольшого размера хинтинг создает для читателей четкий и удобочитаемый текст.
		 <p>Допустимые значения: flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat: цвет текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: цвет текста. Шестнадцатеричное число, содержащее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat: число столбцов текста (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число текстовых столбцов (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Количество столбцов отменяет другие параметры настройки столбца. Значение представляет собой целое число или <codeph>FormatValue.AUTO</codeph>, если не указано. Если <codeph>columnCount</codeph> не указан, то <codeph>columnWidth</codeph> используется для создания максимального количества столбцов в контейнере.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также с ints от 1 до 50.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat: определяет величину промежутка между столбцами в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает размер средника между колонками в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Значение представляет собой число
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnState:get"><apiName>columnState</apiName><shortdesc> 
		 Возвращает объект ColumnState, описывающий число и характеристики столбцов в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ColumnState</apiValueClassifier></apiValueDef><apiDesc> 
		 Возвращает объект ColumnState, описывающий число и характеристики столбцов в контейнере. Эти значения обновляются при восстановлении текста в результате использования либо <codeph>IFlowComposer.compose()</codeph>, либо <codeph>IFlowComposer.updateAllControllers()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ColumnState"><linktext>ColumnState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat: ширина столбца в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Если указана ширина столбцов, но не указано их количество, то TextLayout создает максимально возможное количество столбцов этой ширины при заданной ширине контейнера и настройке <codeph>columnGap</codeph>. Все оставшееся пространство будет располагаться за последним столбцом. Значение представляет собой число.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также числа от 0 до 8000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> 
		 Возвращает степень вертикального смещения, допустимую для текста в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Возвращает допустимый вертикальный размер текста в контейнере. Значение указано в пикселях.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> 
		 Возвращает степень горизонтального смещения, допустимую для текста в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Возвращает степень горизонтального смещения, допустимую для текста в контейнере. Значение указано в пикселях.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Возвращает экземпляр ITextLayoutFormat с атрибутами, применяемыми в отношении этого контейнера, включая атрибуты, унаследованные от его корневого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Возвращает экземпляр ITextLayoutFormat с атрибутами, применяемыми в отношении этого контейнера, включая атрибуты, унаследованные от его корневого элемента.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/rootElement"><linktext>rootElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:container:get"><apiName>container</apiName><shortdesc> 
		 Возвращает экранный объект контейнера, содержащий текстовые строки для этого экземпляра ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> 
		 Возвращает экранный объект контейнера, содержащий текстовые строки для этого экземпляра ContainerController. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/ContainerController()"><linktext>ContainerController()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Возвращает coreStyles в этот ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Возвращает <codeph>coreStyles</codeph> в этот ContainerController. Обратите внимание, что получатель создает копию базового словаря стилей. Объект coreStyles инкапсулирует форматы, определенные в TextLayoutFormat. Объект <codeph>coreStyles</codeph> состоит из массива пар <i>имя стиля-значение</i>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat: тип регистра цифр, используемый для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип регистра цифр, используемого для текста. Установка значения на <codeph>DigitCase.OLD_STYLE</codeph> позволяет изменить размер букв на примерно соответствующий размеру строчных букв в нижнем или верхнем регистрах. Цифры располагаются пропорционально. Этот стиль доступен только в некоторых шрифтах, обычно в дополнительном или экспертном шрифте. Параметр <codeph>DigitCase.LINING</codeph> определяет высоту верхнего регистра, обычно является моноширинным и служит для выравнивания текста в диаграммах.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Допустимые значения: flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat: тип ширины цифр, используемый для этого текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип ширины цифр, используемых для текста. Может иметь значение <codeph>DigitWidth.PROPORTIONAL</codeph>, которое рекомендуется использовать для отдельных чисел, или <codeph>DigitWidth.TABULAR</codeph>, используемое для чисел в таблицах, диаграммах и вертикальных строках.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Допустимые значения: text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat: задает уровень двунаправленной вложенности текста в блоке по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: задает уровень двунаправленной вложенности текста в блоке по умолчанию. Направление чтения слева направо, как в сценариях с латинским стилем, или справа налево, как в сценариях с арабским или еврейским. Это свойство также влияет на направление столбца, когда оно применяется на уровне контейнера. Столбцы могут быть расположены либо слева направо, либо справа налево, так же, как и текст. Примеры:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat: указывает, какая из базовых линий элемента привязывается к alignmentBaseline для определения позиции элемента в строке по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения позиции элемента в строке по вертикали. Значение <codeph>TextBaseline.AUTO</codeph> выделяет доминирующую базовую линию, основывающуюся на свойстве <codeph>locale</codeph> вышестоящего абзаца. Для японского и китайского языков значением выделенной базовой линией является <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; для всех других - <codeph>TextBaseline.ROMAN</codeph>. Этот выбор базовых линий определяется выбором типа и размера шрифта.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat: определяет положение базовой линии первой строки в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает позицию базовой линии первой строки в контейнере. Базовая линия, к которой относится это свойство, зависит от языкового стандарта на уровне контейнера. Для японского и китайского языка это – <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; для всех других языков – <codeph>TextBaseline.ROMAN</codeph>. Смещение от верхнего отступа (или правого отступа, если <codeph>blockProgression</codeph> имеет значение RL) контейнера до базовой линии первой строки может иметь значение <codeph>BaselineOffset.ASCENT</codeph>, что означает равное подъему строки, либо <codeph>BaselineOffset.LINE_HEIGHT</codeph>, что означает равное высоте этой первой строки, либо любое фиксированное число для указания абсолютного расстояния. Значение <codeph>BaselineOffset.AUTO</codeph> выравнивает подъем строки по верхнему отступу контейнера.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Допустимые строковые значения: flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT и числа от 0 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 
		 Возвращает объект компоновщика потока, который составляет и выделяет текст в контейнере, управляемом этим контроллером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 
		 Возвращает объект компоновщика потока, который составляет и выделяет текст в контейнере, управляемом этим контроллером. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat: имя используемого шрифта или разделенный запятой список имен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: имя используемого шрифта или разделенный запятой список имен. Среда выполнения Flash визуализирует элемент с помощью первого доступного шрифта в списке. Например, если задать Arial, Helvetica, _sans, то проигрыватель сначала выполняет поиск Arial, затем Helvetica, если Arial не обнаружен, а потом _sans, если не обнаружен ни тот, ни другой.
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat: поиск используемых шрифтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: поиск используемых шрифтов. При указании <codeph>FontLookup.DEVICE</codeph> используются шрифты, установленные в системе, в которой выполняется SWF-файл. Использование шрифтов устройства сокращает размер ролика, но в различных системах и платформах текст не всегда отображается одинаково. При указании <codeph>FontLookup.EMBEDDED_CFF</codeph> используются контуры шрифтов, встроенные в опубликованный SWF-файл. Встроенные шрифты увеличивают размер файла SWF (иногда значительно), но текст в выбранном шрифте отображается последовательно.
		 <p>Допустимые значения: flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat: размер текста в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: размер текста в пикселях.
		 <p>Допускаются значения и числа от 1 до 720, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat: стиль текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: стиль текста. Можно использовать значение <codeph>FontPosture.NORMAL</codeph> для обычного текста или <codeph>FontPosture.ITALIC</codeph> для курсивного. Это свойство применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat: толщина текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: толщина текста. Может использоваться значение <codeph>FontWeight.NORMAL</codeph> для обычного текста или <codeph>FontWeight.BOLD</codeph> - для полужирного. Применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:format:get"><apiName>format</apiName><shortdesc> 
		 Сохраняет объект ITextLayoutFormat, содержащий атрибуты этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Сохраняет объект ITextLayoutFormat, содержащий атрибуты этого контейнера. Контроллер наследует свойства контейнера из TextFlow, частью которого он является. Это свойство позволяет различным контроллерам в одном текстовом потоке иметь, например, различные параметры настройки столбца или заполнение.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Определяет политику горизонтальной прокрутки, которую можно установить путем присвоения одной из констант класса ScrollPolicy: ON, OFF или AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Определяет политику горизонтальной прокрутки, которую можно установить путем присвоения одной из констант класса ScrollPolicy: ON, OFF или AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> Определяет текущее местоположение горизонтальной прокрутки в рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Определяет текущее местоположение горизонтальной прокрутки в рабочей области. Это значение определяет число пикселей слева.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:interactionManager:get"><apiName>interactionManager</apiName><shortdesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat: правило, используемое при выравнивании текста в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: правило, используемое для выравнивания текста в абзаце. Значением по умолчанию является <codeph>FormatValue.AUTO</codeph>, которое выравнивает текст согласно свойству абзаца <codeph>locale</codeph>. Для всех языков, кроме японского и китайского, <codeph>FormatValue.AUTO</codeph> получает значение <codeph>JustificationRule.SPACE</codeph>, которое добавляет к символу пробела дополнительное пространство. Для японского и китайского языков <codeph>FormatValue.AUTO</codeph> имеет значение <codeph>JustficationRule.EAST_ASIAN</codeph>. Выравнивание частично изменяет интервал между знаками пунктуации. Запятая и японская точка занимают в латинице целый символ, в то время как восточно-азиатском тексте – только половину символа. Кроме того, согласно традиции, в восточно-азиатском тексте интервал между знаками пунктуации должен быть уже, чем между остальными символами. В нижеприведенном примере обратите внимание также на интерлиньяж, который применяется ко второй строке абзаца. В восточноазиатской версии последние две строки смещаются вправо. В латинской версии вторая и последующие строки смещаются влево.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat: стиль, используемый для выравнивания абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: стиль используемый для выравнивания абзаца. Используется только вместе с параметром <codeph>justificationRule</codeph> для <codeph>JustificationRule.EAST_ASIAN</codeph>. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> относится к <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> для всех языковых стандартов. Константы, определяемые классом JustificationStyle, указывают параметры обработки символов кинсоку – японских символов, которые не должны появляться в начале и конце строк. Если необходимо получить более разреженный текст, укажите <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Если необходимо использовать поведение, подобное тому, что получается при использовании <codeph>justificationRule</codeph> <codeph>JustificationRule.SPACE</codeph>, укажите <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Допустимые значения: flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat: кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста. Кернинг поддерживается для всех шрифтов, имеющих таблицы кернинга.
		 <p>Допустимые значения: flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat: указывает модель межстрочного интервала, которая представляет собой комбинацию основы межстрочного интервала и направления межстрочного интервала.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа. Основа межстрочного интервала – это базовая линия, на которую ссылается свойство <codeph>lineHeight</codeph>. Направление межстрочного интервала определяет, относится ли свойство <codeph>lineHeight</codeph> к расстоянию от базовой линии строки до базовой линии строки, находящейся перед ней или за ней. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> определяется на основе свойства абзаца <codeph>locale</codeph>. Для японского и китайского языков значение равно <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>, для всех других языков – <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat: указывает, какая из лигатур, определенных в шрифте, может использоваться в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. Лигатуры для каждого из этих параметров зависят от шрифта. Лигатура возникает, когда две или более литеры объединяются в один глиф. Лигатуры обычно заменяют последовательные символы с общими компонентами, такие как пары букв «fi», «fl» или «ae». Они используются как с латинскими, так и с нелатинскими наборами символов. Лигатуры, активируемые значениями <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph> и <codeph>EXOTIC</codeph> являются аддитивными. Каждое значение активирует новый набор лигатур, при этом включая в себя все предыдущие типы.<p><b>Примечание.</b> При работе со шрифтами арабского или сирийского языка для <codeph>ligatureLevel</codeph> устанавливается значение MINIMUM или выше.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Допустимые значения: flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat: определяет перенос слов в контейнере (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управляет переносом слов в контейнере (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Текст в контейнере можно настроить по ширине контейнера (<codeph>LineBreak.TO_FIT</codeph>), либо установить разрыв только при наличии символов возврата каретки или символов перевода строки (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Допустимые значения: flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat: определяет межстрочные интервалы в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управление интерлиньяжем текста. Расстояние от базовой линии предыдущей или следующей строки (в зависимости от <codeph>LeadingModel</codeph>) до базовой линии текущей строки равно максимальному межстрочному интервалу, применяемому в отношении любого символа в строке. Значение выражается либо числом, либо процентом. При указании процента вводится строковое значение, например, 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Допустимые числовые значения – от -720 до 720.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat: если значение равно true, применяет перечеркивание, размещая линию посередине строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: если значение равно <codeph>true</codeph>, применяет перечеркивание, размещая линию посередине строки.
		 <p>Допустимыми значениями являются true, false и flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat: языковой стандарт текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: языковой стандарт текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы языкового стандарта, описанные в техническом стандарте Unicode #35. Например, en, en_US и en-US относятся к английскому, а ja – к японскому. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat: отступ снизу в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ снизу в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между нижним краем контейнера и текстом. Значение представляет собой число. <p> При горизонтальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в нижней части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat: отступ слева в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ слева в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между левым краем контейнера и текстом. Значение представляет собой число.<p> При вертикальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в конечной части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера, придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat: отступ справа в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ справа в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между правым краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat: отступ сверху в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ сверху в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между верхним краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину отступа для конца абзаца, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, указывающее величину отступа для правого края абзаца, в пикселях. Относится к правому краю в текстах, написанных слева направо, и к левому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого после абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого после абзаца. Сворачивается вместе с <codeph>paragraphSpaceBefore</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого перед абзацем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого перед абзацем. Сворачивается вместе с <codeph>paragraphSpaceAfter</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину отступа для начала абзаца, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, указывающее величину отступа для левого края абзаца, в пикселях. Относится к левому краю в текстах, написанных слева направо, и к правому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat: режим визуализации, используемый для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: режим визуализации, используемый для данного текста. Применяется только к встроенным шрифтам (для свойства <codeph>fontLookup</codeph> устанавливается значение <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Допустимые значения: flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Возвращает корневой элемент, отображаемый в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Возвращает корневой элемент, отображаемый в контейнере. Корневым элементом может быть, например, экземпляр DivElement или TextFlow.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>flashx.textLayout.elements.ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>flashx.textLayout.elements.DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat: указывает позиции табуляции, связанные с абзацем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает позиции табуляции, связанные с абзацем. Установщики могут принимать значения flashx.textLayout.formats.TabStopFormat, сжатое строковое представление, undefined или <codeph>FormatValue.INHERIT</codeph>. Сжатое строковое представление всегда преобразовывается в массив flashx.textLayout.formats.TabStopFormat. <p>Строковый формат представляет собой список позиций табуляции, где каждая точка табуляции отделена одним или несколькими пробелами.</p><p>Позиция табуляции принимает следующую форму: &lt;тип выравнивания>&lt;позиция выравнивания>|&lt;метка выравнивания >.</p><p>Тип выравнивания представляет собой одиночный символ и может иметь значение S, E, C или D (или эквиваленты нижнего регистра). S или s означает start, E или e – end, C или c – center, D или d – decimal. Тип выравнивания является необязательным параметром, и если он не определен, то по умолчанию принимается значение S.</p><p>Позиция выравнивания представляет собой число, и определяется в соответствии со спецификацией FXG для чисел (десятичное число или экспоненциальное представление). Позиция выравнивания является обязательным параметром.</p><p>Вертикальная черта используется для отделения позиции выравнивания от метки выравнивания, и используется только в случае, если имеется метка выравнивания. </p><p> Метка выравнивания не является обязательной при типе выравнивания D, и не должна присутствовать при типе выравнивания, отличном от D. Метка выравнивания может представлять собой любую последовательностью символов, прерываемых пробелом, оканчивающим позицию табуляции (для последней позиции табуляции завершающий пробел не является обязательным; здесь подразумевается конец метки выравнивания). Пробел может быть частью метки выравнивания, если он маскируется обратной косой чертой (\). Обратная косая черта может быть частью метки выравнивания, она маскируется другой обратной косой чертой (\\). Если используется тип выравнивания D, а метка выравнивания не указана, то она примет значение по умолчанию null.</p><p>Если позиции табуляции не определены, операция табуляции по умолчанию назначает конец строки.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat: выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте. Если для <codeph>textAlign</codeph> установлено значение <codeph>TextAlign.JUSTIFY</codeph>, то <codeph>textAlignLast</codeph>определяет способ выравнивания последней строки (или единственной строки, если блок состоит из одной строки). Значения подобны значениям <codeph>textAlign</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat: выравнивание строк в абзаце относительно контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: выравнивание строк в абзаце относительно контейнера. <codeph>TextAlign.LEFT</codeph> выравнивает строки по левому краю контейнера. <codeph>TextAlign.RIGHT</codeph> выравнивает строки по правому краю. <codeph>TextAlign.CENTER</codeph> помещает строку на равном расстоянии от левого и правого краев. <codeph>TextAlign.JUSTIFY</codeph> выравнивает строки по ширине контейнера. <codeph>TextAlign.START</codeph> эквивалентен установке left в тексте слева направо, или right в тексте справа налево. <codeph>TextAlign.END</codeph> эквивалентен установке right в тексте слева направо, или left в тексте справа налево.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для текста. При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение <codeph>textAlpha</codeph> равно 0, являются активными, несмотря на их невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat: оформление текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: оформление в тексте. Используется для подчеркивания текста; значение по умолчанию – none.
		 <p>Допустимые значения: flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Возвращает объект TextFlow, содержимое которого отображается в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Возвращает объект TextFlow, содержимое которого отображается в контейнере. Значения <codeph>textFlow</codeph> и <codeph>rootElement</codeph> либо являются одинаковыми, либо представляют собой объект корневого элемента TextFlow. Например, если корневым элементом контейнера является DivElement, то значение будет объектом TextFlow, к которому принадлежит DivElement.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину отступа первой строки абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, определяющее величину отступа первой строки абзаца в пикселях. Отрицательный отступ перенесет строку на поля или даже за границы контейнера.
		 <p>Допускаются значения и числа от -1000 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat: указывает параметры выравнивания текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает параметры выравнивания текста. Значением по умолчанию является <codeph>TextJustify.INTER_WORD</codeph>, что означает добавление дополнительного пробела к знакам пробела. <codeph>TextJustify.DISTRIBUTE</codeph> добавляет дополнительный пробел к знакам пробела и между отдельными буквами. Используется только вместе с <codeph>justificationRule</codeph> параметра <codeph>JustificationRule.SPACE</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textLength:get"><apiName>textLength</apiName><shortdesc> Возвращает общее количество символов в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Возвращает общее количество символов в контейнере. Если контейнер является прокручиваемым, он может содержать текст, не отображаемый в данный момент. Это значение обновляется при создании текста (при вызове методов IFlowComposer <codeph>compose()</codeph> или <codeph>updateAllControllers()</codeph>).
		 
	 	 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat: определяет угол поворота текста в градусах.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает число градусов для поворота данного текста.
		 <p>Допустимые значения: flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat: число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа. Если kerning включен, значение <codeph>trackingLeft</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingLeft</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat: число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа Если kerning включен, значение <codeph>trackingRight</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingRight</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat: тип регистра текста, используемый для этого текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип регистра, используемого для данного текста. Примеры:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:userStyles:get"><apiName>userStyles</apiName><shortdesc> 
		 Объект userStyles для экземпляра ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
		 Объект <codeph>userStyles</codeph> для экземпляра ContainerController. Получатель создает копию объекта <codeph>userStyles</codeph>, который является массивом пар <i>имя стиля-значение</i>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat: вертикальное выравнивание или выравнивание по ширине (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Определяет способ выравнивания элементов TextFlow в контейнере.
		 <p>Допустимые значения: flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> Определяет политику вертикальной прокрутки, устанавливаемую присвоением одной из констант класса ScrollPolicy: ON, OFF или AUTO.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Определяет политику вертикальной прокрутки, устанавливаемую присвоением одной из констант класса ScrollPolicy: ON, OFF или AUTO.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> Определяет текущее положение вертикальной прокрутки в рабочей области.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Определяет текущее положение вертикальной прокрутки в рабочей области. Это значение определяет расстояние в пикселях от верхнего края.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat: сокращает или сохраняет пробел при импорте текста в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: сворачивает или сохраняет пустое пространство при импорте текста в TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> сохраняет все символы пробела. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> удаляет символы новой строки, табуляции, а также начальные и концевые пробелы в блоке импортированного текста. Теги разрыва строк () и символы разделителя строк Unicode сохраняются.
		 <p>Допустимые значения: flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerControllerInitialFormat:set"><apiName>containerControllerInitialFormat</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>