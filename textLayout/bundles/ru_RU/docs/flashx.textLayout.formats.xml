<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.formats"><apiName>flashx.textLayout.formats</apiName><apiDetail/><apiClassifier id="flashx.textLayout.formats:ITabStopFormat"><apiName>ITabStopFormat</apiName><shortdesc>
	 Данный интерфейс предоставляет доступ для чтения свойств, связанных с позициями табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Данный интерфейс предоставляет доступ для чтения свойств, связанных с позициями табуляции.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 Выравнивание для данной позиции табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание для данной позиции табуляции. 
		 <p>Допустимыми значениями являются flash.text.engine.TabAlignment.START, flash.text.engine.TabAlignment.CENTER, flash.text.engine.TabAlignment.END, flash.text.engine.TabAlignment.DECIMAL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение START.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 Метка выравнивания, которую следует использовать, если выравнивание имеет значение DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Метка выравнивания, которую следует использовать, если выравнивание имеет значение DECIMAL.
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 Место позиции табуляции (в пикселях) относительно начала строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Место позиции табуляции (в пикселях) относительно начала строки.
		 <p>Допускаются значения и числа от 0 до 10000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Direction"><apiName>Direction</apiName><shortdesc>
	  Определяет значения для установки свойства direction класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для установки свойства <codeph>direction</codeph> класса <codeph>TextLayoutFormat</codeph>. Чтение слева направо используется в языках, основанных на латинской традиции письма. Чтение справа налево используется в языках, основанных на арабской и еврейской традиции письма.  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/direction"><linktext>TextLayoutFormat.direction</linktext></link></related-links><apiValue id="flashx.textLayout.formats:Direction:LTR"><apiName>LTR</apiName><shortdesc> Указывает для текста направление слева направо.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает для текста направление слева направо. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Direction:RTL"><apiName>RTL</apiName><shortdesc> Указывает для текста направление справа налево.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает для текста направление справа налево. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:VerticalAlign"><apiName>VerticalAlign</apiName><shortdesc>
	  Определяет значения для свойства verticalAlign класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для свойства <codeph>verticalAlign</codeph> класса TextLayoutFormat. Определяет выравнивание элементов TextFlow в контейнерах.  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/verticalAlign"><linktext>TextLayoutFormat.verticalAlign</linktext></link></related-links><apiValue id="flashx.textLayout.formats:VerticalAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc> Определяет выравнивание по нижней границе рамки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc> Определяет выравнивание по нижней границе рамки. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Определяет вертикальное выравнивание по ширине внутри рамки 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Определяет вертикальное выравнивание по ширине внутри рамки 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Определяет выравнивание по средней границе рамки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc> Определяет выравнивание по средней границе рамки. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:TOP"><apiName>TOP</apiName><shortdesc> Определяет выравнивание по верхней границе рамки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc> Определяет выравнивание по верхней границе рамки. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextDecoration"><apiName>TextDecoration</apiName><shortdesc>
	  Определяет значения для свойства textDecoration класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для свойства <codeph>textDecoration</codeph> класса TextLayoutFormat. Эти значения указывают вариант оформления: обычный текст без оформления, или текст с подчеркиванием.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textDecoration"><linktext>TextLayoutFormat.textDecoration</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextDecoration:NONE"><apiName>NONE</apiName><shortdesc> Указывает обычный текст – без оформления 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает обычный текст – без оформления 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextDecoration:UNDERLINE"><apiName>UNDERLINE</apiName><shortdesc> Указывает текст с подчеркиванием.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>underline</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает текст с подчеркиванием. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:JustificationRule"><apiName>JustificationRule</apiName><shortdesc>
	  Определяет значения для установки свойства justificationRule класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для установки свойства <codeph>justificationRule</codeph> класса TextLayoutFormat. Значением по умолчанию является SPACE, благодаря чему выравнивание выполняется посредством добавления пространства к символам пробела. При использовании EAST_ASIAN применяется японский стиль для межстрочного интервала, который отсчитывается от нижней части строки вниз в отличие от отсчета от верхней части строки вверх в латинской версии. Интервалы в пунктуации также отличаются. В латинской версии запятая и японские точки имеют полную ширину символа, а в восточноазиатской версии только половинную. Кроме того, интервал между последовательными знаками препинания становится более плотным, в соответствии с традиционными восточноазиатскими типографскими правилами. Также обратите внимание на интерлиньяж, использованный для второй строки абзаца в нижеприведенном примере. В восточноазиатской версии последние две строки смещаются вправо. В латинской версии вторая и последующие строки смещаются влево.
	  <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:JustificationRule:EAST_ASIAN"><apiName>EAST_ASIAN</apiName><shortdesc> Указывает восточноазиатские правила выравнивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>eastAsian</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает восточноазиатские правила выравнивания. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:JustificationRule:SPACE"><apiName>SPACE</apiName><shortdesc> Указывает выравнивание для латинских и других горизонтальных гарнитур, в которых слова отделяются пробелами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>space</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание для латинских и других горизонтальных гарнитур, в которых слова отделяются пробелами. Это значение не рекомендуется использовать для восточноазиатского текста.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextJustify"><apiName>TextJustify</apiName><shortdesc>
	  Определяет значения для установки свойства textJustify класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для установки свойства <codeph>textJustify</codeph> класса TextLayoutFormat. Значением по умолчанию является INTER_WORD. Это означает, что при выравнивании к символам пробела добавляются дополнительные пробелы. DISTRIBUTE указывает, что дополнительный пробел добавляется не только к символам пробела, но и между отдельными буквами. Эти значения рекомендуется использовать только при установке для <codeph>justificationRule</codeph> значения SPACE.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textJustify"><linktext>TextLayoutFormat.textJustify</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextJustify:DISTRIBUTE"><apiName>DISTRIBUTE</apiName><shortdesc> Указывает, что выравнивание производится путем увеличения расстояния не только в символах пробела, но и между отдельными буквами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>distribute</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что выравнивание производится путем увеличения расстояния не только в символах пробела, но и между отдельными буквами.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextJustify:INTER_WORD"><apiName>INTER_WORD</apiName><shortdesc> Указывает, что выравнивание производится путем увеличения символов пробела.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>interWord</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что выравнивание производится путем увеличения символов пробела. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TLFTypographicCase"><apiName>TLFTypographicCase</apiName><shortdesc>
	  Определяет значения для свойства typographicCase класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для свойства <codeph>typographicCase</codeph> класса TextLayoutFormat. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/typographicCase"><linktext>TextLayoutFormat.typographicCase</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TLFTypographicCase:CAPS_TO_SMALL_CAPS"><apiName>CAPS_TO_SMALL_CAPS</apiName><shortdesc> Указывает, что на выходе символы верхнего регистра используют капительные глифы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что на выходе символы верхнего регистра используют капительные глифы. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> Указывает регистр текста по умолчанию — без применения специальных функций.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает регистр текста по умолчанию – без применения специальных функций. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE_TO_SMALL_CAPS"><apiName>LOWERCASE_TO_SMALL_CAPS</apiName><shortdesc> Преобразует все буквы нижнего регистра в буквы верхнего регистра, затем изменяет на малые прописные буквы только те прописные буквы, которых коснулось это преобразование.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercaseToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Преобразует все буквы нижнего регистра в буквы верхнего регистра, затем изменяет на малые прописные буквы только те прописные буквы, которых коснулось это преобразование. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> Указывает, что на выходе все символы используют глифы нижнего регистра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что на выходе все символы используют глифы нижнего регистра. 
  	 	 
  	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> Указывает, что на выходе все символы используют глифы верхнего регистра.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что на выходе все символы используют глифы верхнего регистра.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineShift"><apiName>BaselineShift</apiName><shortdesc>
	  Определяет константы для подстрочного или надстрочного индекса в свойстве baselineShift класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет константы для подстрочного и надстрочного индекса в свойстве <codeph>baselineShift</codeph> класса <codeph>TextLayoutFormat</codeph>. Смещение базовой линии можно указать как абсолютное смещение в пикселях, как процент от текущего размера кегля или как константу SUPERSCRIPT или SUBSCRIPT. Положительные значения сдвигают строку вверх для горизонтального текста (вправо для вертикального), а отрицательные значения сдвигают ее вниз для горизонтального текста (влево для вертикального). 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/baselineShift"><linktext>TextLayoutFormat.baselineShift</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineShift:SUBSCRIPT"><apiName>SUBSCRIPT</apiName><shortdesc> Сдвигает базовую линию на текущую позицию подстрочного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Сдвигает базовую линию на текущую позицию подстрочного индекса.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineShift:SUPERSCRIPT"><apiName>SUPERSCRIPT</apiName><shortdesc> Сдвигает базовую линию на текущую позицию надстрочного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>superscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Сдвигает базовую линию на текущую позицию надстрочного индекса.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
	 Класс TabStopFormat представляет свойства позиции табуляции в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс TabStopFormat представляет свойства позиции табуляции в абзаце. В качестве значений свойства <codeph>TextLayoutFormat.tabstops</codeph> можно установить массив объектов TabStopFormat.
	 </apiDesc><example conref="examples\TabStopFormat_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TabElement"><linktext>flashx.textLayout.elements.TabElement</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.TextLayoutFormat.tabStops</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TabStopFormat:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
		 Создает новый объект TabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>дополнительный экземпляр, из которого копируются начальные значения.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает новый объект TabStopFormat. Все параметры настройки имеют пустые значения или, дополнительно, инициализируются из предоставляемого объекта <codeph>initialValues</codeph>.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TabStopFormat:apply"><apiName>apply</apiName><shortdesc>
		 Заменяет значения свойств в данном объекте TabStopFormat значениями свойств, установленными во входящем экземпляре ITabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр, значения свойств которого применяются к данному объекту TabStopFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Заменяет значения свойств в данном объекте TabStopFormat значениями свойств, установленными в экземпляре ITabStopFormat <codeph>incoming</codeph>. Свойства, имеющие значения <codeph>undefined</codeph> в экземпляре <codeph>incoming</codeph> ITabStopFormat, в этом объекте не изменяются.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Конкатенирует значения свойств во входящем экземпляре ITabStopFormat со значениями этого объекта TabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр, из которого конкатенируются значения.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Конкатенирует значения свойств в экземпляре ITabStopFormat <codeph> incoming </codeph> со значениями этого объекта TabStopFormat. В этом (принимающем) объекте TabStopFormat свойства со значением <codeph>FormatValue.INHERIT</codeph> и наследующие свойства со значением <codeph>undefined</codeph> получают новые значения от поступающего объекта <codeph>incoming</codeph>. Все остальные значения свойств остаются без изменения.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concat"><apiName>concat</apiName><shortdesc>
		 Конкатенирует значения свойств во входящем экземпляре ITabStopFormat со значениями этого объекта TabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр, из которого конкатенируются значения.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Конкатенирует значения свойств в экземпляре ITabStopFormat <codeph> incoming </codeph> со значениями этого объекта TabStopFormat. В этом (принимающем) объекте TabStopFormat свойства со значением <codeph>FormatValue.INHERIT</codeph> и наследующие свойства со значением <codeph>undefined</codeph> получают новые значения от поступающего объекта <codeph>incoming</codeph>. Ненаследующие свойства со значением <codeph>undefined</codeph> получают соответствующие значения по умолчанию. Все остальные значения свойств остаются без изменения.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:copy"><apiName>copy</apiName><shortdesc>
		 Копирует параметры настройки TabStopFormat из values экземпляра ITabStopFormat в этот объект TabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Дополнительный экземпляр, из которого копируются значения.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Копирует параметры настройки TabStopFormat из <codeph>values</codeph> экземпляра ITabStopFormat в этот объект TabStopFormat. Если <codeph>values</codeph> равно <codeph>null</codeph>, то данный объект TabStopFormat инициализируется с неопределенными значениями всех свойств.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Сравнивает свойства в экземпляре ITabStopFormat p1 со свойствами в экземпляре ITabStopFormat p2 и возвращает true, если все свойства совпадают.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true, если все свойства совпадают, false в противном случае.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр для сравнения с <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр для сравнения с <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Сравнивает свойства в экземпляре ITabStopFormat <codeph>p1</codeph> со свойствами в экземпляре ITabStopFormat <codeph>p2</codeph> и возвращает <codeph>true</codeph>, если все свойства совпадают.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Устанавливает свойства в данном объекте TabStopFormat на значение undefined, если свойства не соответствуют свойствам в экземпляре ITabStopFormat incoming.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр, со свойствами которого выполняется сравнение значений свойств данного объекта TabStopFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Устанавливает свойства в данном объекте TabStopFormat на значение <codeph>undefined</codeph>, если свойства не соответствуют свойствам в экземпляре ITabStopFormat <codeph>incoming</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Устанавливает свойства в данном объекте TabStopFormat на значение undefined, если свойства соответствуют свойствам в экземпляре ITabStopFormat incoming.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>экземпляр, со свойствами которого выполняется сравнение значений свойств данного объекта TabStopFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Устанавливает свойства в данном объекте TabStopFormat на значение <codeph>undefined</codeph>, если свойства соответствуют свойствам в экземпляре ITabStopFormat <codeph>incoming</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 Выравнивание для данной позиции табуляции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание для данной позиции табуляции. 
		 <p>Допустимыми значениями являются flash.text.engine.TabAlignment.START, flash.text.engine.TabAlignment.CENTER, flash.text.engine.TabAlignment.END, flash.text.engine.TabAlignment.DECIMAL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение START.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 Метка выравнивания, которую следует использовать, если выравнивание имеет значение DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Метка выравнивания, которую следует использовать, если выравнивание имеет значение DECIMAL.
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Возвращает объект TabStopFormat с настройками по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITabStopFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Возвращает объект TabStopFormat с настройками по умолчанию. Эта функция всегда возвращает один и тот же объект.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 Место позиции табуляции (в пикселях) относительно начала строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Место позиции табуляции (в пикселях) относительно начала строки.
		 <p>Допускаются значения и числа от 0 до 10000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:FormatValue"><apiName>FormatValue</apiName><shortdesc>
	  Указывает значения для определения того, что свойство форматирования наследует вышестоящее значение или генерирует это значение автоматически.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Указывает значения для определения того, что свойство форматирования наследует вышестоящее значение или генерирует это значение автоматически. Константа <codeph>INHERIT</codeph> указывает, что свойство наследует значение вышестоящего элемента, тогда как константа <codeph>AUTO</codeph> указывает, что значение свойства определяется автоматически по внутреннему алгоритму. Таким образом, с помощью этих значений можно установить значение свойства <codeph>TextLayoutFormat.columnWidth</codeph>. Как правило, в описании свойства указано, принимает ли оно эти константы.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>TextLayoutFormat</linktext></link></related-links><apiValue id="flashx.textLayout.formats:FormatValue:AUTO"><apiName>AUTO</apiName><shortdesc> Указывает, что значение свойства генерируется автоматически.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что значение свойства генерируется автоматически. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:INHERIT"><apiName>INHERIT</apiName><shortdesc> Указывает, что свойство должно наследовать значение вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inherit</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что свойство должно наследовать значение вышестоящего элемента.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextAlign"><apiName>TextAlign</apiName><shortdesc>
	  Определяет значения для установки свойств textAlign и textAlignLast класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для установки свойств <codeph>textAlign</codeph> и <codeph>textAlignLast</codeph> класса TextLayoutFormat. Значения описывают выравнивание строк в абзаце относительно контейнера.
	 
	 </apiDesc><example conref="examples\TextAlignExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlign"><linktext>TextLayoutFormat.textAlign</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlignLast"><linktext>TextLayoutFormat.textAlignLast</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextAlign:CENTER"><apiName>CENTER</apiName><shortdesc> Указывает выравнивание по центру внутри контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание по центру внутри контейнера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:END"><apiName>END</apiName><shortdesc> Указывает выравнивание по конечному краю – текст выравнивается в направлении, противоположном порядку записи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание по конечному краю – текст выравнивается в направлении, противоположном порядку записи. Это эквивалентно указанию right для текста, записываемого слева направо, или left для текста, записываемого справа налево. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Указывает выравнивание текста внутри строк, при котором они заполняют пространство контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание текста внутри строк, при котором они заполняют пространство контейнера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:LEFT"><apiName>LEFT</apiName><shortdesc> Указывает выравнивание по левому краю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание по левому краю. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc> Указывает выравнивание по правому краю.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание по правому краю. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:START"><apiName>START</apiName><shortdesc> Указывает выравнивание по начальному краю – текст выравнивается в соответствии с порядком записи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает выравнивание по начальному краю – текст выравнивается в соответствии с порядком записи. Это эквивалентно установке left для текстов, записываемых слева направо, или right для текстов, записываемых справа налево.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
	 Класс TextLayoutFormat содержит все свойства форматирования текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс TextLayoutFormat содержит все свойства форматирования текста. Эти свойства воздействуют на формат и стиль текстового потока на уровне контейнера, на уровне абзаца и на текстовом уровне. Класс ContainerController и базовый класс FlowElement имеют свойство <codeph>format</codeph>, которое можно присвоить экземпляру TextLayoutFormat. Присвоение объекта TextLayoutFormat контейнеру оказывает воздействие на формат всего содержимого контейнера. Присвоение объекта TextLayoutFormat одному из нижестоящих элементов элемента FlowElement определяет форматирование данного конкретного элемента: TextFlow, ParagraphElement, DivElement, SpanElement, InlineGraphicElement, LinkElement и TCYElement. В дополнение к свойству <codeph>format</codeph> данные классы также определяют каждое из отдельных свойств TextLayoutFormat таким образом, что в случае необходимости можно отменить установку определенного свойства стиля для соответствующего элемента. <p>Поскольку установка стиля допускается на нескольких уровнях, вероятно возникновение конфликтов. Например, на уровне TextFlow мог быть установлен черный цвет текста, в то время как в объекте SpanElement для текста указан синий цвет. Общее правило заключается в том, что наивысший приоритет имеет установка, выполненная на самом низком уровне дерева текстового потока. Таким образом, если уровень лигатуры установлен для экземпляра TextFlow, а также для DivElement, приоритет имеет значение уровня лигатуры для DivElement. </p><p>Каскадирование стилей представляет собой процесс использования стилей верхнего уровня текстового потока в случае, если значение стиля на нижнем уровне не определено. Если стиль в элементе не определен в точке, предшествующей визуализации, то он принимает или значение по умолчанию или значение, спускаемое каскадом или наследуемое из значения вышестоящего элемента. Например, если прозрачность (свойство <codeph>textAlpha</codeph>) текста не определена для объекта SpanElement, но установлена в TextFlow, значение свойства <codeph>TextFlow.textAlpha</codeph> спускается каскадом объекту SpanElement и применяется к тексту данного фрагмента. Результат каскада или сумма стилей, примененных к элементу, хранится в свойстве элемента <codeph>computedFormat</codeph>.</p><p>Таким же образом можно применить стили пользователя с помощью свойства <codeph>userStyles</codeph> классов ContainerController и FlowElement. Это свойство позволяет считать или записать словарь стилей пользователя и применить его параметры настройки к контейнеру или элементу текстового потока. Словарь стилей пользователя представляет собой объект, состоящий из пар <i>имя_стиля-значение</i>. Стили, определяемые свойством <codeph>userStyles</codeph>, имеют приоритет над всеми другими стилями.</p><p>Большинство неопределенных стилей в процессе каскада наследует значение своего непосредственного вышестоящего элемента. Однако некоторые стили не наследуют значения, а используют вместо этого значения по умолчанию.</p><p><b>Свойства стилей, которые принимают значения по умолчанию, если являются неопределенными, включают в себя:</b> <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>columnCount</codeph>, <codeph>columnGap</codeph>, <codeph>columnWidth</codeph>, <codeph>lineBreak</codeph>, <codeph>paddingBottom</codeph>, <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph>, <codeph>verticalAlign</codeph></p>.
	 </apiDesc><example conref="examples\TextLayoutFormatExample.as"/><example conref="examples\TextLayoutFormatExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/format"><linktext>flashx.textLayout.elements.FlowElement.format</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>flashx.textLayout.factory.TextFlowTextLineFactory</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TextLayoutFormat:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
		 Создает новый объект TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>дополнительный экземпляр, из которого копируются начальные значения.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Создает новый объект TextLayoutFormat. Все параметры настройки имеют пустые значения или, дополнительно, инициализируются из предоставляемого объекта <codeph>initialValues</codeph>.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:apply"><apiName>apply</apiName><shortdesc>
		 Заменяет значения свойств в данном объекте TextLayoutFormat значениями свойств, установленными во входящем экземпляре ITextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр, значения свойств которого применяются к данному объекту TextLayoutFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Заменяет значения свойств в данном объекте TextLayoutFormat значениями свойств, установленными во <codeph>входящем</codeph> экземпляре ITextLayoutFormat. Свойства, имеющие значение <codeph>undefined</codeph> во <codeph>входящем</codeph> экземпляре ITextLayoutFormat, в данном объекте не изменяются.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_applyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Конкатенирует значения свойств во входящем экземпляре ITextLayoutFormat со значениями свойств данного объекта TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр, из которого конкатенируются значения.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Конкатенирует значения свойств во <codeph>входящем</codeph> экземпляре ITextLayoutFormat со значениями свойств данного объекта TextLayoutFormat. В этом (принимающем) объекте TextLayoutFormat свойства со значением <codeph>FormatValue.INHERIT</codeph> и наследующие свойства со значением <codeph>undefined</codeph> получают новые значения от поступающего объекта <codeph>incoming</codeph>. Все остальные значения свойств остаются без изменения.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatInheritOnlyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concat"><apiName>concat</apiName><shortdesc>
		 Конкатенирует значения свойств во входящем экземпляре ITextLayoutFormat со значениями свойств данного объекта TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр, из которого конкатенируются значения.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Конкатенирует значения свойств во <codeph>входящем</codeph> экземпляре ITextLayoutFormat со значениями свойств данного объекта TextLayoutFormat. В этом (принимающем) объекте TextLayoutFormat свойства со значением <codeph>FormatValue.INHERIT</codeph> и наследующие свойства со значением <codeph>undefined</codeph> получают новые значения от поступающего объекта <codeph>incoming</codeph>. Ненаследующие свойства со значением <codeph>undefined</codeph> получают соответствующие значения по умолчанию. Все остальные значения свойств остаются без изменения.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:copy"><apiName>copy</apiName><shortdesc>
		 Копирует параметры настройки TextLayoutFormat из values экземпляра ITextLayoutFormat в данный объект TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Дополнительный экземпляр, из которого копируются значения.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Копирует параметры настройки TextLayoutFormat из <codeph>values</codeph> экземпляра ITextLayoutFormat в данный объект TextLayoutFormat. Если <codeph>values</codeph> равно <codeph>null</codeph>, то данный объект TextLayoutFormat инициализируется с неопределенными значениями всех свойств.
		 </apiDesc><example conref="examples\TextLayoutFormat_copyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Сравнивает свойства в экземпляре ITextLayoutFormat p1 со свойствами в экземпляре ITextLayoutFormat p2 и возвращает true, если все свойства совпадают.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>true, если все свойства совпадают, false в противном случае.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр для сравнения с <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр для сравнения с <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Сравнивает свойства в экземпляре ITextLayoutFormat <codeph>p1</codeph> со свойствами в экземпляре ITextLayoutFormat <codeph>p2</codeph> и возвращает <codeph>true</codeph>, если все свойства совпадают.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Устанавливает для свойств в данном объекте TextLayoutFormat значения undefined, если свойства не соответствуют свойствам во входящем экземпляре ITextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр, со свойствами которого выполняется сравнение значений свойств данного объекта TextLayoutFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Устанавливает для свойств в данном объекте TextLayoutFormat значения <codeph>undefined</codeph>, если свойства не соответствуют свойствам во <codeph>входящем</codeph> экземпляре ITextLayoutFormat.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeClashingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Устанавливает для свойств в данном объекте TextLayoutFormat значения undefined, если свойства не соответствуют свойствам во входящем экземпляре ITextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>экземпляр, со свойствами которого выполняется сравнение значений свойств данного объекта TextLayoutFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Устанавливает для свойств в данном объекте TextLayoutFormat значения <codeph>undefined</codeph>, если свойства не соответствуют свойствам во <codeph>входящем</codeph> экземпляре ITextLayoutFormat.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeMatchingExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Указывает базовую линию, по которой выравнивается основная базовая линия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает базовую линию, по которой выравнивается основная базовая линия. Например, если значение <codeph>dominantBaseline</codeph> установлено на ASCENT, то установка <codeph>alignmentBaseline</codeph> на DESCENT выравнивает верхнюю границу текста по базовой линии DESCENT или под строкой. Как правило, базовые линии определяет наибольший элемент в строке.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимыми значениями являются flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение alpha равно 0, являются активными, несмотря на невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). Может иметь либо постоянное значение <codeph>BackgroundColor.TRANSPARENT</codeph>, либо шестнадцатеричное значение, задающее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого.
		 <p>Допустимые строковые значения – flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT, а также uints от 0x0 до 0xffffffff.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Значение сдвига базовой линии относительно значения dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Значение сдвига базовой линии относительно значения <codeph>dominantBaseline</codeph>. Единицей измерения являются пиксели или процент от <codeph>fontSize</codeph> (в этом случае вводится строковое значение, например, 140%). Положительные значения сдвигают строку вверх для горизонтального текста (вправо для вертикального), а отрицательные значения сдвигают ее вниз для горизонтального текста (влево для вертикального). 
		 <p>Допустимые значения: flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Допустимые числовые значения – от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Определяет вертикальное или горизонтальное размещение строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Определяет вертикальное или горизонтальное размещение строки. Строки располагаются либо сверху вниз <codeph>BlockProgression.TB</codeph> (используется для горизонтального текста), либо справа налево <codeph>BlockProgression.RL</codeph> (используется для вертикального текста).
		 <p>Допустимые значения: flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Управляет местом разрыва строк при форматировании текста по размеру окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управляет местом разрыва строк при форматировании текста по размеру окна. Установите значение <codeph>BreakOpportunity.AUTO</codeph> для стандартного разрыва строк. Установите значение <codeph>BreakOpportunity.NONE</codeph> для <i>предотвращения</i> разрыва строк до тех пор, пока текст не превысит допустимых размеров, при этом в самом тексте будут отсутствовать заданные места разрыва. Установите значение <codeph>BreakOpportunity.ANY</codeph> для разрешения разрыва строки в любом месте, не только между словами. Установите значение <codeph>BreakOpportunity.ALL</codeph>, чтобы каждая группа символов находилась в отдельной строке (рекомендуется использовать для путей к файлам).
		 <p>Допустимые значения: flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 Тип используемого для текста хинтинга CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип используемого для текста хинтинга CFF. Тип подсказки CFF определяет, будет ли среда выполнения Flash в принудительном порядке привязывать жирные горизонтальные основы к субпиксельной сетке. Это свойство применяется только в том случае, если для свойства <codeph>renderingMode</codeph> установлено значение <codeph>RenderingMode.CFF</codeph>, и используется встроенный шрифт (для свойства <codeph>fontLookup</codeph> установлено значение <codeph>FontLookup.EMBEDDED_CFF</codeph>). На экранах небольшого размера хинтинг создает для читателей четкий и удобочитаемый текст.
		 <p>Допустимые значения: flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Цвет текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Цвет текста. Шестнадцатеричное число, содержащее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Число текстовых столбцов (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число текстовых столбцов (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Количество столбцов отменяет другие параметры настройки столбца. Значение представляет собой целое число или <codeph>FormatValue.AUTO</codeph>, если не указано. Если <codeph>columnCount</codeph> не указан, то <codeph>columnWidth</codeph> используется для создания максимального количества столбцов в контейнере.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также с ints от 1 до 50.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Указывает размер средника между колонками в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает размер средника между колонками в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Значение представляет собой число
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Если указана ширина столбцов, но не указано их количество, то TextLayout создает максимально возможное количество столбцов этой ширины при заданной ширине контейнера и настройке <codeph>columnGap</codeph>. Все оставшееся пространство будет располагаться за последним столбцом. Значение представляет собой число.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также числа от 0 до 8000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Возвращает объект TextLayoutFormat с настройками по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Возвращает объект TextLayoutFormat с настройками по умолчанию. Эта функция всегда возвращает один и тот же объект.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 Тип регистра цифр, используемого для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип регистра цифр, используемого для текста. Установка значения на <codeph>DigitCase.OLD_STYLE</codeph> позволяет изменить размер букв на примерно соответствующий размеру строчных букв в нижнем или верхнем регистрах. Цифры располагаются пропорционально. Этот стиль доступен только в некоторых шрифтах, обычно в дополнительном или экспертном шрифте. Параметр <codeph>DigitCase.LINING</codeph> определяет высоту верхнего регистра, обычно является моноширинным и служит для выравнивания текста в диаграммах.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Допустимые значения: flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Тип ширины цифр, используемых для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип ширины цифр, используемых для текста. Может иметь значение <codeph>DigitWidth.PROPORTIONAL</codeph>, которое рекомендуется использовать для отдельных чисел, или <codeph>DigitWidth.TABULAR</codeph>, используемое для чисел в таблицах, диаграммах и вертикальных строках.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Допустимые значения: text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Задает уровень двунаправленной вложенности текста в блоке по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Задает уровень двунаправленной вложенности текста в блоке по умолчанию. Направление чтения слева направо, как в сценариях с латинским стилем, или справа налево, как в сценариях с арабским или еврейским. Это свойство также влияет на направление столбца, когда оно применяется на уровне контейнера. Столбцы могут быть расположены либо слева направо, либо справа налево, так же, как и текст. Примеры:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Указывает, какая из базовых линий элемента привязывается к alignmentBaseline для определения позиции элемента в строке по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения позиции элемента в строке по вертикали. Значение <codeph>TextBaseline.AUTO</codeph> выделяет доминирующую базовую линию, основывающуюся на свойстве <codeph>locale</codeph> вышестоящего абзаца. Для японского и китайского языков значением выделенной базовой линией является <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; для всех других - <codeph>TextBaseline.ROMAN</codeph>. Этот выбор базовых линий определяется выбором типа и размера шрифта.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Указывает позицию базовой линии первой строки в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает позицию базовой линии первой строки в контейнере. Базовая линия, к которой относится это свойство, зависит от языкового стандарта на уровне контейнера. Для японского и китайского языка это – <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; для всех других языков – <codeph>TextBaseline.ROMAN</codeph>. Смещение от верхнего отступа (или правого отступа, если <codeph>blockProgression</codeph> имеет значение RL) контейнера до базовой линии первой строки может иметь значение <codeph>BaselineOffset.ASCENT</codeph>, что означает равное подъему строки, либо <codeph>BaselineOffset.LINE_HEIGHT</codeph>, что означает равное высоте этой первой строки, либо любое фиксированное число для указания абсолютного расстояния. Значение <codeph>BaselineOffset.AUTO</codeph> выравнивает подъем строки по верхнему отступу контейнера.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Допустимые строковые значения: flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT и числа от 0 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  Имя используемого шрифта или разделенный запятой список имен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  Имя используемого шрифта или разделенный запятой список имен. Среда выполнения Flash визуализирует элемент с помощью первого доступного шрифта в списке. Например, если задать Arial, Helvetica, _sans, то проигрыватель сначала выполняет поиск Arial, затем Helvetica, если Arial не обнаружен, а потом _sans, если не обнаружен ни тот, ни другой.
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Поиск используемых шрифтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Поиск используемых шрифтов. При указании <codeph>FontLookup.DEVICE</codeph> используются шрифты, установленные в системе, в которой выполняется SWF-файл. Использование шрифтов устройства сокращает размер ролика, но в различных системах и платформах текст не всегда отображается одинаково. При указании <codeph>FontLookup.EMBEDDED_CFF</codeph> используются контуры шрифтов, встроенные в опубликованный SWF-файл. Встроенные шрифты увеличивают размер файла SWF (иногда значительно), но текст в выбранном шрифте отображается последовательно.
		 <p>Допустимые значения: flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 Размер текста в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Размер текста в пикселях.
		 <p>Допускаются значения и числа от 1 до 720, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Стиль текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Стиль текста. Можно использовать значение <codeph>FontPosture.NORMAL</codeph> для обычного текста или <codeph>FontPosture.ITALIC</codeph> для курсивного. Это свойство применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Толщина текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Толщина текста. Может использоваться значение <codeph>FontWeight.NORMAL</codeph> для обычного текста или <codeph>FontWeight.BOLD</codeph> - для полужирного. Применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Правило, используемое для выравнивания текста в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Правило, используемое для выравнивания текста в абзаце. Значением по умолчанию является <codeph>FormatValue.AUTO</codeph>, которое выравнивает текст согласно свойству абзаца <codeph>locale</codeph>. Для всех языков, кроме японского и китайского, <codeph>FormatValue.AUTO</codeph> получает значение <codeph>JustificationRule.SPACE</codeph>, которое добавляет к символу пробела дополнительное пространство. Для японского и китайского языков <codeph>FormatValue.AUTO</codeph> имеет значение <codeph>JustficationRule.EAST_ASIAN</codeph>. Выравнивание частично изменяет интервал между знаками пунктуации. Запятая и японская точка занимают в латинице целый символ, в то время как восточно-азиатском тексте – только половину символа. Кроме того, согласно традиции, в восточно-азиатском тексте интервал между знаками пунктуации должен быть уже, чем между остальными символами. В нижеприведенном примере обратите внимание также на интерлиньяж, который применяется ко второй строке абзаца. В восточноазиатской версии последние две строки смещаются вправо. В латинской версии вторая и последующие строки смещаются влево.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 Стиль, используемый для выравнивания абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Стиль, используемый для выравнивания абзаца. Используется только вместе с параметром <codeph>justificationRule</codeph> для <codeph>JustificationRule.EAST_ASIAN</codeph>. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> относится к <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> для всех языковых стандартов. Константы, определяемые классом JustificationStyle, указывают параметры обработки символов кинсоку – японских символов, которые не должны появляться в начале и конце строк. Если необходимо получить более разреженный текст, укажите <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Если необходимо использовать поведение, подобное тому, что получается при использовании <codeph>justificationRule</codeph> <codeph>JustificationRule.SPACE</codeph>, укажите <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Допустимые значения: flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста. Кернинг поддерживается для всех шрифтов, имеющих таблицы кернинга.
		 <p>Допустимые значения: flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа. Основа межстрочного интервала – это базовая линия, на которую ссылается свойство <codeph>lineHeight</codeph>. Направление межстрочного интервала определяет, относится ли свойство <codeph>lineHeight</codeph> к расстоянию от базовой линии строки до базовой линии строки, находящейся перед ней или за ней. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> определяется на основе свойства абзаца <codeph>locale</codeph>. Для японского и китайского языков значение равно <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>, для всех других языков – <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. Лигатуры для каждого из этих параметров зависят от шрифта. Лигатура возникает, когда две или более литеры объединяются в один глиф. Лигатуры обычно заменяют последовательные символы с общими компонентами, такие как пары букв «fi», «fl» или «ae». Они используются как с латинскими, так и с нелатинскими наборами символов. Лигатуры, активируемые значениями <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph> и <codeph>EXOTIC</codeph> являются аддитивными. Каждое значение активирует новый набор лигатур, при этом включая в себя все предыдущие типы.<p><b>Примечание.</b> При работе со шрифтами арабского или сирийского языка для <codeph>ligatureLevel</codeph> устанавливается значение MINIMUM или выше.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Допустимые значения: flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Управляет переносом слов в контейнере (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управляет переносом слов в контейнере (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Текст в контейнере можно настроить по ширине контейнера (<codeph>LineBreak.TO_FIT</codeph>), либо установить разрыв только при наличии символов возврата каретки или символов перевода строки (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Допустимые значения: flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Управление интерлиньяжем текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управление интерлиньяжем текста. Расстояние от базовой линии предыдущей или следующей строки (в зависимости от <codeph>LeadingModel</codeph>) до базовой линии текущей строки равно максимальному межстрочному интервалу, применяемому в отношении любого символа в строке. Значение выражается либо числом, либо процентом. При указании процента вводится строковое значение, например, 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Допустимые числовые значения – от -720 до 720.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 Если значение равно true, применяет перечеркивание, размещая линию посередине строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Если значение равно <codeph>true</codeph>, применяет перечеркивание, размещая линию посередине строки.
		 <p>Допустимыми значениями являются true, false и flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 Языковой стандарт текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Языковой стандарт текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы языкового стандарта, описанные в техническом стандарте Unicode #35. Например, en, en_US и en-US относятся к английскому, а ja – к японскому. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Отступ снизу в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ снизу в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между нижним краем контейнера и текстом. Значение представляет собой число. <p> При горизонтальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в нижней части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Отступ слева в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ слева в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между левым краем контейнера и текстом. Значение представляет собой число.<p> При вертикальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в конечной части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера, придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Отступ справа в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ справа в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между правым краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Отступ сверху в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ сверху в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между верхним краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 Число, указывающее величину отступа для правого края абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, указывающее величину отступа для правого края абзаца в пикселях. Относится к правому краю в текстах, написанных слева направо, и к левому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 Число, определяющее величину интервала после абзаца, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, определяющее величину интервала после абзаца, в пикселях. Сворачивается вместе с <codeph>paragraphSpaceBefore</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 Число, указывающее величину интервала перед абзацем, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, указывающее величину интервала перед абзацем, в пикселях. Сворачивается вместе с <codeph>paragraphSpaceAfter</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 Число, указывающее величину отступа для левого края абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, указывающее величину отступа для левого края абзаца в пикселях. Относится к левому краю в текстах, написанных слева направо, и к правому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 Режим визуализации, используемый для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Режим визуализации, используемый для данного текста. Применяется только к встроенным шрифтам (для свойства <codeph>fontLookup</codeph> устанавливается значение <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Допустимые значения: flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Указывает позиции табуляции, связанные с абзацем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает позиции табуляции, связанные с абзацем. Установщики могут принимать значения flashx.textLayout.formats.TabStopFormat, сжатое строковое представление, undefined или <codeph>FormatValue.INHERIT</codeph>. Сжатое строковое представление всегда преобразовывается в массив flashx.textLayout.formats.TabStopFormat. <p>Строковый формат представляет собой список позиций табуляции, где каждая точка табуляции отделена одним или несколькими пробелами.</p><p>Позиция табуляции принимает следующую форму: &lt;тип выравнивания>&lt;позиция выравнивания>|&lt;метка выравнивания >.</p><p>Тип выравнивания представляет собой одиночный символ и может иметь значение S, E, C или D (или эквиваленты нижнего регистра). S или s означает start, E или e – end, C или c – center, D или d – decimal. Тип выравнивания является необязательным параметром, и если он не определен, то по умолчанию принимается значение S.</p><p>Позиция выравнивания представляет собой число, и определяется в соответствии со спецификацией FXG для чисел (десятичное число или экспоненциальное представление). Позиция выравнивания является обязательным параметром.</p><p>Вертикальная черта используется для отделения позиции выравнивания от метки выравнивания, и используется только в случае, если имеется метка выравнивания. </p><p> Метка выравнивания не является обязательной при типе выравнивания D, и не должна присутствовать при типе выравнивания, отличном от D. Метка выравнивания может представлять собой любую последовательностью символов, прерываемых пробелом, оканчивающим позицию табуляции (для последней позиции табуляции завершающий пробел не является обязательным; здесь подразумевается конец метки выравнивания). Пробел может быть частью метки выравнивания, если он маскируется обратной косой чертой (\). Обратная косая черта может быть частью метки выравнивания, она маскируется другой обратной косой чертой (\\). Если используется тип выравнивания D, а метка выравнивания не указана, то она примет значение по умолчанию null.</p><p>Если позиции табуляции не определены, операция табуляции по умолчанию назначает конец строки.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте. Если для <codeph>textAlign</codeph> установлено значение <codeph>TextAlign.JUSTIFY</codeph>, то <codeph>textAlignLast</codeph>определяет способ выравнивания последней строки (или единственной строки, если блок состоит из одной строки). Значения подобны значениям <codeph>textAlign</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Выравнивание строк в абзаце относительно контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание строк в абзаце относительно контейнера. <codeph>TextAlign.LEFT</codeph> выравнивает строки по левому краю контейнера. <codeph>TextAlign.RIGHT</codeph> выравнивает строки по правому краю. <codeph>TextAlign.CENTER</codeph> помещает строку на равном расстоянии от левого и правого краев. <codeph>TextAlign.JUSTIFY</codeph> выравнивает строки по ширине контейнера. <codeph>TextAlign.START</codeph> эквивалентен установке left в тексте слева направо, или right в тексте справа налево. <codeph>TextAlign.END</codeph> эквивалентен установке right в тексте слева направо, или left в тексте справа налево.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Альфа-значение (прозрачности) для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Альфа-значение (прозрачности) для текста. При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение <codeph>textAlpha</codeph> равно 0, являются активными, несмотря на их невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Оформление в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Оформление в тексте. Используется для подчеркивания текста; значение по умолчанию – none.
		 <p>Допустимые значения: flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 Число, определяющее величину отступа первой строки абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, определяющее величину отступа первой строки абзаца в пикселях. Отрицательный отступ перенесет строку на поля или даже за границы контейнера.
		 <p>Допускаются значения и числа от -1000 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Указывает параметры выравнивания текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает параметры выравнивания текста. Значением по умолчанию является <codeph>TextJustify.INTER_WORD</codeph>, что означает добавление дополнительного пробела к знакам пробела. <codeph>TextJustify.DISTRIBUTE</codeph> добавляет дополнительный пробел к знакам пробела и между отдельными буквами. Используется только вместе с <codeph>justificationRule</codeph> параметра <codeph>JustificationRule.SPACE</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Указывает число градусов для поворота данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает число градусов для поворота данного текста.
		 <p>Допустимые значения: flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа. Если kerning включен, значение <codeph>trackingLeft</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingLeft</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа. Если kerning включен, значение <codeph>trackingRight</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingRight</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 Тип регистра, используемого для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип регистра, используемого для данного текста. Примеры:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Определяет способ выравнивания элементов TextFlow в контейнере.
		 <p>Допустимые значения: flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> сохраняет все символы пробела. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> удаляет символы новой строки, табуляции, а также начальные и концевые пробелы в блоке импортированного текста. Теги разрыва строк () и символы разделителя строк Unicode сохраняются.
		 <p>Допустимые значения: flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BackgroundColor"><apiName>BackgroundColor</apiName><shortdesc>
	  Указывает константу для определения того, что значение свойства backgroundColor класса TextLayoutFormat равно transparent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Указывает константу для определения того, что значение свойства <codeph>backgroundColor</codeph> класса <codeph>TextLayoutFormat</codeph> равно transparent.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/backgroundColor"><linktext>TextLayoutFormat.backgroundColor</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BackgroundColor:TRANSPARENT"><apiName>TRANSPARENT</apiName><shortdesc> Transparent – цвет фона не применяется.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>transparent</apiData><apiType value="String"/></apiValueDef><apiDesc> Transparent – цвет фона не применяется.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LineBreak"><apiName>LineBreak</apiName><shortdesc> Определяет значения для настройки свойства lineBreak в TextLayoutFormat для указания способа разбивки строк при расстановке переносов в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Определяет значения для настройки свойства <codeph>lineBreak</codeph> в <codeph>TextLayoutFormat</codeph> в целях указания разбивки строк при расстановке переносов в тексте.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/linebreak"><linktext>TextLayoutFormat.linebreak</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LineBreak:EXPLICIT"><apiName>EXPLICIT</apiName><shortdesc> Указывает, что разрыв строк происходит только при наличии символов возврата каретки или символов перевода строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>explicit</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что разрыв строк происходит только при наличии символов возврата каретки или символов перевода строки. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LineBreak:TO_FIT"><apiName>TO_FIT</apiName><shortdesc> Указывает, что при расстановке переносов строки заполняют контейнер по всей ширине.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toFit</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что при расстановке переносов строки заполняют контейнер по всей ширине. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BlockProgression"><apiName>BlockProgression</apiName><shortdesc>
	  Определяет значения для свойства blockProgression класса TextLayouFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для свойства <codeph>blockProgression</codeph> класса <codeph>TextLayouFormat</codeph>. BlockProgression указывает направление, в котором строки размещаются в контейнере.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/blockProgression"><linktext>TextLayoutFormat.blockProgression</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BlockProgression:RL"><apiName>RL</apiName><shortdesc> 
		  Указывает размещение строк справа налево.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rl</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Указывает размещение строк справа налево. Строки располагаются вертикально, влево от правой границы контейнера. Используется для вертикально-ориентированного текста, например, на китайском или японском языке. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BlockProgression:TB"><apiName>TB</apiName><shortdesc> 
		  Указывает размещение строк сверху вниз.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tb</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Указывает размещение строк сверху вниз. Строки располагаются горизонтально, вниз от верхней границы контейнера. Используется для горизонтально-ориентированного текста. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat"><apiName>ITextLayoutFormat</apiName><shortdesc>
	 Данный интерфейс предоставляет доступ для чтения свойств, связанных с FlowElements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Данный интерфейс предоставляет доступ для чтения свойств, связанных с FlowElements.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Указывает базовую линию, по которой выравнивается основная базовая линия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает базовую линию, по которой выравнивается основная базовая линия. Например, если значение <codeph>dominantBaseline</codeph> установлено на ASCENT, то установка <codeph>alignmentBaseline</codeph> на DESCENT выравнивает верхнюю границу текста по базовой линии DESCENT или под строкой. Как правило, базовые линии определяет наибольший элемент в строке.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимыми значениями являются flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение alpha равно 0, являются активными, несмотря на невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). Может иметь либо постоянное значение <codeph>BackgroundColor.TRANSPARENT</codeph>, либо шестнадцатеричное значение, задающее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого.
		 <p>Допустимые строковые значения – flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT, а также uints от 0x0 до 0xffffffff.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Значение сдвига базовой линии относительно значения dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Значение сдвига базовой линии относительно значения <codeph>dominantBaseline</codeph>. Единицей измерения являются пиксели или процент от <codeph>fontSize</codeph> (в этом случае вводится строковое значение, например, 140%). Положительные значения сдвигают строку вверх для горизонтального текста (вправо для вертикального), а отрицательные значения сдвигают ее вниз для горизонтального текста (влево для вертикального). 
		 <p>Допустимые значения: flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Допустимые числовые значения – от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Определяет вертикальное или горизонтальное размещение строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Определяет вертикальное или горизонтальное размещение строки. Строки располагаются либо сверху вниз <codeph>BlockProgression.TB</codeph> (используется для горизонтального текста), либо справа налево <codeph>BlockProgression.RL</codeph> (используется для вертикального текста).
		 <p>Допустимые значения: flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Управляет местом разрыва строк при форматировании текста по размеру окна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управляет местом разрыва строк при форматировании текста по размеру окна. Установите значение <codeph>BreakOpportunity.AUTO</codeph> для стандартного разрыва строк. Установите значение <codeph>BreakOpportunity.NONE</codeph> для <i>предотвращения</i> разрыва строк до тех пор, пока текст не превысит допустимых размеров, при этом в самом тексте будут отсутствовать заданные места разрыва. Установите значение <codeph>BreakOpportunity.ANY</codeph> для разрешения разрыва строки в любом месте, не только между словами. Установите значение <codeph>BreakOpportunity.ALL</codeph>, чтобы каждая группа символов находилась в отдельной строке (рекомендуется использовать для путей к файлам).
		 <p>Допустимые значения: flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 Тип используемого для текста хинтинга CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип используемого для текста хинтинга CFF. Тип подсказки CFF определяет, будет ли среда выполнения Flash в принудительном порядке привязывать жирные горизонтальные основы к субпиксельной сетке. Это свойство применяется только в том случае, если для свойства <codeph>renderingMode</codeph> установлено значение <codeph>RenderingMode.CFF</codeph>, и используется встроенный шрифт (для свойства <codeph>fontLookup</codeph> установлено значение <codeph>FontLookup.EMBEDDED_CFF</codeph>). На экранах небольшого размера хинтинг создает для читателей четкий и удобочитаемый текст.
		 <p>Допустимые значения: flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Цвет текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Цвет текста. Шестнадцатеричное число, содержащее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Число текстовых столбцов (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число текстовых столбцов (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Количество столбцов отменяет другие параметры настройки столбца. Значение представляет собой целое число или <codeph>FormatValue.AUTO</codeph>, если не указано. Если <codeph>columnCount</codeph> не указан, то <codeph>columnWidth</codeph> используется для создания максимального количества столбцов в контейнере.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также с ints от 1 до 50.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Указывает размер средника между колонками в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает размер средника между колонками в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Значение представляет собой число
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Если указана ширина столбцов, но не указано их количество, то TextLayout создает максимально возможное количество столбцов этой ширины при заданной ширине контейнера и настройке <codeph>columnGap</codeph>. Все оставшееся пространство будет располагаться за последним столбцом. Значение представляет собой число.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также числа от 0 до 8000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 Тип регистра цифр, используемого для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип регистра цифр, используемого для текста. Установка значения на <codeph>DigitCase.OLD_STYLE</codeph> позволяет изменить размер букв на примерно соответствующий размеру строчных букв в нижнем или верхнем регистрах. Цифры располагаются пропорционально. Этот стиль доступен только в некоторых шрифтах, обычно в дополнительном или экспертном шрифте. Параметр <codeph>DigitCase.LINING</codeph> определяет высоту верхнего регистра, обычно является моноширинным и служит для выравнивания текста в диаграммах.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Допустимые значения: flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Тип ширины цифр, используемых для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип ширины цифр, используемых для текста. Может иметь значение <codeph>DigitWidth.PROPORTIONAL</codeph>, которое рекомендуется использовать для отдельных чисел, или <codeph>DigitWidth.TABULAR</codeph>, используемое для чисел в таблицах, диаграммах и вертикальных строках.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Допустимые значения: text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Задает уровень двунаправленной вложенности текста в блоке по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Задает уровень двунаправленной вложенности текста в блоке по умолчанию. Направление чтения слева направо, как в сценариях с латинским стилем, или справа налево, как в сценариях с арабским или еврейским. Это свойство также влияет на направление столбца, когда оно применяется на уровне контейнера. Столбцы могут быть расположены либо слева направо, либо справа налево, так же, как и текст. Примеры:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Указывает, какая из базовых линий элемента привязывается к alignmentBaseline для определения позиции элемента в строке по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения позиции элемента в строке по вертикали. Значение <codeph>TextBaseline.AUTO</codeph> выделяет доминирующую базовую линию, основывающуюся на свойстве <codeph>locale</codeph> вышестоящего абзаца. Для японского и китайского языков значением выделенной базовой линией является <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; для всех других - <codeph>TextBaseline.ROMAN</codeph>. Этот выбор базовых линий определяется выбором типа и размера шрифта.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Указывает позицию базовой линии первой строки в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает позицию базовой линии первой строки в контейнере. Базовая линия, к которой относится это свойство, зависит от языкового стандарта на уровне контейнера. Для японского и китайского языка это – <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; для всех других языков – <codeph>TextBaseline.ROMAN</codeph>. Смещение от верхнего отступа (или правого отступа, если <codeph>blockProgression</codeph> имеет значение RL) контейнера до базовой линии первой строки может иметь значение <codeph>BaselineOffset.ASCENT</codeph>, что означает равное подъему строки, либо <codeph>BaselineOffset.LINE_HEIGHT</codeph>, что означает равное высоте этой первой строки, либо любое фиксированное число для указания абсолютного расстояния. Значение <codeph>BaselineOffset.AUTO</codeph> выравнивает подъем строки по верхнему отступу контейнера.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Допустимые строковые значения: flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT и числа от 0 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  Имя используемого шрифта или разделенный запятой список имен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  Имя используемого шрифта или разделенный запятой список имен. Среда выполнения Flash визуализирует элемент с помощью первого доступного шрифта в списке. Например, если задать Arial, Helvetica, _sans, то проигрыватель сначала выполняет поиск Arial, затем Helvetica, если Arial не обнаружен, а потом _sans, если не обнаружен ни тот, ни другой.
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Поиск используемых шрифтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Поиск используемых шрифтов. При указании <codeph>FontLookup.DEVICE</codeph> используются шрифты, установленные в системе, в которой выполняется SWF-файл. Использование шрифтов устройства сокращает размер ролика, но в различных системах и платформах текст не всегда отображается одинаково. При указании <codeph>FontLookup.EMBEDDED_CFF</codeph> используются контуры шрифтов, встроенные в опубликованный SWF-файл. Встроенные шрифты увеличивают размер файла SWF (иногда значительно), но текст в выбранном шрифте отображается последовательно.
		 <p>Допустимые значения: flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 Размер текста в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Размер текста в пикселях.
		 <p>Допускаются значения и числа от 1 до 720, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Стиль текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Стиль текста. Можно использовать значение <codeph>FontPosture.NORMAL</codeph> для обычного текста или <codeph>FontPosture.ITALIC</codeph> для курсивного. Это свойство применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Толщина текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Толщина текста. Может использоваться значение <codeph>FontWeight.NORMAL</codeph> для обычного текста или <codeph>FontWeight.BOLD</codeph> - для полужирного. Применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Правило, используемое для выравнивания текста в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Правило, используемое для выравнивания текста в абзаце. Значением по умолчанию является <codeph>FormatValue.AUTO</codeph>, которое выравнивает текст согласно свойству абзаца <codeph>locale</codeph>. Для всех языков, кроме японского и китайского, <codeph>FormatValue.AUTO</codeph> получает значение <codeph>JustificationRule.SPACE</codeph>, которое добавляет к символу пробела дополнительное пространство. Для японского и китайского языков <codeph>FormatValue.AUTO</codeph> имеет значение <codeph>JustficationRule.EAST_ASIAN</codeph>. Выравнивание частично изменяет интервал между знаками пунктуации. Запятая и японская точка занимают в латинице целый символ, в то время как восточно-азиатском тексте – только половину символа. Кроме того, согласно традиции, в восточно-азиатском тексте интервал между знаками пунктуации должен быть уже, чем между остальными символами. В нижеприведенном примере обратите внимание также на интерлиньяж, который применяется ко второй строке абзаца. В восточноазиатской версии последние две строки смещаются вправо. В латинской версии вторая и последующие строки смещаются влево.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 Стиль, используемый для выравнивания абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Стиль, используемый для выравнивания абзаца. Используется только вместе с параметром <codeph>justificationRule</codeph> для <codeph>JustificationRule.EAST_ASIAN</codeph>. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> относится к <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> для всех языковых стандартов. Константы, определяемые классом JustificationStyle, указывают параметры обработки символов кинсоку – японских символов, которые не должны появляться в начале и конце строк. Если необходимо получить более разреженный текст, укажите <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Если необходимо использовать поведение, подобное тому, что получается при использовании <codeph>justificationRule</codeph> <codeph>JustificationRule.SPACE</codeph>, укажите <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Допустимые значения: flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста. Кернинг поддерживается для всех шрифтов, имеющих таблицы кернинга.
		 <p>Допустимые значения: flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа. Основа межстрочного интервала – это базовая линия, на которую ссылается свойство <codeph>lineHeight</codeph>. Направление межстрочного интервала определяет, относится ли свойство <codeph>lineHeight</codeph> к расстоянию от базовой линии строки до базовой линии строки, находящейся перед ней или за ней. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> определяется на основе свойства абзаца <codeph>locale</codeph>. Для японского и китайского языков значение равно <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>, для всех других языков – <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. Лигатуры для каждого из этих параметров зависят от шрифта. Лигатура возникает, когда две или более литеры объединяются в один глиф. Лигатуры обычно заменяют последовательные символы с общими компонентами, такие как пары букв «fi», «fl» или «ae». Они используются как с латинскими, так и с нелатинскими наборами символов. Лигатуры, активируемые значениями <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph> и <codeph>EXOTIC</codeph> являются аддитивными. Каждое значение активирует новый набор лигатур, при этом включая в себя все предыдущие типы.<p><b>Примечание.</b> При работе со шрифтами арабского или сирийского языка для <codeph>ligatureLevel</codeph> устанавливается значение MINIMUM или выше.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Допустимые значения: flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Управляет переносом слов в контейнере (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управляет переносом слов в контейнере (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Текст в контейнере можно настроить по ширине контейнера (<codeph>LineBreak.TO_FIT</codeph>), либо установить разрыв только при наличии символов возврата каретки или символов перевода строки (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Допустимые значения: flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Управление интерлиньяжем текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Управление интерлиньяжем текста. Расстояние от базовой линии предыдущей или следующей строки (в зависимости от <codeph>LeadingModel</codeph>) до базовой линии текущей строки равно максимальному межстрочному интервалу, применяемому в отношении любого символа в строке. Значение выражается либо числом, либо процентом. При указании процента вводится строковое значение, например, 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Допустимые числовые значения – от -720 до 720.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 Если значение равно true, применяет перечеркивание, размещая линию посередине строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Если значение равно <codeph>true</codeph>, применяет перечеркивание, размещая линию посередине строки.
		 <p>Допустимыми значениями являются true, false и flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 Языковой стандарт текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Языковой стандарт текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы языкового стандарта, описанные в техническом стандарте Unicode #35. Например, en, en_US и en-US относятся к английскому, а ja – к японскому. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Отступ снизу в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ снизу в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между нижним краем контейнера и текстом. Значение представляет собой число. <p> При горизонтальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в нижней части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Отступ слева в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ слева в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между левым краем контейнера и текстом. Значение представляет собой число.<p> При вертикальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в конечной части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера, придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Отступ справа в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ справа в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между правым краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Отступ сверху в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Отступ сверху в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между верхним краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 Число, указывающее величину отступа для правого края абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, указывающее величину отступа для правого края абзаца в пикселях. Относится к правому краю в текстах, написанных слева направо, и к левому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 Число, определяющее величину интервала после абзаца, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, определяющее величину интервала после абзаца, в пикселях. Сворачивается вместе с <codeph>paragraphSpaceBefore</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 Число, указывающее величину интервала перед абзацем, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, указывающее величину интервала перед абзацем, в пикселях. Сворачивается вместе с <codeph>paragraphSpaceAfter</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 Число, указывающее величину отступа для левого края абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, указывающее величину отступа для левого края абзаца в пикселях. Относится к левому краю в текстах, написанных слева направо, и к правому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 Режим визуализации, используемый для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Режим визуализации, используемый для данного текста. Применяется только к встроенным шрифтам (для свойства <codeph>fontLookup</codeph> устанавливается значение <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Допустимые значения: flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Указывает позиции табуляции, связанные с абзацем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает позиции табуляции, связанные с абзацем. Установщики могут принимать значения flashx.textLayout.formats.TabStopFormat, сжатое строковое представление, undefined или <codeph>FormatValue.INHERIT</codeph>. Сжатое строковое представление всегда преобразовывается в массив flashx.textLayout.formats.TabStopFormat. <p>Строковый формат представляет собой список позиций табуляции, где каждая точка табуляции отделена одним или несколькими пробелами.</p><p>Позиция табуляции принимает следующую форму: &lt;тип выравнивания>&lt;позиция выравнивания>|&lt;метка выравнивания >.</p><p>Тип выравнивания представляет собой одиночный символ и может иметь значение S, E, C или D (или эквиваленты нижнего регистра). S или s означает start, E или e – end, C или c – center, D или d – decimal. Тип выравнивания является необязательным параметром, и если он не определен, то по умолчанию принимается значение S.</p><p>Позиция выравнивания представляет собой число, и определяется в соответствии со спецификацией FXG для чисел (десятичное число или экспоненциальное представление). Позиция выравнивания является обязательным параметром.</p><p>Вертикальная черта используется для отделения позиции выравнивания от метки выравнивания, и используется только в случае, если имеется метка выравнивания. </p><p> Метка выравнивания не является обязательной при типе выравнивания D, и не должна присутствовать при типе выравнивания, отличном от D. Метка выравнивания может представлять собой любую последовательностью символов, прерываемых пробелом, оканчивающим позицию табуляции (для последней позиции табуляции завершающий пробел не является обязательным; здесь подразумевается конец метки выравнивания). Пробел может быть частью метки выравнивания, если он маскируется обратной косой чертой (\). Обратная косая черта может быть частью метки выравнивания, она маскируется другой обратной косой чертой (\\). Если используется тип выравнивания D, а метка выравнивания не указана, то она примет значение по умолчанию null.</p><p>Если позиции табуляции не определены, операция табуляции по умолчанию назначает конец строки.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте. Если для <codeph>textAlign</codeph> установлено значение <codeph>TextAlign.JUSTIFY</codeph>, то <codeph>textAlignLast</codeph>определяет способ выравнивания последней строки (или единственной строки, если блок состоит из одной строки). Значения подобны значениям <codeph>textAlign</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Выравнивание строк в абзаце относительно контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание строк в абзаце относительно контейнера. <codeph>TextAlign.LEFT</codeph> выравнивает строки по левому краю контейнера. <codeph>TextAlign.RIGHT</codeph> выравнивает строки по правому краю. <codeph>TextAlign.CENTER</codeph> помещает строку на равном расстоянии от левого и правого краев. <codeph>TextAlign.JUSTIFY</codeph> выравнивает строки по ширине контейнера. <codeph>TextAlign.START</codeph> эквивалентен установке left в тексте слева направо, или right в тексте справа налево. <codeph>TextAlign.END</codeph> эквивалентен установке right в тексте слева направо, или left в тексте справа налево.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Альфа-значение (прозрачности) для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Альфа-значение (прозрачности) для текста. При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение <codeph>textAlpha</codeph> равно 0, являются активными, несмотря на их невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Оформление в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Оформление в тексте. Используется для подчеркивания текста; значение по умолчанию – none.
		 <p>Допустимые значения: flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 Число, определяющее величину отступа первой строки абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число, определяющее величину отступа первой строки абзаца в пикселях. Отрицательный отступ перенесет строку на поля или даже за границы контейнера.
		 <p>Допускаются значения и числа от -1000 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Указывает параметры выравнивания текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает параметры выравнивания текста. Значением по умолчанию является <codeph>TextJustify.INTER_WORD</codeph>, что означает добавление дополнительного пробела к знакам пробела. <codeph>TextJustify.DISTRIBUTE</codeph> добавляет дополнительный пробел к знакам пробела и между отдельными буквами. Используется только вместе с <codeph>justificationRule</codeph> параметра <codeph>JustificationRule.SPACE</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Указывает число градусов для поворота данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Указывает число градусов для поворота данного текста.
		 <p>Допустимые значения: flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа. Если kerning включен, значение <codeph>trackingLeft</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingLeft</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа. Если kerning включен, значение <codeph>trackingRight</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingRight</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 Тип регистра, используемого для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Тип регистра, используемого для данного текста. Примеры:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Определяет способ выравнивания элементов TextFlow в контейнере.
		 <p>Допустимые значения: flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Сворачивает или сохраняет пустое пространство при импорте текста в TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> сохраняет все символы пробела. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> удаляет символы новой строки, табуляции, а также начальные и концевые пробелы в блоке импортированного текста. Теги разрыва строк () и символы разделителя строк Unicode сохраняются.
		 <p>Допустимые значения: flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LeadingModel"><apiName>LeadingModel</apiName><shortdesc>
	  Определяет значения для установки свойства leadingModel класса TextLayoutFormat, составленные из допустимых комбинаций основы межстрочного интервала и направления межстрочного интервала.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для свойства <codeph>leadingModel</codeph> класса <codeph>TextLayoutFormat</codeph>, составленные из допустимых комбинаций основы межстрочного интервала и направления межстрочного интервала. Основа межстрочного интервала описывает базовые линии, определяющие межстрочный интервал (или свойство <codeph>lineHeight</codeph>) для строк в абзаце. Направление межстрочного интервала определяет, относится ли свойство <codeph>lineHeight</codeph> к расстоянию от базовой линии строки до базовой линии строки, находящейся перед ней или за ней. 
	  <p>
	  <adobeimage alt="baselines" border="0" href="../../../images/textLayout_baselines.jpg"/> <adobeimage alt="leadingDirection_1" border="0" href="../../../images/textLayout_LD1.jpg"/> <adobeimage alt="leadingDirection_2" border="0" href="../../../images/textLayout_LD2.jpg"/> <adobeimage alt="leadingDirection_3" border="0" href="../../../images/textLayout_LD3.jpg"/>
	  </p>
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/leadingModel"><linktext>TextLayoutFormat.leadingModel</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/lineHeight"><linktext>TextLayoutFormat.lineHeight</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LeadingModel:APPROXIMATE_TEXT_FIELD"><apiName>APPROXIMATE_TEXT_FIELD</apiName><shortdesc> Определяет модель интерлиньяжа, которая приближенно соответствует поведению интерлиньяжа объекта TextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>approximateTextField</apiData><apiType value="String"/></apiValueDef><apiDesc> Определяет модель интерлиньяжа, которая приближенно соответствует поведению интерлиньяжа объекта <codeph>TextField</codeph>. Похоже на <codeph>ASCENT_DESCENT_UP</codeph> тем, что <codeph>lineHeight</codeph> обозначает расстояние верхней базовой линии строки до нижней базовой линии предыдущей строки. Однако положение базовых линий приближено к положению, определяемому объектом <codeph>TextField</codeph>, а не <codeph>TextLine</codeph>.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ASCENT_DESCENT_UP"><apiName>ASCENT_DESCENT_UP</apiName><shortdesc> Указывает, что основа межстрочного интервала имеет значение ASCENT/DESCENT, а направления межстрочного интервала имеет значение UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascentDescentUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что основа межстрочного интервала имеет значение ASCENT/DESCENT, а направления межстрочного интервала имеет значение UP. Другими словами, <codeph>lineHeight</codeph> указывает на расстояние между надстрочной базовой линией строки и подстрочной базовой линией предыдущей строки.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:AUTO"><apiName>AUTO</apiName><shortdesc> Указывает на автоматический выбор модели межстрочного интервала на основе свойства locale абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="3.0" version="#IDEOGRAPHIC_TOP_DOWN"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает на автоматический выбор модели межстрочного интервала на основе свойства <codeph>locale</codeph> абзаца. Для японского и китайского языка это – IDEOGRAPHIC_TOP_DOWN, а для всех других языков это – ROMAN_UP.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_DOWN"><apiName>IDEOGRAPHIC_CENTER_DOWN</apiName><shortdesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_CENTER, а направление межстрочного интервала имеет значение DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_CENTER, а направление межстрочного интервала имеет значение DOWN. Другими словами, <codeph>lineHeight</codeph> указывает на расстояние между идеографической центральной базовой линией строки и идеографической базовой линией следующей строки.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_UP"><apiName>IDEOGRAPHIC_CENTER_UP</apiName><shortdesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_CENTER, а направление межстрочного интервала имеет значение UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_CENTER, а направление межстрочного интервала имеет значение UP. Другими словами, <codeph>lineHeight</codeph> указывает на расстояние между идеографической центральной базовой линией строки и идеографической центральной базовой линией предыдущей строки.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_DOWN"><apiName>IDEOGRAPHIC_TOP_DOWN</apiName><shortdesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_TOP, а направление межстрочного интервала имеет значение DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_TOP, а направление межстрочного интервала имеет значение DOWN. Другими словами, <codeph>lineHeight</codeph> указывает на расстояние между идеографической верхней базовой линией строки и идеографической верхней базовой линией следующей строки.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_UP"><apiName>IDEOGRAPHIC_TOP_UP</apiName><shortdesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_TOP, а направление межстрочного интервала имеет значение UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что основа межстрочного интервала имеет значение IDEOGRAPHIC_TOP, а направление межстрочного интервала имеет значение UP. Другими словами, <codeph>lineHeight</codeph> указывает на расстояние между идеографической верхней базовой линией строки и идеографической верхней базовой линией предыдущей строки.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ROMAN_UP"><apiName>ROMAN_UP</apiName><shortdesc> Указывает, что основа межстрочного интервала имеет значение ROMAN, а направление межстрочного интервала имеет значение UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>romanUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает, что основа межстрочного интервала имеет значение ROMAN, а направление межстрочного интервала имеет значение UP. Другими словами, <codeph>lineHeight</codeph> указывает на расстояние между латинской базовой линией строки и латинской базовой линией предыдущей строки.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:IMEStatus"><apiName>IMEStatus</apiName><shortdesc>
	  Используется на внутреннем уровне для определения статуса оператора в тексте IME во время сеанса ввода текста IME.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Используется на внутреннем уровне для определения статуса оператора в тексте IME во время сеанса ввода текста IME.
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.formats:IMEStatus:IMEStatus"><apiName>IMEStatus</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.formats:IMEStatus:DEAD_KEY_INPUT_STATE"><apiName>DEAD_KEY_INPUT_STATE</apiName><shortdesc> Ввод с заблокированной клавишей используется в процессе ввода символа, ввод которого осуществляется несколькими клавишами, например, буквы с ударением.
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deadKeyInputState</apiData><apiType value="String"/></apiValueDef><apiDesc> Ввод с заблокированной клавишей используется в процессе ввода символа, ввод которого осуществляется несколькими клавишами, например, буквы с ударением.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:IME_CLAUSE"><apiName>IME_CLAUSE</apiName><shortdesc> Имя свойства IMEClause.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeClause</apiData><apiType value="String"/></apiValueDef><apiDesc> Имя свойства IMEClause. Значение является целым числом.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:IME_STATUS"><apiName>IME_STATUS</apiName><shortdesc> Имя свойства IMEStatus
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeStatus</apiData><apiType value="String"/></apiValueDef><apiDesc> Имя свойства IMEStatus
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:NOT_SELECTED_CONVERTED"><apiName>NOT_SELECTED_CONVERTED</apiName><shortdesc> Не выбран, преобразован: текст преобразован и не является частью текущего выражения в сеансе IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>notSelectedConverted</apiData><apiType value="String"/></apiValueDef><apiDesc> Не выбран, преобразован: текст преобразован и не является частью текущего выражения в сеансе IME
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:NOT_SELECTED_RAW"><apiName>NOT_SELECTED_RAW</apiName><shortdesc> Не выбран, не преобразован: текст не преобразован и не является частью текущего выражения в сеансе IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>notSelectedRaw</apiData><apiType value="String"/></apiValueDef><apiDesc> Не выбран, не преобразован: текст не преобразован и не является частью текущего выражения в сеансе IME
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:SELECTED_CONVERTED"><apiName>SELECTED_CONVERTED</apiName><shortdesc> Выбран, преобразован: текст преобразован и является текущим выражением в сеансе IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectedConverted</apiData><apiType value="String"/></apiValueDef><apiDesc> Выбран, преобразован: текст преобразован и является текущим выражением в сеансе IME
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:SELECTED_RAW"><apiName>SELECTED_RAW</apiName><shortdesc> Выбран, не преобразован: текст не преобразован и является текущим выражением в сеансе IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectedRaw</apiData><apiType value="String"/></apiValueDef><apiDesc> Выбран, не преобразован: текст не преобразован и является текущим выражением в сеансе IME
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineOffset"><apiName>BaselineOffset</apiName><shortdesc>
	  Определяет значения для свойства firstBaselineOffset классов TextLayoutFormat и ContainerFormattedElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для свойства <codeph>firstBaselineOffset</codeph> классов <codeph>TextLayoutFormat </codeph> и <codeph>ContainerFormattedElement</codeph>. Определяет смещение от верхнего отступа контейнера до базовой линии первой строки. Смещение базовой линии можно указать как подъем строки, высоту строки или автоматически генерируемую величину.
	  <p>
	  <adobeimage alt="firstBaselineOffset_1" border="0" href="../../../images/textLayout_FBO1.jpg"/> <adobeimage alt="firstBaselineOffset_2" border="0" href="../../../images/textLayout_FBO2.jpg"/> <adobeimage alt="firstBaselineOffset_3" border="0" href="../../../images/textLayout_FBO3.jpg"/> <adobeimage alt="firstBaselineOffset_4" border="0" href="../../../images/textLayout_FBO4.jpg"/>
	  </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/firstBaselineOffset"><linktext>TextLayoutFormat.firstBaselineOffset</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineOffset:ASCENT"><apiName>ASCENT</apiName><shortdesc> Указывает смещение, равное высоте надстрочных элементов шрифта максимального размера, используемого в строке, с учетом встроенных графических элементов при расположении нижней части графических элементов на базовой линии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает смещение, равное высоте надстрочных элементов шрифта максимального размера, используемого в строке, с учетом встроенных графических элементов при расположении нижней части графических элементов на базовой линии.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:AUTO"><apiName>AUTO</apiName><shortdesc> Выравнивает высоту надстрочных элементов по верхнему отступу контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Выравнивает высоту надстрочных элементов по верхнему отступу контейнера.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:LINE_HEIGHT"><apiName>LINE_HEIGHT</apiName><shortdesc> Указывает смещение, равное высоте строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineHeight</apiData><apiType value="String"/></apiValueDef><apiDesc> Указывает смещение, равное высоте строки.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse"><apiName>WhiteSpaceCollapse</apiName><shortdesc>
	  Определяет значения для установки свойства whiteSpaceCollapse класса TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Определяет значения для установки свойства <codeph>whiteSpaceCollapse</codeph> класса <codeph>TextLayoutFormat</codeph>. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/whiteSpaceCollapse"><linktext>TextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:COLLAPSE"><apiName>COLLAPSE</apiName><shortdesc> 
		 Сворачивает пустое пространство при импорте текста (по умолчанию).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>collapse</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Сворачивает пустое пространство при импорте текста (по умолчанию). Внутри блока импортируемого текста удаляет символы новой строки, табуляции, начальные и концевые пробелы. Сохраняет теги разрыва строк (br/) и символы разделителей строк в кодировке Unicode.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:PRESERVE"><apiName>PRESERVE</apiName><shortdesc> Сохраняет пустое пространство при импорте текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>preserve</apiData><apiType value="String"/></apiValueDef><apiDesc> Сохраняет пустое пространство при импорте текста. 
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>