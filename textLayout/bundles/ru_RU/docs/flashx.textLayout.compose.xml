<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.compose"><apiName>flashx.textLayout.compose</apiName><apiDetail/><apiClassifier id="flashx.textLayout.compose:ITextLineCreator"><apiName>ITextLineCreator</apiName><shortdesc> 
	 ITextLineCreator определяет интерфейс для создания объектов TextLine для экземпляра IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 ITextLineCreator определяет интерфейс для создания объектов TextLine для экземпляра IFlowComposer.
	 
	 <p>Интерфейс ITextLineCreator включает методы создания строки FTE. Существует две основные причины, по которым приложение может использовать этот интерфейс для управления созданием строки. Во-первых, если приложение содержит файл SWF, включающий определенный шрифт, и требуется использовать этот шрифт в другом файле SWF, можно повторно использовать этот шрифт, если TextLine был создан на основе того файла SWF, который содержит этот шрифт. Во-вторых, можно ускорить процесс перекомпоновки за счет повторного использования существующих объектов TextLine. В TLF это реализуется на внутреннем уровне, и при повторном использовании этих объектов выполняется вызов метода recreateTextLine вместо createTextLine. Приложение может содержать дополнительные объекты TextLine, безусловно допускающие повторное использование. В этом случае в реализации createTextLine можно выполнить вызов метода TextBlock.recreateTextLine с многократно используемой строкой вместо метода TextBlock.createTextLine.</p>
	 
	 </apiDesc><example conref="examples\ITextLineCreator_ClassExample.as"/></apiClassifierDetail><related-links><link href="" invalidHref="flast.text.engine.TextLine.xml"><linktext>flast.text.engine.TextLine</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:ITextLineCreator:flashx.textLayout.compose:ITextLineCreator:createTextLine"><apiName>createTextLine</apiName><shortdesc> 
		 Создает объект TextLine для компоновщика потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLine создаваемого объекта TextLine
		  
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>textBlock</apiItemName><apiType value="flash.text.engine:TextBlock"/><apiDesc>Объект TextBlock, для которого следует создать строку.
		 </apiDesc></apiParam><apiParam><apiItemName>previousLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiData>null</apiData><apiDesc>Предыдущая строка, созданная для TextBlock, если такая имеется.
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiData>1000000</apiData><apiDesc>Максимальная ширина строки.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0.0</apiData><apiDesc>Значение смещения (необязательно).
		 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>В случае значения <codeph>true</codeph>, по крайней мере, один символ или вложенный графический элемент должен соответствовать ширине строки даже в том случае, если этот элемент приводит к превышению значения параметра <codeph>width</codeph> этой строки.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Создает объект TextLine для компоновщика потока.
		 
		 <p>Вызывается компоновщиком потока при необходимости создания текстовой строки.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:ITextLineCreator:flashx.textLayout.compose:ITextLineCreator:recreateTextLine"><apiName>recreateTextLine</apiName><shortdesc> 
		 Повторно создает объект TextLine для компоновщика потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLine вновь созданного объекта TextLine
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>textBlock</apiItemName><apiType value="flash.text.engine:TextBlock"/><apiDesc>Объект TextBlock, для которого следует создать строку.
		 </apiDesc></apiParam><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>Предыдущая строка, созданная для TextBlock, если такая имеется.
		 </apiDesc></apiParam><apiParam><apiItemName>previousLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiData>null</apiData><apiDesc>Максимальная ширина строки.
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiData>1000000</apiData><apiDesc>Значение смещения (необязательно).
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0.0</apiData><apiDesc>В случае значения <codeph>true</codeph>, по крайней мере, один символ или вложенный графический элемент должен соответствовать ширине строки даже в том случае, если этот элемент приводит к превышению значения параметра <codeph>width</codeph> этой строки.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc> 
		 Повторно создает объект TextLine для компоновщика потока.
		 
		 <p>Вызывается компоновщиком потока при необходимости повторного создания текстовой строки.</p>
		 
		 <p><b>Примечание.</b> Начиная с Flash Player версии 10.1 и Adobe AIR версии 2.0 доступен метод <codeph>recreateTextLine()</codeph> в объекте TextBlock. Для реализации этого метода с учетом совместимости с более ранними средами выполнения перед его вызовом выполните проверку существования метода <codeph>recreateTextLine()</codeph> в объекте TextBlock.</p>
		  
		 </apiDesc><example conref="examples\ITextLineCreator_recreateTextLine.as"/></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> 
	 Класс TextFlowLine представляет отдельную строку текста в текстовом потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flashx.textLayout.compose:IVerticalJustificationLine</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс TextFlowLine представляет отдельную строку текста в текстовом потоке.
	 
	 <p>Используйте этот класс для доступа к информации о параметрах созданной строки текста: ее местоположении, высоте, ширине и т.д. При изменении текстового потока (TextFlow) строки выше и в месте изменения немедленно отмечаются как недействительные, поскольку они должны быть восстановлены. Строки ниже места изменения, возможно, не были повреждены немедленно, но они могут быть созданы заново после создания текста. Доступ к поврежденному TextFlowLine возможен, но любые его значения отражают предыдущее состояние TextFlow. При восстановлении TextFlow создаются новые строки, и можно получить новую строку для данного местоположения путем вызова <codeph>TextFlow.flowComposer.findLineAtPosition()</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:TextFlowLine:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> Конструктор создает новый экземпляр TextFlowLine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>Экранный объект TextLine, используемый для этой строки.
		 </apiDesc></apiParam><apiParam><apiItemName>paragraph</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>Абзац (ParagraphElement), в который помещается строка.
		 </apiDesc></apiParam><apiParam><apiItemName>outerTargetWidth</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Ширина создаваемой строки, исключая отступы.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Смещение строки (в пикселях) от соответствующего отступа контейнера (определяется в соответствии с направлением абзаца и размещением строк в контейнере) до выравнивания строк в абзаце. 
		 </apiDesc></apiParam><apiParam><apiItemName>absoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Местоположение символа начала строки в текстовом потоке.
		 </apiDesc></apiParam><apiParam><apiItemName>numChars</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Количество символов в строке.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Конструктор создает новый экземпляр TextFlowLine. 
		  <p><b>Примечание</b>. Он не должен вызываться клиентами. Он предоставляется для записи собственного компоновщика.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/absoluteStart"><linktext>absoluteStart</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/numChars"><linktext>numChars</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.compose:TextFlowLine:getBounds"><apiName>getBounds</apiName><shortdesc> 
		 Возвращает границы строки в виде прямоугольника.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>прямоугольник, представляющий границы строки.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Возвращает границы строки в виде прямоугольника.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextFlowLine:getTextLine"><apiName>getTextLine</apiName><shortdesc> 
		 Возвращает для этой строки объект flash.text.engine.TextLine, который может быть создан повторно, если его не существует вследствие выполнения «сборки мусора».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>объект для этой строки или <codeph>null</codeph>, если объект TextLine не может быть создан повторно.
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>forceValid</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>если true, TextLine создается заново, если он существует, но недействителен.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает для этой строки объект <codeph>flash.text.engine.TextLine</codeph>, который может быть создан повторно, если его не существует вследствие выполнения «сборки мусора». Для повторного создания TextLine установите для <codeph>forceValid</codeph> значение <codeph>true</codeph>. Возвращает null, если TextLine не может быть создан повторно.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flashx.textLayout.compose:TextFlowLine:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Местоположение строки, как абсолютной позиции символа в объекте TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Местоположение строки, как абсолютной позиции символа в объекте TextFlow.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:ascent:get"><apiName>ascent</apiName><shortdesc conref="flash.text.engine.TextLine#ascent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#ascent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:columnIndex:get"><apiName>columnIndex</apiName><shortdesc> Номер столбца, в котором была размещена строка, начиная с 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Номер столбца, в котором была размещена строка, начиная с 0.
		 	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:controller:get"><apiName>controller</apiName><shortdesc> 
		 Контроллер (объект ContainerController) для контейнера, в котором была размещена строка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 Контроллер (объект ContainerController) для контейнера, в котором была размещена строка.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>flashx.textLayout.container.ContainerController</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:descent:get"><apiName>descent</apiName><shortdesc conref="flash.text.engine.TextLine#descent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#descent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:height:get"><apiName>height</apiName><shortdesc> Высота строки в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Высота строки в пикселях.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/width"><linktext>ширина</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:lineOffset:get"><apiName>lineOffset</apiName><shortdesc> 
		 Смещение строки (в пикселях) от соответствующего отступа контейнера (определяется в соответствии с направлением абзаца и размещением строк в контейнере) до выравнивания строк в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Смещение строки (в пикселях) от соответствующего отступа контейнера (определяется в соответствии с направлением абзаца и размещением строк в контейнере) до выравнивания строк в абзаце.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:location:get"><apiName>location</apiName><shortdesc> 
		 Одно из значений из TextFlowLineLocation, указывающее местоположение строки внутри абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Одно из значений из TextFlowLineLocation, указывающее местоположение строки внутри абзаца.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLineLocation"><linktext>TextFlowLineLocation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:paragraph:get"><apiName>paragraph</apiName><shortdesc> 
		 Абзац (ParagraphElement), в котором находится строка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Абзац (ParagraphElement), в котором находится строка.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceAfter:get"><apiName>spaceAfter</apiName><shortdesc> 
		 Размер интервала, который должен быть оставлен после строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Размер интервала, который должен быть оставлен после строки.
		 <p>Если строка является последней строкой абзаца, за которым следует отбивка, то она будет иметь значение <codeph>spaceAfter</codeph>. Если строка находится у нижней границы столбца, то <codeph>spaceAfter</codeph> игнорируется. В противном случае строка отобразится перед другой строкой в столбце, и следующая строка должна быть расположена вертикально для обеспечения достаточного интервала между последней строкой данного абзаца и первой строкой следующего абзаца.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceAfter"><linktext>TextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceBefore:get"><apiName>spaceBefore</apiName><shortdesc> 
		 Размер интервала, который должен быть оставлен перед строкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Размер интервала, который должен быть оставлен перед строкой.
		 <p>Если строка является первой строкой абзаца, перед которым имеется отбивка, эта строка будет иметь значение <codeph>spaceBefore</codeph>. Если строка находится у верхней границы столбца, то <codeph>spaceBefore</codeph> игнорируется. В противном случае строка отобразится после другой строки в столбце, и она должна быть расположена вертикально для обеспечения достаточного интервала между данной строкой и последней строкой предыдущего абзаца.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceBefore"><linktext>TextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
		 Высота строки текста, равная сумме значений ascent и descent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Высота строки текста, равная сумме значений <codeph>ascent</codeph> и <codeph>descent</codeph>. Это значение рассчитывается по разнице между базовыми строками, окружающими строку, – идеографическими верхней и нижней, либо надстрочной и подстрочной в зависимости от того, является базовая строка с координатой y=0 идеографической (например, TextBaseline.IDEOGRAPHIC_TOP) или нет. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLength:get"><apiName>textLength</apiName><shortdesc> 
		 Количество символов до следующей линии, включая конечные пробелы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Количество символов до следующей линии, включая конечные пробелы. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLineExists:get"><apiName>textLineExists</apiName><shortdesc> 
		 Указывает, существует ли для данного TextFlowLine объект flash.text.engine.TextLine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Указывает, существует ли для данного TextFlowLine объект <codeph>flash.text.engine.TextLine</codeph>. Значение является <codeph>true</codeph>, если объект TextLine <i>не</i> был собран сборщиком мусора; в противном случае, <codeph>false</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc> 
		 Ширина строки, если она не выровнена.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Ширина строки, если она не выровнена. Для невыровненного текста это значение совпадает с <codeph>textLength</codeph>. Для выровненного текста это значение представляет длину, которую бы строка имела без выравнивания, а <codeph>textLength</codeph> представляет фактическую ширину строки. Например, когда следующая строка выравнивается и назначается с шириной 500, ее фактическая ширина составляет 500, а ширина без выравнивания – 268,9921875. 
		 
		 <p>TBD: добавьте графику выровненной строки </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:validity:get"><apiName>validity</apiName><shortdesc> Действительность строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Действительность строки. 
		 <p>Строка может быть недействительной, если после ее создания были изменены текст, примененные к нему атрибуты или параметры настройки контроллера. Недействительная строка может по-прежнему отображаться, и ее можно использовать, но она будет иметь те значения, которые она имела при создании. Строка, представляемая <codeph>textLine</codeph>, также будет иметь статус недействительной. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/textLine"><linktext>textLine</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/GEOMETRY_DAMAGED"><linktext>GEOMETRY_DAMAGED</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:x:get"><apiName>x</apiName><shortdesc> 
		 Положение строки по горизонтали относительно ее контейнера, задаваемое смещением в пикселях от левого края контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Положение строки по горизонтали относительно ее контейнера, задаваемое смещением в пикселях от левого края контейнера.
		 <p><b>Примечание. </b>Хотя это свойство технически <codeph>только для записи</codeph>, его необходимо обработать как <codeph>только для чтения</codeph>. Этот установщик существует только для обеспечения требований интерфейса IVerticalJustificationLine, определяющего как получателя, так и установщика этого свойства. Использование установщика, хотя это может привести к непредсказуемым результатам.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:y:get"><apiName>y</apiName><shortdesc> 
		 Положение строки по вертикали относительно ее контейнера, задаваемое смещением в пикселях от верхнего края контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Положение строки по вертикали относительно ее контейнера, задаваемое смещением в пикселях от верхнего края контейнера.
		 <p><b>Примечание. </b>Хотя это свойство технически <codeph>только для записи</codeph>, его необходимо обработать как <codeph>только для чтения</codeph>. Этот установщик существует только для обеспечения требований интерфейса IVerticalJustificationLine, определяющего как получателя, так и установщика этого свойства. Использование установщика, хотя это может привести к непредсказуемым результатам.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> 
	 Класс FlowComposerBase является базовым классом для классов Text Layout Framework компоновщика потока, которые обеспечивают управление компоновкой текстовых строк в объектах ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="checkFirstDamage"/><Exclude kind="method" name="debugCheckTextFlowLines"/><Exclude kind="property" name="lines"/><Exclude kind="method" name="addLine"/><Exclude kind="method" name="initializeLines"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс FlowComposerBase является базовым классом для классов Text Layout Framework компоновщика потока, которые обеспечивают управление компоновкой текстовых строк в объектах ContainerController.
	 
	 <p>FlowComposerBase является служебным классом, который реализует методы и свойства, общие для нескольких типов компоновщиков потока. Как правило, код приложения не создает экземпляры этого класса и не использует этот класс (за исключением случая его расширения для создания пользовательского компоновщика потока).</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/flowComposer"><linktext>flashx.textLayout.elements.TextFlow.flowComposer</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:FlowComposerBase:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.compose:FlowComposerBase:damage"><apiName>damage</apiName><shortdesc conref="IFlowComposer#damage()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>начало поврежденного диапазона
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>число поврежденных символов
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>тип повреждения. Один из flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#damage()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc conref="IFlowComposer#findLineAtPosition()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>TextFlowLine, включающий содержимое в указанной позиции, либо null, если не найдено.
		
		</apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Позиция содержимого, для которой требуется определить объект TextFlowLine.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает возвращаемую строку, если позиция находится между последним элементом одной линии и первым элементом следующей.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#findLineAtPosition()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc conref="IFlowComposer#findLineIndexAtPosition()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Индекс текстовой строки в указанной позиции. Если не найден, обрабатывается как значение за пределами конца строки, и возвращается количество строк.
		 	 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Позиция содержимого, для которой требуется определить текстовую строку.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает индекс контейнера для возврата, если позиция находится между последней строкой одного контейнера и первой строкой следующего.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#findLineIndexAtPosition()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:getLineAt"><apiName>getLineAt</apiName><shortdesc conref="IFlowComposer#getLineAt()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>TextFlowLine с указанным номером строки, либо <codeph>null</codeph>, если значение не найдено.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	Номер возвращаемой строки объекта TextFlowLine.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getLineAt()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:isDamaged"><apiName>isDamaged</apiName><shortdesc conref="IFlowComposer#isDamaged()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true, если любой из объектов TextFlowLine с начала потока до строки, включающей содержимое в позиции <codeph>absolutePosition</codeph>, отмечен как поврежденный.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Последняя позиция в рассматриваемой области.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#isDamaged()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:updateLengths"><apiName>updateLengths</apiName><shortdesc conref="IFlowComposer#updateLengths()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>Начало изменения длины
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>Изменение числа символов.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#updateLengths()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:FlowComposerBase:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 Абсолютная позиция, непосредственно предшествующая первому элементу текстового потока, который требует компоновки и обновления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Абсолютная позиция, непосредственно предшествующая первому элементу текстового потока, который требует компоновки и обновления.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:numLines:get"><apiName>numLines</apiName><shortdesc conref="IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Экземпляр ISWFContext, используемый для создания, при необходимости, вызовов FTE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Экземпляр ISWFContext, используемый для создания, при необходимости, вызовов FTE. 
		
		<p>По умолчанию реализация ISWFContext является объектом FlowComposerBase. Приложения могут предоставлять пользовательскую реализацию для использования шрифтов, встроенных в другой файл SWF, или для кэширования и повторного использования текстовых строк.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		Объект TextFlow, к которому присоединен этот компоновщик потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		Объект TextFlow, к которому присоединен этот компоновщик потока. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:ISWFContext"><apiName>ISWFContext</apiName><shortdesc> 
	 Интерфейс ISWFContext позволяет SWF-файлу использовать свой контекст совместно с другими загружающими его SWF-файлами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 Интерфейс ISWFContext позволяет SWF-файлу использовать свой контекст совместно с другими загружающими его SWF-файлами. Приложение, которое загружает SWF-файл типа ISWFContext, может вызывать методы в контексте загруженного SWF-файла. Основным использованием является вызов методов TextLine создания строки FTE.
	 
	 <p>Приложение может использовать этот интерфейс для управления созданием TextLine по двум причинам. </p>
	 <ul>
	   <li><b>Многократное использование встроенного шрифта: </b> если приложению требуется использовать шрифт, встроенный в загруженный SWF-файл, оно может получить доступ к шрифту, если объект TextLine создан в контексте загруженного SWF-файла.</li>
	   <li><b>Многократное использование существующих экземпляров TextLine</b>: это позволяет быстрее выполнять повторную компоновку существующих экземпляров TextLine. TLF многократно использует существующие экземпляры TextLine во внутреннем режиме. TLF повторно использует объект TextLine путем вызова метода <codeph>TextBlock.recreateTextLine()</codeph> вместо <codeph>TextBlock.createTextLine()</codeph>, когда TLF распознает, что TextLine уже существует.</li>
	 </ul>
	 
	 
	 <p>В приложении могут быть дополнительные объекты TextLine, доступные для многократного использования. Чтобы повторно использовать существующие экземпляры TextLine вручную, выполните следующие действия.</p>
	 <ol>
	   <li>Перехватывайте вызовы <codeph>TextBlock.createTextLine()</codeph>, а затем</li>
	   <li>вызовите метод <codeph>TextBlock.recreateTextLine()</codeph> с существующим объектом TextLine вместо метода <codeph>TextBlock.createTextLine()</codeph>.</li>
	 </ol>
	 <p>Однако следует учитывать, что метод <codeph>TextBlock.recreateTextLine()</codeph> доступен только Flash Player 10.1 и более поздних версиях.</p>
	 
	 </apiDesc><example conref="examples\EmbeddedFontLineCreator.as"/><example conref="examples\FontConsumer.as"/></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>flash.text.engine.TextBlock.createTextLine()</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/recreateTextLine()"><linktext>flash.text.engine.TextBlock.recreateTextLine()</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:ISWFContext:flashx.textLayout.compose:ISWFContext:callInContext"><apiName>callInContext</apiName><shortdesc>
	      Способ вызова метода в контексте, управляемом клиентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>При любом значении, возвращаемом функцией.
	     
	      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>Вызываемая функция или метод
	      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>Указатель функции
	      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>Аргументы функции
	      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если true, функция возвращает значение
	     
	      </apiDesc></apiParam></apiOperationDef><apiDesc>
	      Способ вызова метода в контексте, управляемом клиентом.
	     
	      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.xml#Function/apply()"><linktext>Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:IFlowComposer"><apiName>IFlowComposer</apiName><shortdesc>
	 IFlowComposer определяет интерфейс для управления макетом и отображением текстового потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 IFlowComposer определяет интерфейс для управления макетом и отображением текстового потока.
	 
	 <p>Текстовые потоки, отображаемые посредством реализации компоновщика потока, могут быть динамическими и интерактивными. Компоновщик потока управляет одним или несколькими видеоконтроллерами. Каждый контроллер связан с контейнером экранных объектов (например, Sprite), что, в конечном счете, позволяет отображать строки, создаваемые для текстового потока. Следующая схема иллюстрирует связь между объектами TextFlow, IFlowComposer, ContainerController и DisplayObjectContainer:</p>
	 
	 <p><adobeimage alt="IFlowComposer" href="../../../images/textLayout_singleController.gif"/></p>
	 
	 <p>Компоновщик потока определяет, какая часть текстового потока соответствует каждому контейнеру, и добавляет соответствующие текстовые строки к экранному объекту контейнера. Интерфейс IFlowComposer определяет отдельные методы для вычисления макетов и обновления экрана. IFlowComposer также определяет методы для поэтапной компоновки и обновления текстового потока. Эти методы могут использоваться для предотвращения блокировки пользовательского интерфейса при обновлении длинных текстовых потоков.</p>
	 
	 <p>В дополнение к управлению формированием и отображением текста, компоновщик потока управляет передачей фокуса на контейнеры и выделением диапазона (который может выходить за границы контейнера), а также обеспечивает прямой доступ ко всем объектам TextLine в потоке.</p>
	 
	 <p>Для использования реализации IFlowComposer следует присвоить экземпляр этой реализации свойству <codeph>flowComposer</codeph> объекта TextFlow. Выполните вызов метода <codeph>updateAllControllers()</codeph> для размещения и отображения текста в контейнерах, присоединенных к компоновщику потока.</p>
	 
	 <p><b>Примечание.</b> Для простых статических текстовых потоков можно также использовать один из заводских классов текстовой строки. Эти классы фабрики обычно создают строки с меньшим количеством служебных данных, чем компоновщик потока, однако в этом случае редактирование, динамические изменения или взаимодействие с пользователем не поддерживаются.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link><link href="flashx.textLayout.compose.xml#FlowComposerBase"><linktext>FlowComposerBase</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.factory.xml#StringTextLineFactory"><linktext>StringTextLineFactory</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>TextFlowTextLineFactory</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc> 
		 Добавляет контроллер к этому экземпляру IFlowComposer в указанной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Добавляемый объект ContainerController.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Числовой индекс, указывающий позицию в списке контроллера для вставки объекта ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Добавляет контроллер к этому экземпляру IFlowComposer в указанной позиции индекса.
		 
		 <p>Список контроллеров формируется с нуля (первый контроллер имеет индекс 0).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addController"><apiName>addController</apiName><shortdesc> 
		 Добавляет контроллер к этому экземпляру IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Добавляемый объект ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Добавляет контроллер к этому экземпляру IFlowComposer.
		 
		 <p>Контейнер добавляется в конец списка контейнеров.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc> 
		 Выполняет компоновку содержимого корневого элемента, включая контейнер в указанной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Выполняется компоновка, по крайней мере, до этого контейнера в TextFlow. Если controllerIndex превышает количество контроллеров, компоновка выполняется до конца последнего контейнера.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет компоновку содержимого корневого элемента, включая контейнер в указанной позиции индекса.
		 
		 <p>Если содержимое какого-либо из контейнеров, включая контейнер в указанной позиции индекса, изменилось, метод возвращает значение <codeph>true</codeph>. Если <codeph>индекс</codeph> превышает количество контроллеров (или он не указан), тогда выполняется компоновка всех контейнеров.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc> 
		 Выполняет компоновку содержимого корневого элемента вплоть до указанной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Выполняется компоновка, по крайней мере, до этой позиции в TextFlow. По умолчанию, или если absolutePosition находится за пределами конца потока, компоновка выполняется до конца потока.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет компоновку содержимого корневого элемента вплоть до указанной позиции.
		 
		 <p>Если содержимое какого-либо контейнера, включая контейнер, которому принадлежит содержимое в указанной позиции, изменилось, метод возвращает значение <codeph>true</codeph>. Если <codeph>absolutePosition</codeph> превышает длину TextFlow (или данные не указаны), тогда выполняется компоновка всего потока.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Вычисляет количество строк, необходимое для отображения содержимого корневого элемента потока, и указывает позиции этих строк в контейнерах отображения потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Вычисляет количество строк, необходимое для отображения содержимого корневого элемента потока, и указывает позиции этих строк в контейнерах отображения потока.
		 
		 <p>Реализации этого метода не обновляют изображение на экране, однако они сохраняют результаты, таким образом, при последующих вызовах методов <codeph>compose()</codeph> или <codeph>updateAllControllers()</codeph> не требуется выполнять повторную компоновку, если содержимое потока не изменилось.</p>
		 
		 <p>Если содержимое какого-либо из контейнеров изменилось, метод должен возвращать значение <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damage"><apiName>damage</apiName><shortdesc> Пометить строки как поврежденные и требующие восстановления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>начало поврежденного диапазона
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>число поврежденных символов
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>тип повреждения. Один из flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Пометить строки как поврежденные и требующие восстановления.
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#FlowDamageType"><linktext>flashx.textLayout.compose.FlowDamageType</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Возвращает индекс контроллера, включающего содержимое в указанной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс контроллера контейнера, либо-1, если таковой не обнаружен.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Позиция содержимого, для которого обнаружен индекс контейнера.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает индекс контейнера для возврата, если позиция находится между последним элементом одного контейнера и первым элементом следующего.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает индекс контроллера, включающего содержимое в указанной позиции. 
		 
		 <p>Позиция может рассматриваться в качестве разделителя между двумя символами или другими элементами текстового потока. Если значение в <codeph>absolutePosition</codeph> является позицией между последним символом одного контейнера и первым символом следующего, то в том случае, если параметр <codeph>preferPrevious</codeph> имеет значение <codeph>true</codeph>, возвращается предшествующий контейнер, а том случае, если для параметра <codeph>preferPrevious</codeph> установлено значение <codeph>false</codeph>, возвращается последующий контейнер.</p>
		 
		 <p>Метод возвращает значение -1, если содержимое в указанной позиции не принадлежит ни одному из контейнеров или находится за пределами диапазона позиций в текстовом потоке.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc> 
		Возвращает объект TextFlowLine, включающий содержимое в указанной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFlowLine, включающий содержимое в указанной позиции, либо null, если не найдено.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Позиция содержимого, для которой требуется определить объект TextFlowLine.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает возвращаемую строку, если позиция находится между последним элементом одной линии и первым элементом следующей.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Возвращает объект TextFlowLine, включающий содержимое в указанной позиции.
		
		<p>Позиция может рассматриваться в качестве разделителя между двумя символами или другими элементами текстового потока. Если значение <codeph>absolutePosition</codeph> является позицией между последним элементом одной строки и первым элементом следующей, то возвращается предшествующая строка в том случае, если параметр <codeph>preferPrevious</codeph> имеет значение <codeph>true</codeph>, если же параметр <codeph>preferPrevious</codeph> имеет значение <codeph>false</codeph>, возвращается последующая строка.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc> 
		 Возвращает порядковый номер строки объекта TextFlowLine, который включает содержимое в указанной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс текстовой строки в указанной позиции. Если не найден, обрабатывается как значение за пределами конца строки, и возвращается количество строк.
		 	 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Позиция содержимого, для которой требуется определить текстовую строку.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает индекс контейнера для возврата, если позиция находится между последней строкой одного контейнера и первой строкой следующего.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает порядковый номер строки объекта TextFlowLine, который включает содержимое в указанной позиции. 
		 
		 <p>Номер первой строки равен 0, номер последней строки равен количеству строк минус один. Если позиция, указанная значением <codeph>absolutePosition</codeph>, находится за пределами конца текстового потока, этот метод возвращает номер, который будет присвоен следующей новой строке, добавляемой к текстовому потоку (равный количеству текущих строк).</p>
		 
		 <p>Позиция может рассматриваться в качестве разделителя между двумя символами или другими элементами текстового потока. Если значение в <codeph>absolutePosition</codeph> является позицией между последней строкой одного контейнера и первой строкой следующего, то в случае, если параметр <codeph>preferPrevious</codeph> имеет значение <codeph>true</codeph>, возвращается предшествующий контейнер, а в том случае, если для параметра <codeph>preferPrevious</codeph> установлено значение <codeph>false</codeph>, возвращается последующий контейнер.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc> 
		 Возвращает объект ContainerController в указанной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект ContainerController в указанной позиции.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс возвращаемого объекта ContainerController.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает объект ContainerController в указанной позиции индекса. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc> 
		 Возвращает индекс указанного объекта ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс указанного объекта ContainerController, либо -1, если контроллер не присоединен к этому компоновщику потока.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Ссылка на объект ContainerController, который требуется найти.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает индекс указанного объекта ContainerController. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getLineAt"><apiName>getLineAt</apiName><shortdesc> 
		 Возвращает строку с указанным номером.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFlowLine с указанным номером строки, либо <codeph>null</codeph>, если значение не найдено.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	Номер возвращаемой строки объекта TextFlowLine.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает строку с указанным номером. 
		 
		 <p>Список строк нумеруется от нуля до значения, равного количеству строк минус один. Если значение <codeph>index</codeph> находится за пределами списка строк, то эта функция возвращает <codeph>null</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Вызывается TextFlow при изменении диспетчера операций.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>Новый экземпляр ISelectionManager.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Вызывается TextFlow при изменении диспетчера операций. 
		 
		 <p>Реализации IFlowComposer должны обновлять прослушиватели событий и свойства, ссылающиеся на диспетчер операций.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Указывает, отмечены ли какие-либо объекты TextFlowLine между началом потока и строкой, включающей содержимое в указанной позиции, как поврежденные.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true, если любой из объектов TextFlowLine с начала потока до строки, включающей содержимое в позиции <codeph>absolutePosition</codeph>, отмечен как поврежденный.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Последняя позиция в рассматриваемой области.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Указывает, отмечены ли какие-либо объекты TextFlowLine между началом потока и строкой, включающей содержимое в указанной позиции, как поврежденные. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc> 
		 Удаляет все контроллеры из этого экземпляра IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Удаляет все контроллеры из этого экземпляра IFlowComposer. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc> 
		 Удаляет контроллер в указанной позиции индекса из этого экземпляра IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс удаляемого объекта ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Удаляет контроллер в указанной позиции индекса из этого экземпляра IFlowComposer.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeController"><apiName>removeController</apiName><shortdesc> 
		 Удаляет контроллер из этого экземпляра IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Удаляемый экземпляр ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Удаляет контроллер из этого экземпляра IFlowComposer. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Устанавливает фокус на контейнер, который содержит местоположение, указанное параметром absolutePosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Указывает позицию в текстовом потоке контейнера, в которую должен быть передан фокус.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если установлено значение true, и позиция находится перед первым символом в контейнере, фокус устанавливается на конец предыдущего контейнера.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Устанавливает фокус на контейнер, который содержит местоположение, указанное параметром <codeph>absolutePosition</codeph>. 
		 
		 <p>Установка фокуса должна выполняться реализацией. Например, реализация может использовать встроенное свойство <codeph>focus</codeph> объекта Stage (при условии, что контейнеры являлись объектами InteractiveObject), либо управление фокусировкой может осуществляться другим способом.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Выполняет компоновку содержимого корневого элемента и обновляет экран.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Выполняет компоновку содержимого корневого элемента и обновляет экран.  
		 
		 <p>Формирование макета текста, как правило, включает две фазы: компоновку и отображение. На этапе компоновки компоновщик потока вычисляет количество строк, необходимое для отображения содержимого корневого элемента потока, а также позиции этих строк в контейнерах отображения потока. На этапе отображения компоновщик потока обновляет нижестоящие элементы экранных объектов в их контейнерах. Метод <codeph>updateAllControllers()</codeph> обеспечивает выполнение обеих фаз. При эффективной реализации изменения отслеживаются таким образом, что полный цикл компоновки и отображения выполняется только в случае необходимости.</p>
		 
		 <p>Этот метод позволяет выполнять немедленное синхронное обновление всех текстовых строк и списка отображения.</p>
		 
		 <p>При изменении содержимого какого-либо из контейнеров метод возвращает значение <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateLengths"><apiName>updateLengths</apiName><shortdesc> Обновляет значения длины строк для поддержания отображения в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>Начало изменения длины
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>Изменение числа символов.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Обновляет значения длины строк для поддержания отображения в TextFlow. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Выполняет компоновку и обновление отображения, включая контейнер в указанной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Индекс последнего обновляемого контейнера, по умолчанию обновляются все контейнеры
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет компоновку и обновление отображения, включая контейнер в указанной позиции индекса.
		 
		 <p>Метод <codeph>updateToController()</codeph> выполняет компоновку содержимого и обновляет отображение экрана таким образом, что обновляются все контейнеры, включая контейнер в указанной позиции индекса. Например, если имеется цепочка из двадцати контейнеров, и указан индекс 10, метод <codeph>updateToController()</codeph> обеспечивает компоновку и отображение первых десяти контейнеров (в позициях индекса от 0 до 9). В этой точке компоновка прекращается. Если <codeph>controllerIndex</codeph> имеет значение -1 (или его значение не указано), то обновляются все контейнеры.</p>
		 
		 <p>Этот метод позволяет выполнять немедленное синхронное обновление всех текстовых строк и списка отображения.</p>
		 
		 <p>При изменении содержимого какого-либо из контейнеров метод возвращает значение <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 Значение true, если компоновщик потока в настоящее время выполняет операцию компоновки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Значение true, если компоновщик потока в настоящее время выполняет операцию компоновки.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc> 
		 Первая недопустимая позиция в корневом элементе как абсолютная позиция, отсчитываемая от начала потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Первая недопустимая позиция в корневом элементе как абсолютная позиция, отсчитываемая от начала потока.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc> 
		 Количество контейнеров, присвоенных этому экземпляру IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Количество контейнеров, присвоенных этому экземпляру IFlowComposer. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numLines:get"><apiName>numLines</apiName><shortdesc> 
		 Общее количество строк в потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Общее количество строк в потоке. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Корневой элемент, связанный с данным экземпляром IFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Корневой элемент, связанный с данным экземпляром IFlowComposer. 
		 
		 <p>Корневым элементом может быть только объект TextFlow.</p>
		  
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		 Экземпляр ISWFContext, используемый для вызовов, которые необходимо выполнить в специальном контексте SWF. Реализации IFlowComposer позволяют установить это свойство таким образом, чтобы пользователи интерфейса могли создавать строки в контексте SWF, отличном от содержащего реализацию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		 Экземпляр ISWFContext, используемый для вызовов, которые необходимо выполнить в специальном контексте SWF  
		 
		 <p>Реализации IFlowComposer должны обеспечить установку этого свойства таким образом, чтобы пользователи интерфейса могли создавать строки в контексте SWF, отличном от контекста, содержащего реализацию. Кроме того, должна предоставляться реализация ISWFContext по умолчанию.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.elements.ISWFContext.xml"><linktext>ISWFContext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
	Класс StandardFlowComposer предоставляет стандартный компоновщик и диспетчер контейнеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="createBackgroundManager"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:IFlowComposer</apiBaseInterface><apiBaseClassifier>flashx.textLayout.compose:FlowComposerBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	Класс StandardFlowComposer предоставляет стандартный компоновщик и диспетчер контейнеров. 
	
	<p>Каждый вызов методов <codeph>compose()</codeph> или <codeph>updateAllControllers()</codeph> нормализует процесс обработки текста в качестве первого шага. При выполнении нормализованного процесса осуществляется проверка измененных частей объекта TextFlow, и выполняются следующие действия:
	<ol>
	<li> Удаляются пустые объекты FlowLeafElement и SubParagraphGroupElement.</li>
	<li> Объединяются диапазоны элементов одного уровня, имеющие идентичные атрибуты.</li>
	<li> Добавляется пустой абзац, если поток является пустым.</li>
 	</ol>
 	</p>
	
	<p>Для использования StandardFlowComposer следует присвоить его свойству <codeph>flowComposer</codeph> объекта TextFlow. Выполните вызов метода <codeph>updateAllControllers()</codeph> для размещения и отображения текста в контейнерах, присоединенных к компоновщику потока.</p>
	
	<p><b>Примечание.</b> Для простых статических текстовых потоков можно также использовать один из заводских классов текстовой строки. Эти классы фабрики обычно создают строки с меньшим количеством служебных данных, чем компоновщик потока, однако в этом случае редактирование, динамические изменения или взаимодействие с пользователем не поддерживаются.</p>
	
	</apiDesc><example conref="examples\StandardFlowComposer_ClassExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/flowComposer"><linktext>flashx.textLayout.elements.TextFlow.flowComposer</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:StandardFlowComposer:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
		Создает объект StandardFlowComposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		Создает объект StandardFlowComposer. 
		
		<p>Для использования объекта StandardFlowComposer следует присвоить его свойству <codeph>flowComposer</codeph> объекта TextFlow. Выполните вызов метода <codeph>updateAllControllers()</codeph> для размещения и отображения текста в контейнерах, присоединенных к компоновщику потока.</p>
		
		</apiDesc><example conref="examples\StandardFlowComposer_constructor.as"/></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc conref="IFlowComposer#addControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Добавляемый объект ContainerController.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Числовой индекс, указывающий позицию в списке контроллера для вставки объекта ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#addControllerAt()"> </apiDesc><example conref="examples\StandardFlowComposer_addControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addController"><apiName>addController</apiName><shortdesc conref="IFlowComposer#addController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Добавляемый объект ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#addController()"> </apiDesc><example conref="examples\StandardFlowComposer_addController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc conref="IFlowComposer#composeToController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true при изменении значения.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Выполняется компоновка, по крайней мере, до этого контейнера в TextFlow. Если controllerIndex превышает количество контроллеров, компоновка выполняется до конца последнего контейнера.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#composeToController()"> </apiDesc><example conref="examples\StandardFlowComposer_composeToController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc conref="IFlowComposer#composeToPosition()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>true при изменении значения.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Выполняется компоновка, по крайней мере, до этой позиции в TextFlow. По умолчанию, или если absolutePosition находится за пределами конца потока, компоновка выполняется до конца потока.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#composeToPosition()"> </apiDesc><example conref="examples\StandardFlowComposer_composeToPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Вычисляет количество строк, необходимое для отображения содержимого корневого элемента потока, и указывает позиции этих строк в контейнерах отображения потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Вычисляет количество строк, необходимое для отображения содержимого корневого элемента потока, и указывает позиции этих строк в контейнерах отображения потока.
		 
		 <p>Метод <codeph>compose()</codeph> обеспечивает компоновку содержимого только в том случае, если оно изменилось с момента последней операции компоновки. Результаты сохраняются, таким образом, при последующих вызовах методов <codeph>compose()</codeph> или <codeph>updateAllControllers()</codeph> не требуется выполнять повторную компоновку, если содержимое потока не изменилось.</p>
		 
		 <p>Если содержимое какого-либо из контейнеров изменилось, метод возвращает значение <codeph>true</codeph>.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_compose.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Возвращает индекс контроллера, включающего содержимое в указанной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс контроллера контейнера, либо-1, если таковой не обнаружен.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Позиция содержимого, для которого обнаружен индекс контейнера.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает индекс контейнера для возврата, если позиция находится между последним элементом одного контейнера и первым элементом следующего.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает индекс контроллера, включающего содержимое в указанной позиции. 
		 
		 <p>Позиция может рассматриваться в качестве разделителя между двумя символами или другими элементами текстового потока. Если значение в <codeph>absolutePosition</codeph> является позицией между последним символом одного контейнера и первым символом следующего, то в том случае, если параметр <codeph>preferPrevious</codeph> имеет значение <codeph>true</codeph>, возвращается предшествующий контейнер, а в том случае, если для параметра <codeph>preferPrevious</codeph> установлено значение <codeph>false</codeph>, возвращается последующий контейнер.</p>
		 
		 <p>Этот метод возвращает значение -1, если содержимое в указанной позиции не содержится ни в одном из контейнеров или не принадлежит диапазону позиций в текстовом потоке.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_findControllerIndexAtPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc> 
		 Возвращает абсолютную позицию первого элемента содержимого указанного объекта ContainerController.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Позиция перед первым символом или графическим элементом в ContainerController.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Объект ContainerController, связанный с этим композитором потока.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает абсолютную позицию первого элемента содержимого указанного объекта ContainerController.
		 
		 <p>Позиция вычисляется путем отсчета от разделителя между двумя символами или другими элементами текстового потока. Позиция, предшествующая первому элементу потока, является нулевой. Абсолютная позиция – это позиция, отсчитываемая от начала потока.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_getAbsoluteStart.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc conref="IFlowComposer#getControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Объект ContainerController в указанной позиции.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс возвращаемого объекта ContainerController.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getControllerAt()"> </apiDesc><example conref="examples\StandardFlowComposer_getControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc conref="IFlowComposer#getControllerIndex()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><player>version AIR 1.5
	 	 </player></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Индекс указанного объекта ContainerController, либо -1, если контроллер не присоединен к этому компоновщику потока.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Ссылка на объект ContainerController, который требуется найти.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getControllerIndex()"> </apiDesc><example conref="examples\StandardFlowComposer_getControllerIndex.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Вызывается TextFlow при изменении диспетчера операций.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>Новый экземпляр ISelectionManager.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Вызывается TextFlow при изменении диспетчера операций. 
		 
		 <p>Эта функция вызывается автоматически. Как правило, вызывать этот метод в коде не требуется. Классы, расширяющие StandardFlowComposer, могут обновлять прослушиватели событий и другие свойства, зависящие от диспетчера операций.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:protected:preCompose"><apiName>preCompose</apiName><shortdesc> Возвращает значение true, если компоновщик является необходимым, в противном случае возвращается значение false </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Возвращает значение true, если компоновщик является необходимым, в противном случае возвращается значение false </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc conref="IFlowComposer#removeAllControllers()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IFlowComposer#removeAllControllers()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc conref="IFlowComposer#removeControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс удаляемого объекта ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#removeControllerAt()"> </apiDesc><example conref="examples\StandardFlowController_removeControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeController"><apiName>removeController</apiName><shortdesc conref="IFlowComposer#removeController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Удаляемый экземпляр ContainerController.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#removeController()"> </apiDesc><example conref="examples\StandardFlowController_removeController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Устанавливает фокус на контейнер, который содержит местоположение, указанное параметром absolutePosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Указывает позицию в текстовом потоке контейнера, в которую должен быть передан фокус.
		 </apiDesc></apiParam><apiParam><apiItemName>leanLeft</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если установлено значение true, и позиция находится перед первым символом в контейнере, фокус устанавливается на конец предыдущего контейнера.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Устанавливает фокус на контейнер, который содержит местоположение, указанное параметром <codeph>absolutePosition</codeph>. 
		 
		 <p>StandardFlowComposer выполняет вызов метода <codeph>setFocus()</codeph> объекта ContainerController, содержащего указанную текстовую позицию потока.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc conref="IFlowComposer#setRootElement()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#setRootElement()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Выполняет компоновку содержимого корневого элемента и обновляет экран.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Выполняет компоновку содержимого корневого элемента и обновляет экран.  
		 
		 <p>Формирование макета текста включает две фазы: компоновку и отображение. На этапе компоновки компоновщик потока вычисляет количество строк, необходимое для отображения содержимого корневого элемента потока, а также позиции этих строк в контейнерах отображения потока. На этапе отображения компоновщик потока обновляет нижестоящие элементы экранных объектов в их контейнерах. Метод <codeph>updateAllControllers()</codeph> обеспечивает последовательную инициацию обеих фаз. StandardFlowComposer отслеживает изменения содержимого в целях выполнения полного цикла компоновки и отображения в случае необходимости.</p>
		 
		 <p>Этот метод позволяет выполнять немедленное синхронное обновление всех текстовых строк и списка отображения.</p>
		 
		 <p>Если содержимое какого-либо из контейнеров изменилось, метод возвращает значение <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Выполняет компоновку и обновление отображения, включая контейнер в указанной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при изменении значения.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Индекс последнего обновляемого контейнера (по умолчанию обновляются все контейнеры)
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет компоновку и обновление отображения, включая контейнер в указанной позиции индекса.
		 
		 <p>Метод <codeph>updateToController()</codeph> выполняет компоновку содержимого и обновляет отображение всех контейнеров, включая контейнер в указанной позиции индекса. Например, если имеется цепочка из 20 контейнеров, и указан индекс 10, метод <codeph>updateToController()</codeph> обеспечивает компоновку и отображение первых десяти контейнеров (в позициях индекса от 0 до 9). В этой точке компоновка прекращается. Если <codeph>controllerIndex</codeph> имеет значение -1 (или его значение не указано), то обновляются все контейнеры.</p>
		 
		 <p>Этот метод позволяет выполнять немедленное синхронное обновление всех текстовых строк и списка отображения.</p>
		 
		 <p>Если содержимое какого-либо из контейнеров изменилось, метод возвращает значение <codeph>true</codeph>.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:StandardFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 Значение true, если компоновщик потока в настоящее время выполняет операцию компоновки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Значение true, если компоновщик потока в настоящее время выполняет операцию компоновки. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc conref="IFlowComposer#numControllers"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="IFlowComposer#numControllers"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc conref="IFlowComposer#rootElement"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc conref="IFlowComposer#rootElement"> </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:IVerticalJustificationLine"><apiName>IVerticalJustificationLine</apiName><shortdesc> 
	 В интерфейсе IVerticalJustificationLine определяются методы и свойства, необходимые для разрешения вертикального выравнивания текстовых строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 В интерфейсе IVerticalJustificationLine определяются методы и свойства, необходимые для разрешения вертикального выравнивания текстовых строк.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:ascent:get"><apiName>ascent</apiName><shortdesc conref="flash.text.engine.TextLine#ascent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#ascent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:descent:get"><apiName>descent</apiName><shortdesc conref="flash.text.engine.TextLine#descent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#descent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:height:get"><apiName>height</apiName><shortdesc> Высота строки в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Высота строки в пикселях.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/width"><linktext>ширина</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:x:get"><apiName>x</apiName><shortdesc> 
		 Положение строки по горизонтали относительно ее контейнера, задаваемое смещением в пикселях от левого края контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Положение строки по горизонтали относительно ее контейнера, задаваемое смещением в пикселях от левого края контейнера.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:y:get"><apiName>y</apiName><shortdesc> 
		 Положение строки по вертикали относительно ее контейнера, задаваемое смещением в пикселях от верхнего края контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Положение строки по вертикали относительно ее контейнера, задаваемое смещением в пикселях от верхнего края контейнера.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLineLocation"><apiName>TextFlowLineLocation</apiName><shortdesc> 
	 Класс TextFlowLineLocation является классом перечисления, который определяет константы, указывающие местоположение строки внутри абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс TextFlowLineLocation является классом перечисления, который определяет константы, указывающие местоположение строки внутри абзаца.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:FIRST"><apiName>FIRST</apiName><shortdesc> Указывает первую строку в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc> Указывает первую строку в абзаце. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:LAST"><apiName>LAST</apiName><shortdesc> Указывает последнюю строку в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc> Указывает последнюю строку в абзаце.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Указывает только среднюю строку в абзаце (не первую и не последнюю строки).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc> Указывает только среднюю строку в абзаце (не первую и не последнюю строки). 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:ONLY"><apiName>ONLY</apiName><shortdesc> Указывает и первую и последнюю строки в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="uint"/></apiValueDef><apiDesc> Указывает и первую и последнюю строки в абзаце.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextLineRecycler"><apiName>TextLineRecycler</apiName><shortdesc> 
	 Класс TextLineRecycler предоставляет поддержку для повторного использования объектов TextLine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс TextLineRecycler предоставляет поддержку для повторного использования объектов TextLine. Некоторые версии проигрывателя поддерживают метод recreateTextLine. Передача объектов TextLine в средство повторного использования обеспечивает возможность их повторного использования. Такой подход позволяет оптимизировать быстродействия проигрывателя.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:TextLineRecycler:addLineForReuse"><apiName>addLineForReuse</apiName><shortdesc>
		 Добавление TextLine в пул для повторного использования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/></apiParam></apiOperationDef><apiDesc>
		 Добавление TextLine в пул для повторного использования. Объекты TextLine для повторного использования должны иметь значение null для userData и null для вышестоящего элемента. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextLineRecycler:getLineForReuse"><apiName>getLineForReuse</apiName><shortdesc>
		 Возврат TextLine из пула для повторного использования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.text.engine:TextLine"/></apiReturn></apiOperationDef><apiDesc>
		 Возврат TextLine из пула для повторного использования. 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:TextLineRecycler:textLineRecyclerEnabled:get"><apiName>textLineRecyclerEnabled</apiName><shortdesc> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowDamageType"><apiName>FlowDamageType</apiName><shortdesc>
	  Класс FlowDamageType является классом перечисления, определяющим типы повреждения для методов и событий повреждения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Класс FlowDamageType является классом перечисления, определяющим типы повреждения для методов и событий повреждения.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:FlowDamageType:GEOMETRY"><apiName>GEOMETRY</apiName><shortdesc>
		 Значение используется для установки свойства validity, если строка была признана недействительной из-за перемещения вокруг нее других строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>geometry</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Значение используется для установки свойства <codeph>validity</codeph>, если строка была признана недействительной из-за перемещения вокруг нее других строк. Повторное создание строки текста при следующей операции компоновки, возможно, и не потребуется. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowDamageType:INVALID"><apiName>INVALID</apiName><shortdesc> 
		 Определяет недопустимый тип повреждения, используемый в методе IFlowComposer при обработке повреждения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Определяет недопустимый тип повреждения, используемый в методе IFlowComposer при обработке повреждения.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue></apiClassifier></apiPackage>