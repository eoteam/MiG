<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.elements"><apiName>flashx.textLayout.elements</apiName><apiDetail/><apiClassifier id="flashx.textLayout.elements:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> Базовый класс для FlowElements, расположенных на самом низком уровне иерархии потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> Базовый класс для FlowElements, расположенных на самом низком уровне иерархии потока. Объекты FlowLeafElement не имеют нижестоящих элементов и включают объекты InlineGraphicElement и объекты SpanElement.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowLeafElement:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> 
		 Базовый класс – при вызове нового FlowLeafElement() выдается исключение ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Базовый класс – при вызове нового FlowLeafElement() выдается исключение ошибки. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getComputedFontMetrics"><apiName>getComputedFontMetrics</apiName><shortdesc> Возвращает объект FontMetrics для диапазона.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>метрики шрифта, связанные с диапазоном
		 </apiDesc><apiType value="flash.text.engine:FontMetrics"/></apiReturn></apiOperationDef><apiDesc> Возвращает объект FontMetrics для диапазона. Свойства объекта FontMetrics описывают emBox, положение зачеркивания, толщину зачеркивания, положение подчеркивания и толщину подчеркивания заданного шрифта. 
		 
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.FontMetrics.xml"><linktext>flash.text.engine.FontMetrics</linktext></link><link href="" invalidHref="flash.text.engine.xml#ElementFormat/getFontMetrics"><linktext>flash.text.engine.ElementFormat.getFontMetrics</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getNextLeaf"><apiName>getNextLeaf</apiName><shortdesc>
		 Возвращает следующий объект FlowLeafElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>следующий FlowLeafElement или null, если далее нет этого элемента
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает FlowGroupElement, на последнем листе которого должен быть остановлен поиск. Значение null (по умолчанию) означает, что поиск будет выполняться по всем элементам.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Возвращает следующий объект FlowLeafElement.  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getNextLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getPreviousLeaf"><apiName>getPreviousLeaf</apiName><shortdesc>
		 Возвращает предыдущий объект FlowLeafElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>предыдущий FlowLeafElement или null, если он расположен в конце
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает FlowGroupElement, на первом листе которого должен быть остановлен поиск. null (по умолчанию) означает, что поиск будет выполняться по всем элементам.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Возвращает предыдущий объект FlowLeafElement.  
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getPreviousLeafExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowLeafElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Вычисленные атрибуты формата текста, являющиеся действующими для этого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Вычисленные атрибуты формата текста, являющиеся действующими для этого элемента. Принимает во внимание наследование атрибутов.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowLeafElement:text:get"><apiName>text</apiName><shortdesc>
		 Текст, связанный с FlowLeafElement. Значение для подкласса SpanElement будет на один символ меньше, чем textLength, если данный диапазон является последним в ParagraphELement. Значение для подкласса BreakElement – U+2028. Значение для подкласса TabElement – табуляция. Значение для подкласса InlineGraphicElement – U+FDEF
		 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 Текст, связанный с FlowLeafElement:
		 <p><ul>
		 <li>Значение для подкласса SpanElement будет на один символ меньше, чем <codeph>textLength</codeph>, если данный диапазон является последним в ParagraphELement.</li>
		 <li>Значение для подкласса BreakElement – U+2028</li>
		 <li>Значение для подкласса TabElement – табуляция</li>
		 <li>Значение для подкласса InlineGraphicElement – U+FDEF</li>
		 </ul></p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#SpanElement/replaceText()"><linktext>flashx.textLayout.elements.SpanElement.replaceText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc> Класс SpecialCharacterElement является абстрактным базовым классом для элементов, представляющих специальные символы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier></apiClassifierDef><apiDesc> Класс SpecialCharacterElement является абстрактным базовым классом для элементов, представляющих специальные символы.
	 
	 <p>Объект SpecialCharacterElement невозможно создать непосредственно. Вызов <codeph>new SpecialCharacterElement()</codeph> создает исключения ошибки.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#BreakElement"><linktext>BreakElement</linktext></link><link href="flashx.textLayout.elements.xml#TabElement"><linktext>TabElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpecialCharacterElement:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc>  
		 Базовый класс – вызов new SpecialCharacterElement() создает исключения ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>  
		 Базовый класс – вызов <codeph>new SpecialCharacterElement()</codeph> создает исключения ошибки.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus"><apiName>InlineGraphicElementStatus</apiName><shortdesc> Класс InlineGraphicElementStatus определяет набор констант для проверки значения InLineGraphicElement.status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Класс InlineGraphicElementStatus определяет набор констант для проверки значения <codeph>InLineGraphicElement.status</codeph>.
     
     </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/status"><linktext>InlineGraphicElement.status</linktext></link></related-links><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:ERROR"><apiName>ERROR</apiName><shortdesc> Во время загрузки заданной графики произошла ошибка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc> Во время загрузки заданной графики произошла ошибка. 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOADING"><apiName>LOADING</apiName><shortdesc> Загрузка была инициирована (но не завершена) элементом графики, являющимся URL-адресом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc> Загрузка была инициирована (но не завершена) элементом графики, являющимся URL-адресом.  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOAD_PENDING"><apiName>LOAD_PENDING</apiName><shortdesc> Элемент графики является URL-адресом, который не был загружен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadPending</apiData><apiType value="String"/></apiValueDef><apiDesc> Элемент графики является URL-адресом, который не был загружен.  
    	 
    	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:READY"><apiName>READY</apiName><shortdesc> Графика полностью загружена и правильно установлена по размеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc> Графика полностью загружена и правильно установлена по размеру. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:SIZE_PENDING"><apiName>SIZE_PENDING</apiName><shortdesc> 
         Элемент графики с автоматически изменяемой или заданной в процентах шириной/высотой завершил загрузку, но не был восстановлен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sizePending</apiData><apiType value="String"/></apiValueDef><apiDesc> 
         Элемент графики с автоматически изменяемой или заданной в процентах шириной/высотой завершил загрузку, но не был восстановлен. При последующем восстановлении вычисляется фактический размер элемента графики. 
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextFlow"><apiName>TextFlow</apiName><shortdesc>
	 Класс TextFlow используется для управления всем текстовым содержимым статьи.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Класс TextFlow используется для управления всем текстовым содержимым статьи. В TextLayout текст хранится в виде иерархического дерева элементов. TextFlow – корневой объект дерева элемента. Все элементы дерева происходят от базового класса FlowElement. 
	 
	 <p>Объект TextFlow в качестве нижестоящих элементов может иметь объекты ParagraphElement и DivElement. Элемент div (объект DivElement) представляет группу абзацев (объекты ParagraphElement). Абзац может иметь в качестве нижестоящих элементов объекты SpanElement, InlineGraphicElement, LinkElement и TCYElement.</p>
	 
	 <p>Элемент диапазона (SpanElement) является диапазоном текста в абзаце, имеющим одинаковые атрибуты. Изображение (InlineGraphicElement) представляет произвольную графику, отображаемую в виде отдельного символа в строке текста. LinkElement представляет гиперссылку или HTML-тег <codeph>a</codeph>. Он может содержать несколько диапазонов. Объект TCYElement используется для японского языка для отображения небольшого фрагмента текста, направленного перпендикулярно к строке, то есть в виде горизонтально направленной строки текста в вертикальной строке. TCYElement может также содержать несколько диапазонов.</p>
	 
	 <p>TextFlow также происходит от класса ContainerFormattedElement, который является корневым классом для всех элементов блока уровня контейнера.</p>
 	 <p>На следующей иллюстрации показано отношение других элементов, например, диапазонов и абзацев, к объекту TextFlow.</p>
 	 <p><adobeimage alt="пример иерархии TextFlow" href="../../../images/textLayout_textFlowHierarchy.gif"/></p>
 	 
 	 <p>Каждый объект TextFlow имеет соответствующий объект Configuration, что позволяет указывать начальные форматы символа и абзаца и начальный формат контейнера. Также можно указывать атрибуты для выделения, ссылок, фокуса и прокрутки. При использовании объекта Configuration в качестве параметра конструктора <codeph>TextFlow()</codeph> создается доступный только для чтения снимок, к которому можно получить доступ через свойство <codeph>TextFlow.configuration</codeph>. После его создания конфигурацию TextFlow изменить невозможно. Если Configuration не указан, получить доступ к стандартной конфигурации можно через свойство <codeph>TextFlow.defaultConfiguration</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextFlowExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Передается объектом TextFlow каждый раз при добавлении к контейнеру новых DisplayObject или обновлении их в результате создания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается объектом TextFlow каждый раз при добавлении к контейнеру новых DisplayObject или обновлении их в результате создания.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Передается объектом TextFlow при каждом повреждении. Это событие можно использовать для обнаружения изменения TextFlow, однако непосредственный доступ к TextFlow при отправке этого события невозможен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Отправляется объектом TextFlow при каждом повреждении. Это событие можно использовать для обнаружения изменения TextFlow, однако непосредственный доступ к TextFlow при отправке этого события невозможен. Это событие передается после частичного выполнения изменений TextFlow, таким образом, может наблюдаться несогласованное состояние: некоторые изменения уже внесены, тогда как другие изменения еще ожидают выполнения. Событие предоставляет необходимую информацию, и после возврата управления к приложению можно внести требуемые изменения.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Передается объектом TextFlow после прокрутки текста в контейнере контроллера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается объектом TextFlow после прокрутки текста в контейнере контроллера.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Передается при изменении размера InlineGraphicElement вследствие установки для ширины или высоты значения auto или процентного значения после окончания загрузки изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при изменении размера InlineGraphicElement вследствие установки для ширины или высоты значения auto или процентного значения после окончания загрузки изображения. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Передается при нажатии любой ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при нажатии любой ссылки. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Передается при снятии указателя мыши с любой ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при снятии указателя мыши с любой ссылки. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Передается при первом наведении указателя мыши на любую ссылку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при первом наведении указателя мыши на любую ссылку. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Передается при прохождении указателя мыши над любой ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при прохождении указателя мыши над любой ссылкой. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Передается, когда указатель мыши находится над какой-либо ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается, когда указатель мыши находится над какой-либо ссылкой. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Передается при нажатии кнопки мыши над любой ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при нажатии кнопки мыши над любой ссылкой. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Передается после каждой перекомпоновки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается после каждой перекомпоновки. 
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Передается при каждом изменении выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Передается при каждом изменении выбора. Первоначально используется для обновления пользовательского интерфейса, зависимого от выбора. С его помощью также можно изменить выделенную область, однако изменить сам объект TextFlow нельзя.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:TextFlow:TextFlow"><apiName>TextFlow</apiName><shortdesc> 
		 Конструктор создает новый экземпляр TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>config</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>Указывает конфигурацию, используемую для этого объекта TextFlow. При значении null используйте <codeph>TextFlow.defaultConfiguration</codeph> для доступа к значениям конфигурации. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Конструктор создает новый экземпляр TextFlow.
		 
		 <p>Если предоставляется параметр <codeph>config</codeph>, содержимое объекта Configuration копируется, после чего внести изменения невозможно. Однако доступ к параметрам настройки конфигурации можно получить с помощью свойства <codeph>configuration</codeph>. Если параметр <codeph>config</codeph> имеет значение null, получить доступ к параметрам настройки стандартной конфигурации можно через свойство <codeph>defaultConfiguration</codeph>.</p> 
		 
		 <p>Объект Configuration предоставляет механизм для установки в TextFlow стандартных настраиваемых атрибутов. Несмотря на то, что внести изменения в объект Configuration невозможно, при необходимости стандартные атрибуты можно переопределить путем установки атрибутов TextFlow и его нижестоящих элементов.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Конфигурация</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextFlow:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementByID"><apiName>getElementByID</apiName><shortdesc> Возвращает элемент, свойство id которого соответствует параметру idName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Элемент, свойство id которого соответствует <codeph>idName</codeph>.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>idName</apiItemName><apiType value="String"/><apiDesc>Значение <codeph>id</codeph> искомого элемента.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Возвращает элемент, свойство <codeph>id</codeph> которого соответствует параметру <codeph>idName</codeph>. Предоставляет возможность применения стиля на основе <codeph>id</codeph>. 
		 
		 <p>Например, следующий код задает стилю color значение 0xFF0000 (красный) для элемента, имеющего <codeph>id</codeph> span1.</p>
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 <p><b>Примечание.</b> В нижеприведенном коде <codeph>p.addChild(s)</codeph> <i>удаляет</i> <codeph>s</codeph> из исходного вышестоящего элемента и добавляет его в новый вышестоящий элемент <codeph>p</codeph>.</p>
		 
		 <codeblock rev="3.0">
		 var s:SpanElement = new SpanElement();
		 var p:ParagraphElement = new ParagraphElement();
		 ...
		 s = textFlow.getElementByID("span3") as SpanElement;
		 p.addChild(s);
		 textFlow.addChild(p);
		 </codeblock>
		 
		 </apiDesc><example conref="examples\TextFlow_getElementByIDExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/id"><linktext>FlowElement.id</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByStyleName"><apiName>getElementsByStyleName</apiName><shortdesc> Возвращает все элементы, styleName которых имеет значение styleNameValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив элементов, значение <codeph>styleName</codeph> которого соответствует <codeph>styleNameValue</codeph>. Например, все элементы, имеющие имя стиля color.
		 
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>styleNameValue</apiItemName><apiType value="String"/><apiDesc>Имя стиля, используемое для поиска элементов с данным именем.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Возвращает все элементы, <codeph>styleName</codeph> которых имеет значение <codeph>styleNameValue</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:invalidateAllFormats"><apiName>invalidateAllFormats</apiName><shortdesc> Признает недействительной всю информацию о форматировании для TextFlow, в результате чего форматирование должно быть принудительно пересчитано.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Признает недействительной всю информацию о форматировании для TextFlow, в результате чего форматирование должно быть принудительно пересчитано. Этот метод вызывается, если стили были изменены.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver/invalidateAll"><linktext>IFormatResolver.invalidateAll</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextFlow:defaultConfiguration"><apiName>defaultConfiguration</apiName><shortdesc> Стандартная конфигурация, используемая для всех новых объектов TextFlow, если не указана иная настройка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>flashx.textLayout.elements:Configuration</apiValueClassifier></apiValueDef><apiDesc> Стандартная конфигурация, используемая для всех новых объектов TextFlow, если не указана иная настройка. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Конфигурация</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:configuration:get"><apiName>configuration</apiName><shortdesc> 
		Объект Configuration для данного объекта TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		Объект Configuration для данного объекта TextFlow. Объект Configuration указывает начальный формат символов и абзаца, начальный формат контейнера и атрибуты для выделения, ссылок, фокуса и прокрутки.
		
		<p>Если объект Configuration не указан, Text Layout Framework использует стандартный объект Configuration, на который ссылается свойство <codeph>defaultConfiguration</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Конфигурация</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> Управляет контейнерами для этого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> Управляет контейнерами для этого элемента.
		 
		 <p>TextLines, созданные из элемента, отображаются как нижестоящие элементы контейнера. flowComposer управляет контейнерами, и по мере редактирования текста он добавляет и удаляет строки из контейнеров. flowComposer также отслеживает некоторые критические атрибуты, например, ширину и высоту для выполнения компоновки, активность прокручивания и т.д.</p>
		 
		 <p>Контейнер и <codeph>flowComposer</codeph> являются близко связанными элементами. При сбросе <codeph>flowComposer</codeph> контейнер сбрасывается к новому контейнеру flowComposer. Аналогично, если контейнер сброшен, <codeph>flowComposer</codeph> сбрасывается к новому flowComposer контейнера.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>FlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:formatResolver:get"><apiName>formatResolver</apiName><shortdesc> Функция обратного вызова для разрешения стилей элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IFormatResolver</apiValueClassifier></apiValueDef><apiDesc> Функция обратного вызова для разрешения стилей элемента. Ее можно использовать, например, для обеспечения моделирования с помощью стилей CSS или именованных стилей. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver"><linktext>IFormatResolver</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:generation:get"><apiName>generation</apiName><shortdesc> 
		Номер генерации для этого объекта TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		Номер генерации для этого объекта TextFlow. Операции отмены и повторения используют номер генерации для проверки допустимости отмены или повторения операции. Номера генераций должны совпадать. 
		
		<p>Каждое изменение модели увеличивает <codeph>generation</codeph> на единицу. Таким образом, по изменению номера генерации можно судить об изменении модели TextFlow.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> Объект TextLayoutFormat для данного объекта TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Объект TextLayoutFormat для данного объекта TextFlow. Это обеспечивает некоторую оптимизацию для повторного использования форматов хоста. Например;
		
		<codeblock>
		textFlowA.hostFormat = textFlowB.hostFormat
		</codeblock>
		
		Значения формата необходимо задать перед назначением объекта TextLayoutFormat элементу <codeph>hostFormat</codeph>. Например, в следующем коде <i>не</i> будет задано значение 24 размера шрифта, так как размер шрифта устанавливается <i>после</i> назначения объекта TextLayoutFormat элементу <codeph>hostFormat</codeph>.
		
		<codeblock>
		format = new TextLayoutFormat()
		textFlow.hostFormat = format
		format.fontSize = 24;
		</codeblock>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:interactionManager:get"><apiName>interactionManager</apiName><shortdesc>
		 InteractionManager, связанный с данным объектом TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc>
		 InteractionManager, связанный с данным объектом TextFlow.
		 <p>Управляет всеми выделениями и редактированием текста. Если TextFlow не может быть выбран, interactionManager будет иметь значение null. Чтобы сделать TextFlow доступным для редактирования, назначьте interactionManager, являющийся одновременно и ISelectionManager, и IEditManager. Чтобы сделать TextFlow доступным только для чтения и выделения, назначьте interactionManager, являющийся только ISelectionManager. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#IEditManager"><linktext>IEditManager</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement"><apiName>ContainerFormattedElement</apiName><shortdesc> 
	ContainerFormattedElement является корневым классом для всех элементов блока уровня контейнера, например, для объектов DivElement и TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	ContainerFormattedElement является корневым классом для всех элементов блока уровня контейнера, например, для объектов DivElement и TextFlow. Элементы блока уровня контейнера являются элементами группировки для других объектов FlowElement.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:IFormatResolver"><apiName>IFormatResolver</apiName><shortdesc> Интерфейс преобразователя формата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Интерфейс преобразователя формата. Реализация позволяет присоединять к TextFlow механизм моделирования выбора, например, именованные стили и стили Flex CSS.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/formatResolver"><linktext>TextFlow.formatResolver</linktext></link></related-links><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:getResolverForNewFlow"><apiName>getResolverForNewFlow</apiName><shortdesc> Возвращает преобразователь формата при копировании TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>преобразователь формата для копии TextFlow.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:IFormatResolver</apiOperationClassifier></apiReturn><apiParam><apiItemName>oldFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>newFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Возвращает преобразователь формата при копировании TextFlow.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidateAll"><apiName>invalidateAll</apiName><shortdesc> Признает недействительной кэшированную информацию о форматировании для TextFlow, в результате чего форматирование должно быть пересчитано.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Признает недействительной кэшированную информацию о форматировании для TextFlow, в результате чего форматирование должно быть пересчитано.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidate"><apiName>invalidate</apiName><shortdesc> Признает недействительной кэшированную информацию о форматировании в этом элементе, если, например, обнаружено изменение вышестоящего элемента, изменение идентификатора или изменение styleName.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Признает недействительной кэшированную информацию о форматировании в этом элементе, если, например, обнаружено изменение <codeph>parent</codeph>, <codeph>id</codeph> или <codeph>styleName</codeph>. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveFormat"><apiName>resolveFormat</apiName><shortdesc> В случае объектов FlowElement или ContainerController возвращает для них любые параметры настройки формата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>параметры настройки формата для указанного объекта.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> В случае объектов FlowElement или ContainerController возвращает для них любые параметры настройки формата.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveUserFormat"><apiName>resolveUserFormat</apiName><shortdesc> В случае объектов FlowElement или ContainerController и имени свойства формата возвращает значение формата или значение undefined, если значение не найдено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>значение заданного формата для указанного объекта.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>userFormat</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> В случае объектов FlowElement или ContainerController и имени свойства формата возвращает значение формата или значение <codeph>undefined</codeph>, если значение не найдено.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TabElement"><apiName>TabElement</apiName><shortdesc> 
	 Класс TabElement представляет &amp;lt;tab/&amp;gt; в текстовом потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс TabElement представляет &lt;tab/> в текстовом потоке. Позиции табуляции назначаются в виде массива объектов TabStopFormat свойству <codeph>ParagraphElement.tabStops</codeph>.
	 
	 <p><b>Примечание</b>. Этот класс существует прежде всего для поддержки &lt;tab/> в разметке MXML. Символы табуляции (\ t) можно добавить непосредственно в текст следующим образом:</p>
	 
	 <codeblock rev="3.0">
	 spanElement1.text += '\t';
	 </codeblock>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement/tabStops"><linktext>ParagraphElement.tabStops</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TabElement:TabElement"><apiName>TabElement</apiName><shortdesc> Конструктор создает новый экземпляр TabElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает новый экземпляр TabElement. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IConfiguration"><apiName>IConfiguration</apiName><shortdesc> Доступный только для чтения интерфейс объекта configuration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Доступный только для чтения интерфейс объекта configuration. Используется классом TextFlow для обеспечения неизменности его конфигурации после создания.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc> 
		Указывает активные атрибуты формата символов, которые первоначально применяются ко всем ссылкам (объектам LinkElement) в текстовом потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Указывает активные атрибуты формата символов, которые первоначально применяются ко всем ссылкам (объектам LinkElement) в текстовом потоке. Они задаются по умолчанию для новых объектов LinkElement, не указывающих значения для этих атрибутов. 
		
		<p>Значением по умолчанию является <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc> 
		Указывает первоначальные атрибуты формата символов, которые применяются к ссылке (LinkElement) в текстовом потоке при наведении на нее курсора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Указывает первоначальные атрибуты формата символов, которые применяются к ссылке (LinkElement) в текстовом потоке при наведении на нее курсора. Они задаются по умолчанию для новых объектов LinkElement, не указывающих значения для этих атрибутов.
		
		<p>Значением по умолчанию является <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc> 
		Указывает первоначальные атрибуты ссылки для всех объектов LinkElement в текстовом потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Указывает первоначальные атрибуты ссылки для всех объектов LinkElement в текстовом потоке. Они являются значениями по умолчанию для новых объектов LinkElement, не указывающих значения для этих атрибутов. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc> 
		Указывает, включена поддержка специальных возможностей или нет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Указывает, включена поддержка специальных возможностей или нет. Если установлено значение <codeph>true</codeph>, содержимое TextFlow может быть считано программами для чтения с экрана.
		
		<p>Значением по умолчанию является <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc> Указывает тип компоновщика потока, присоединяемого к новому объекту TextFlow по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Указывает тип компоновщика потока, присоединяемого к новому объекту TextFlow по умолчанию. Значением по умолчанию является StandardFlowComposer.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc> 
		Начальный формат выделения (SelectionFormat) текстового потока (TextFlow), окно которого находится в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Начальный формат выделения (SelectionFormat) текстового потока (TextFlow), окно которого находится в фокусе. Text Layout Framework выполняет отображение выделения с использованием <codeph>focusedSelectionFormat</codeph>, если окно активно и один из контейнеров в TextFlow находится в фокусе. При необходимости этот формат можно переопределить с помощью <codeph>SelectionManager.focusedSelectionFormat</codeph>.
		
		<p>Класс SelectionFormat указывает значения по умолчанию, инвертирующие цвет текста и его фона.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc> 
		Начальный формат выделения (SelectionFormat) текстового потока (TextFlow), окно которого неактивно.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Начальный формат выделения (SelectionFormat) текстового потока (TextFlow), окно которого неактивно. Если окно неактивно, Text Layout Framework выполняет отображение выделения с использованием <codeph>inactiveSelectionFormat</codeph>. При необходимости этот формат можно переопределить с помощью <codeph>SelectionManager.inactiveSelectionFormat</codeph>.
		
		<p>Если свойство <codeph>unfocusedSelectionFormat</codeph> не переопределяется, используются следующие значения SelectionFormat:</p> 
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (белый)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>В результате выделение не отображается.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc> Указывает обратный вызов, используемый для разрешения встроенного графического элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> Указывает обратный вызов, используемый для анализа встроенного графического элемента. Обратный вызов принимает объект <codeph>flashx.textLayout.elements.InlineGraphicElement</codeph> и возвращает значение для использования в качестве элемента <codeph>flashx.textLayout.elements.InlineGraphicElement#source</codeph>. Этот обратный вызов предоставляет механизм для задержки предоставления встроенного графического элемента до тех пор, пока он не будет составлен.
		<p><b>Примечание.</b> Данный обратный вызов осуществляется только в том случае, если источник заполнителя типа String уже установлен. Более того, он может вызываться неоднократно. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc> 
		Указывает, введена ли клавиша Enter/Return как текст классом Text Layout Framework, например, для разделения абзаца, либо это событие обрабатывается кодом клиента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Указывает, введена ли клавиша Enter/Return как текст классом Text Layout Framework, например, для разделения абзаца, либо это событие обрабатывается кодом клиента. Код клиента может обработать это событие, например, путем передачи формы, имеющей для этой цели кнопку по умолчанию. 
		
		<p>Значением по умолчанию является <codeph>true</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc> 
		Указывает, введена ли клавиша Tab как текст классом Text Layout Framework, либо Flash Player или AIR обрабатывают это событие и преобразуют его в событие панели с вкладками.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Указывает, введена ли клавиша Tab как текст классом Text Layout Framework, либо Flash Player или AIR обрабатывают это событие и преобразуют его в событие панели с вкладками. 
		
		<p>Значением по умолчанию является <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc> 
		Политика, используемая для того, чтобы определить, попадает последняя строка контейнера в контейнер или выходит за его пределы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
		Политика, используемая для того, чтобы определить, попадает последняя строка контейнера в контейнер или выходит за его пределы. Для определения этого свойства используются константы класса OverflowPolicy.
		
		<p>Значением по умолчанию является OverflowPolicy.FIT_DESCENDERS, что обеспечивает расположение строки в области компоновки, если область от верхнего края до базовой линии для этого подходит.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc> Передает запрос на выпуск процессом создания текста данных о создании строки после создания каждого абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> Передает запрос на выпуск процессом создания текста данных о создании строки после создания каждого абзаца. Этот запрос позволяет уменьшить объем используемой памяти, но замедляет процесс создания.
		
		<p>Значением по умолчанию является <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData"><linktext>TextBlock.releaseLineCreationData</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc> 
		Указывает определенную задержку между каждой прокруткой для предотвращения чрезмерно быстрого прокручивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		Указывает определенную задержку между каждой прокруткой для предотвращения чрезмерно быстрого прокручивания. Это значение указывает время задержки (в миллисекундах). По умолчанию используется значение 35.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc> Указывает количество прокручиваемых по умолчанию пикселей при инициировании пользователем автоматической прокрутки путем перетаскивания выделенного фрагмента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Указывает количество прокручиваемых по умолчанию пикселей при инициировании пользователем автоматической прокрутки путем перетаскивания выделенного фрагмента. По умолчанию используется значение 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc> Указывает количество прокручиваемых по умолчанию пикселей для событий колесика мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Указывает количество прокручиваемых по умолчанию пикселей для событий колесика мыши. По умолчанию используется значение 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc>
		Указывает процент прокручиваемого по умолчанию текстового потока при прокрутке страниц.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		Указывает процент прокручиваемого по умолчанию текстового потока при прокрутке страниц. Значением по умолчанию является 7,0 / 8,0 или 0,875.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc> 
		Указывает начальный формат конфигурации TextLayoutFormat для текстового потока (объект TextFlow).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Указывает начальный формат конфигурации TextLayoutFormat для текстового потока (объект TextFlow).
		
		<p>Значением по умолчанию является <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc> 
		Начальный формат выделения, используемый Text Layout Framework для отображения выделения в случае, если окно активно, но ни один из контейнеров в TextFlow не находится в фокусе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Начальный формат выделения, используемый Text Layout Framework для отображения выделения в случае, если окно активно, но ни один из контейнеров в TextFlow не находится в фокусе. При необходимости этот формат можно переопределить с помощью <codeph>SelectionManager.unfocusedSelectionFormat</codeph>.
		
		<p>Если свойство <codeph>unfocusedSelectionFormat</codeph> не переопределяется, используются следующие значения SelectionFormat:</p>
		
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (белый)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>В результате выделение не отображается.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkState"><apiName>LinkState</apiName><shortdesc>
	  Класс LinkState определяет ряд констант для свойства linkState класса LinkElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Класс LinkState определяет ряд констант для свойства <codeph>linkState</codeph> класса LinkElement. 
	 
	 </apiDesc><example conref="examples\LinkStateExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement/linkState"><linktext>LinkElement.linkState</linktext></link></related-links><apiValue id="flashx.textLayout.elements:LinkState:ACTIVE"><apiName>ACTIVE</apiName><shortdesc> 
	 Значение для активного состояния, возникающее при помещении указателя мыши на ссылку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>active</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Значение для активного состояния, возникающее при помещении указателя мыши на ссылку. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:HOVER"><apiName>HOVER</apiName><shortdesc> 
	 Значение для состояния наведения, возникающего при перетаскивании мыши по ссылке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hover</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Значение для состояния наведения, возникающего при перетаскивании мыши по ссылке. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:LINK"><apiName>LINK</apiName><shortdesc> 
	 Значение для обычного состояния ссылки, заданного по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Значение для обычного состояния ссылки, заданного по умолчанию. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> 
	 Класс ParagraphElement представляет абзац в иерархии текстового потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс ParagraphElement представляет абзац в иерархии текстового потока. Его вышестоящим элементом является ParagraphFormattedElement. Его нижестоящие элементы могут включать элементы диапазонов (SpanElement), изображений (inLineGraphicElement), ссылок (LinkElement) и TCY (Tatechuuyoko – ta-tae-chu-yo-ko) (TCYElement). Текст абзаца хранится в одном или более объектах SpanElement, которые определяют диапазоны текста, совместно использующие одинаковые атрибуты. Объект TCYElement определяет небольшой фрагмент текста на японском языке, направленный перпендикулярно к строке, то есть в виде горизонтально направленной строки текста в вертикальной строке. TCYElement может также содержать несколько диапазонов.
	 
	 </apiDesc><example conref="examples\ParagraphElementExample.as"/><example conref="examples\ParagraphElementExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:ParagraphElement:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> Конструктор представляет абзац в текстовом потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор представляет абзац в текстовом потоке. 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc> 
		 Выполняет сканирование текста ниже заданного положения для поиска местоположения следующего атома и возвращает его индекс.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>индекс следующего атома в тексте
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> позиция в тексте, с которой начинается поиск, отсчитывается от 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет сканирование текста ниже заданного положения для поиска местоположения следующего атома и возвращает его индекс. Термин «атом» относится к графическим элементам и символам (включая группы объединенных символов), неделимым сущностям в строке.
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc> 
		 Возвращает индекс границы следующего слова в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>индекс границы следующего слова в тексте
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> позиция в тексте, с которой начинается поиск, отсчитывается от 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает индекс границы следующего слова в тексте.
		 
		 <p>Выполняет сканирование текста ниже заданного положения для поиска следующего местоположения в тексте, в котором начинается или заканчивается слово. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc> 
		 Выполняет сканирование текста выше заданного положения для поиска местоположения предыдущего атома и возвращает его индекс.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>индекс предыдущего кластера в тексте
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> позиция в тексте, с которой начинается поиск, отсчитывается от 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет сканирование текста выше заданного положения для поиска местоположения предыдущего атома и возвращает его индекс. Термин «атом» относится к графическим элементам и символам (включая группы объединенных символов), неделимым сущностям в строке.
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc> 
		 Возвращает индекс границы предыдущего слова в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>индекс границы предыдущего слова в тексте
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> позиция в тексте, с которой начинается поиск, отсчитывается от 0
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает индекс границы предыдущего слова в тексте.
		 
		 <p>Выполняет сканирование текста выше заданного положения для поиска предыдущего местоположения в тексте, в котором начинается или заканчивается слово. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getNextParagraph"><apiName>getNextParagraph</apiName><shortdesc> Возвращает абзац, следующий за данным, или значение null, если данный абзац является последним.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>следующий абзац или значение null, если данный абзац является последним.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает абзац, следующий за данным, или значение null, если данный абзац является последним. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getNextParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getPreviousParagraph"><linktext>getPreviousParagraph</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getPreviousParagraph"><apiName>getPreviousParagraph</apiName><shortdesc> Возвращает абзац, предшествующий данному, или значение null, если данный абзац является первым в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает абзац, предшествующий данному, или значение null, если данный абзац является первым в TextFlow. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_getPreviousParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getNextParagraph"><linktext>getNextParagraph</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextRange"><apiName>TextRange</apiName><shortdesc>
	 Доступный только для чтения класс, описывающий диапазон смежного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Доступный только для чтения класс, описывающий диапазон смежного текста. Такой диапазон возникает при выборе раздела текста. Диапазон состоит из точки привязки выделенного фрагмента, <codeph>anchorPosition</codeph>, и точки, которая должна быть изменена действиями, <codeph>activePosition</codeph>. Поскольку выделенные блоки были изменены и расширены, то <codeph>anchorPosition</codeph> остается фиксированным, а <codeph>activePosition</codeph> изменяется. Позиция привязки может быть помещена в тексте до или после активной позиции.
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>SelectionState</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TextRange:TextRange"><apiName>TextRange</apiName><shortdesc> Конструктор создает новый экземпляр TextRange.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>TextFlow, связанный с выделенным фрагментом.
		 </apiDesc></apiParam><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>позиция индекса привязки в выделенном фрагменте. Первой позицией в тексте является позиция 0.
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>позиция индекса активного местоположения в выделенном фрагменте. Первой позицией в тексте является позиция 0. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Конструктор создает новый экземпляр TextRange. TextRange может быть (-1,-1), что означает отсутствие диапазона, либо парой значений от 0 до <codeph>TextFlow.textLength</codeph>.
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>FlowElement.textLength</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextRange:updateRange"><apiName>updateRange</apiName><shortdesc> Обновите диапазон с новыми значениями позиции привязки или активной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true, если выделенный фрагмент изменен.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>индекс точки привязки выделенного фрагмента.
		  </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>индекс активной точки выделенного фрагмента.
		  </apiDesc></apiParam></apiOperationDef><apiDesc> Обновите диапазон с новыми значениями позиции привязки или активной позиции.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> Конец выделенного фрагмента, как абсолютная позиция в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Конец выделенного фрагмента, как абсолютная позиция в TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> Начало выделенного фрагмента, как абсолютная позиция в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Начало выделенного фрагмента, как абсолютная позиция в TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:activePosition:get"><apiName>activePosition</apiName><shortdesc> Активная позиция выделенного фрагмента, как абсолютная позиция в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Активная позиция выделенного фрагмента, как абсолютная позиция в TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> Позиция привязки выделенного фрагмента, как абсолютная позиция в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Позиция привязки выделенного фрагмента, как абсолютная позиция в TextFlow.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> Возвращает TextFlow, связанный с выделенным фрагментом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> Возвращает TextFlow, связанный с выделенным фрагментом.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> 
	 Класс SubParagraphGroupElement группирует FlowLeafElements вместе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс SubParagraphGroupElement группирует FlowLeafElements вместе. SubParagraphGroupElement – это нижестоящий элемент объекта ParagraphElement. В свою очередь он может содержать один или более объектов FlowLeafElement в качестве нижестоящих элементов.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElement:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> Конструктор создает новый экземпляр SubParagraphGroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает новый экземпляр SubParagraphGroupElement.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpanElement"><apiName>SpanElement</apiName><shortdesc> 
	Класс SpanElement представляет непрерывную последовательность текста, к которой применен отдельный набор атрибутов форматирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	Класс SpanElement представляет непрерывную последовательность текста, к которой применен отдельный набор атрибутов форматирования. Объекты SpanElement содержат текст в абзаце. Простой абзац (ParagraphElement) включает один или более объект SpanElement. 
	
	<p>ParagraphElement будет иметь отдельный объект SpanElement, если весь текст в абзаце совместно использует одинаковый набор атрибутов. Он имеет несколько объектов SpanElement, если текст в абзаце имеет несколько форматов.</p>
	
	</apiDesc><example conref="SpanElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpanElement:SpanElement"><apiName>SpanElement</apiName><shortdesc> Конструктор создает объект SpanElement для хранения непрерывной последовательности текста в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает объект SpanElement для хранения непрерывной последовательности текста в абзаце.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:SpanElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:SpanElement:tlf_internal:normalizeRange"><apiName>normalizeRange</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>normalizeStart</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>normalizeEnd</apiItemName><apiType value="uint"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:SpanElement:replaceText"><apiName>replaceText</apiName><shortdesc> 
		 Обновляет текст во фрагменте текста, основанном на указанной начальной и конечной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный <codeph>relativeStartPosition</codeph> или <codeph>relativeEndPosition</codeph> находится вне диапазона, либо в результате замены была разделена суррогатная пара.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>relativeStartPosition</apiItemName><apiType value="int"/><apiDesc>Позиция индекса начала заменяемого текста относительно начала фрагмента. Первый символ во фрагменте находится в позиции 0.
		  </apiDesc></apiParam><apiParam><apiItemName>relativeEndPosition</apiItemName><apiType value="int"/><apiDesc>На одну позицию в индексе позже последнего заменяемого символа текста относительно начала фрагмента. Установите это значение равным <codeph>relativeStartPos</codeph> для вставки. 
		  </apiDesc></apiParam><apiParam><apiItemName>textValue</apiItemName><apiType value="String"/><apiDesc>Текст для замены или текст для добавления в зависимости от обстоятельств.
		 
		  </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Обновляет текст во фрагменте текста, основанном на указанной начальной и конечной позиции. Для вставки текста задайте конечную позицию, равную начальной позиции. Для дополнения текста существующим текстом во фрагменте следует задать начальную позицию и конечную позицию равными длине существующего текста.
		 
		 <p>Замененный текст включает в себя начальный символ и все символы вплоть до, но не включая конечный символ.</p>
		 
		  </apiDesc><example conref="SpanElement_replaceTextExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:SpanElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Устанавливает текст, основанный на содержимом внутри тегов фрагмента; всегда удаляет существующие нижестоящие элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>если элемент массива не SpecialCharacterElement или String
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Устанавливает текст, основанный на содержимом внутри тегов фрагмента; всегда удаляет существующие нижестоящие элементы. Это свойство предназначено для использования во время импорта скомпилированных файлов MXML. Когда элементы разметки TLF имеют другие элементы разметки TLF в качестве нижестоящих элементов, нижестоящие элементы назначаются этому свойству.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:SpanElement:text:set"><apiName>text</apiName><shortdesc> 
		 Получает строку текста, хранимую в этом объекте SpanElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Получает строку текста, хранимую в этом объекте SpanElement.
		 
		 <p>Текст фрагмента не включает символ возврата каретки (CR) в конце абзаца, но он включается в значение <codeph>textLength</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement"><apiName>ParagraphFormattedElement</apiName><shortdesc> Класс ParagraphFormattedElement представляет собой абстрактный базовый класс для классов FlowElement, имеющих свойства абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> Класс ParagraphFormattedElement представляет собой абстрактный базовый класс для классов FlowElement, имеющих свойства абзаца.
	
	<p>Объект ParagraphFormattedElement невозможно создать напрямую. При вызове <codeph>new ParagraphFormattedElement()</codeph> выдается исключение error.</p> 
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:DivElement"><apiName>DivElement</apiName><shortdesc> 
	 Класс DivElement определяет элемент для группировки абзацев (объекты ParagraphElement).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс DivElement определяет элемент для группировки абзацев (объекты ParagraphElement). При необходимости группировки абзацев для совместного использования одинаковых атрибутов форматирования можно сгруппировать их в объекте DivElement, а затем применить к нему эти атрибуты. Абзацы наследуют атрибуты из объекта DivElement.
	 
	 </apiDesc><example conref="examples\DivElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:DivElement:DivElement"><apiName>DivElement</apiName><shortdesc> Конструктор создает новый объект DivElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает новый объект DivElement.
			
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:Configuration"><apiName>Configuration</apiName><shortdesc> 
	Класс Configuration – основной пункт интеграции между Text Layout Framework и приложением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	Класс Configuration – основной пункт интеграции между Text Layout Framework и приложением. При создании нового экземпляра TextFlow объект Configuration можно включить в качестве параметра в конструктор <codeph>TextFlow()</codeph>. Это позволяет приложению с самого начала управлять поведением Text Layout Framework.
	
	<p>Класс Configuration позволяет настраивать начальный формат, а также форматы абзаца и контейнера для текстового потока посредством свойства <codeph>textFlowInitialFormat</codeph>. Он также позволяет настраивать атрибуты начального формата для ссылок, выделения, прокрутки и обработки клавиш Tab и Enter.</p>
	
	</apiDesc><example conref="examples\ConfigurationExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>TextDecoration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:Configuration:Configuration"><apiName>Configuration</apiName><shortdesc> Конструктор создает стандартную конфигурацию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initializeWithDefaults</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Указывает, следует ли выполнять инициализацию конфигурации со значениями по умолчанию. Значение по умолчанию – <codeph>true</codeph>. Если задано значение <codeph>false</codeph>, инициализация выполняется без значений по умолчанию, что позволяет сохранить некоторые объекты. Метод <codeph>clone()</codeph> задает для него значение <codeph>false</codeph> и копирует свойства из исходного объекта.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> Конструктор создает стандартную конфигурацию. 
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:Configuration:clone"><apiName>clone</apiName><shortdesc> Создает клон объекта Configuration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Создает клон объекта Configuration.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc conref="IConfiguration#enableAccessibility"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#enableAccessibility"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc conref="IConfiguration#flowComposerClass"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc conref="IConfiguration#flowComposerClass"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc conref="IConfiguration#focusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#focusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc conref="IConfiguration#inactiveSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#inactiveSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc conref="IConfiguration#inlineGraphicResolver"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="IConfiguration#inlineGraphicResolver"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc conref="IConfiguration#manageEnterKey"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageEnterKey"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc conref="IConfiguration#manageTabKey"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageTabKey"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc conref="IConfiguration#overflowPolicy"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="IConfiguration#overflowPolicy"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc conref="IConfiguration#releaseLineCreationData"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#releaseLineCreationData"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData"><linktext>TextBlock.releaseLineCreationData</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc conref="IConfiguration#scrollDragDelay"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragDelay"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc conref="IConfiguration#scrollDragPixels"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragPixels"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc conref="IConfiguration#scrollPagePercentage">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollPagePercentage">
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc conref="IConfiguration#textFlowInitialFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#textFlowInitialFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowElement"><apiName>FlowElement</apiName><shortdesc>
 Текст в потоке хранится в виде дерева с элементами, представляющими логические деления в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Текст в потоке хранится в виде дерева с элементами, представляющими логические деления в тексте. Класс FlowElement является абстрактным базовым классом для всех объектов в этом дереве. Объекты FlowElement представляют абзацы, фрагменты текста внутри абзацев и группы абзацев.
 
 <p>Корнем компонуемого дерева FlowElement всегда является объект TextFlow. Элементами листа дерева всегда являются подклассы класса FlowLeafElement. Все упорядоченные в компонуемом TextFlow элементы листа имеют предка ParagraphElement.
 </p> 
 
 <p>Объект FlowElement невозможно создать непосредственно. При вызове <codeph>new FlowElement()</codeph> выдается исключение error.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowElement:FlowElement"><apiName>FlowElement</apiName><shortdesc> Базовый класс – при вызове new FlowElement() выдается исключение ошибки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Базовый класс – при вызове <codeph>new FlowElement()</codeph> выдается исключение ошибки.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowElement:clearStyle"><apiName>clearStyle</apiName><shortdesc> Отменяет указанный параметром styleProp стиль в этом объекте FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя отменяемого стиля.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Отменяет указанный параметром <codeph>styleProp</codeph> стиль в этом объекте FlowElement. Устанавливает значение <codeph>undefined</codeph>.
		 
		 </apiDesc><example conref="examples\FlowElement_clearStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:deepCopy"><apiName>deepCopy</apiName><shortdesc>
		 Выполняет полное копирование объекта FlowElement, включая любые нижестоящие элементы (при этом копируется содержимое между двумя позициями символов), и возвращает эту копию как объект FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>объект, созданный операцией полного копирования.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>относительная текстовая позиция первого копируемого символа. Первая позиция – 0.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>относительное текстовая позиция последнего копируемого символа. Значение -1 обозначает окончание копирования.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Выполняет полное копирование объекта FlowElement, включая любые нижестоящие элементы (при этом копируется содержимое между двумя позициями символов), и возвращает эту копию как объект FlowElement.
		 
		 <p>Без аргументов <codeph>deepCopy()</codeph> по умолчанию копирует весь элемент.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_deepCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/shallowCopy()"><linktext>shallowCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:equalUserStyles"><apiName>equalUserStyles</apiName><shortdesc> Сравните userStyles этого с элементом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение true, если стили пользователя равны, в противном случае – false.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>otherElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>объект FlowElement, с которым сравниваются стили пользователя
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Сравните userStyles этого с элементом. 
		 
		 </apiDesc><example conref="examples\FlowElement_equalUserStylesExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc>
		 Возвращает начальное местоположение элемента в текстовом потоке в виде абсолютного индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс начала элемента от начала объекта TextFlow.
 		 
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Возвращает начальное местоположение элемента в текстовом потоке в виде абсолютного индекса. Позиция первого символа в потоке – 0.
		 
		 </apiDesc><example conref="examples\FlowElement_getAbsoluteStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/parentRelativeStart"><linktext>parentRelativeStart</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharAtPosition"><apiName>getCharAtPosition</apiName><shortdesc> 
		Возвращает символ в указанной позиции, относительно этого объекта FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Строка, содержащая символ.
		
		</apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>Относительная позиция символа в этом объекте FlowElement.
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Возвращает символ в указанной позиции, относительно этого объекта FlowElement. Первый символ располагается в относительной позиции 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharCodeAtPosition()"><linktext>getCharCodeAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharCodeAtPosition"><apiName>getCharCodeAtPosition</apiName><shortdesc> Возвращает код символа в указанной позиции, относительно этого FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>значение Юникода для символа в указанной позиции.
		
		</apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	Относительная позиция символа в этом объекте FlowElement.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Возвращает код символа в указанной позиции, относительно этого FlowElement. Первый символ располагается в относительной позиции 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharCodeAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharAtPosition()"><linktext>getCharAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getElementRelativeStart"><apiName>getElementRelativeStart</apiName><shortdesc>
		 Возвращает начало этого элемента относительно предшествующего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>смещение этого элемента.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>ancestorElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Элемент, в котором требуется найти относительное начало этого элемента.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Возвращает начало этого элемента относительно предшествующего элемента. Предполагается, что предшествующий элемент находится в цепочке вышестоящих элементов. Если предшествующим элементом является вышестоящий элемент, то это совпадает с <codeph>this.parentRelativeStart</codeph>. Если предшествующим элементом является элемент, вышестоящий по отношению к вышестоящему элементу, то это совпадает с <codeph>parentRelativeStart</codeph> плюс <codeph>parent.parentRelativeStart</codeph> и т.д.
		 
		 </apiDesc><example conref="examples\FlowElement_getElementRelativeStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getAbsoluteStart()"><linktext>getAbsoluteStart()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getNextSibling"><apiName>getNextSibling</apiName><shortdesc> Возвращает следующий элемент одного с FlowElement уровня в иерархии текстового потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>следующий объект FlowElement того же самого типа или null при отсутствии элемента того же уровня.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает следующий элемент одного с FlowElement уровня в иерархии текстового потока. 
		
		</apiDesc><example conref="examples\FlowElement_getNextSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getPreviousSibling()"><linktext>getPreviousSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getParagraph"><apiName>getParagraph</apiName><shortdesc>
		 Возвращает объект ParagraphElement, связанный с этим элементом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>объект ParagraphElement, связанный с этим объектом FlowElement.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Возвращает объект ParagraphElement, связанный с этим элементом. Он просматривает иерархию текстового потока и возвращает первый объект ParagraphElement.
		 
		 </apiDesc><example conref="examples\FlowElement_getParagraphExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getTextFlow()"><linktext>getTextFlow()</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getPreviousSibling"><apiName>getPreviousSibling</apiName><shortdesc> Возвращает предыдущий элемент одного с FlowElement уровня в иерархии текстового потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>предыдущий объект FlowElement того же самого типа или null при отсутствии предыдущего элемента того же уровня.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Возвращает предыдущий элемент одного с FlowElement уровня в иерархии текстового потока. 
		
		</apiDesc><example conref="examples\FlowElement_getPreviousSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getNextSibling()"><linktext>getNextSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getStyle"><apiName>getStyle</apiName><shortdesc> Возвращает значение стиля, заданного параметром styleProp, указывающим имя стиля, и имеющего возможность включать в себя любое имя стиля пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение указанного стиля. Тип меняется в зависимости от типа вызываемого стиля. Возвращает <codeph>undefined</codeph>, если стиль не задан.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя стиля, значение которого должно быть извлечено.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Возвращает значение стиля, заданного параметром <codeph>styleProp</codeph>, указывающим имя стиля, и имеющего возможность включать в себя любое имя стиля пользователя. Получает доступ к существующему фрагменту, абзацу, текстовому потоку или стилю контейнера. Выполняет поиск по вышестоящему дереву, если стиль для конкретного элемента имеет значение <codeph>undefined</codeph>.
		 
		 </apiDesc><example conref="examples\FlowElement_getStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getTextFlow"><apiName>getTextFlow</apiName><shortdesc>
		 Поднимается вверх по иерархии текстового потока для возвращения корневого объекта TextFlow для элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Корневой объект TextFlow для этого объекта FlowElement.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Поднимается вверх по иерархии текстового потока для возвращения корневого объекта TextFlow для элемента.
		 
		 </apiDesc><example conref="examples\FlowElement_getTextFlowExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getText"><apiName>getText</apiName><shortdesc> 
		 Получает указанный диапазон текста из FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Запрошенный текст.
		 
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Начальная позиция извлекаемого диапазона текста относительно начала FlowElement.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Конечная позиция извлекаемого диапазона текста относительно начала FlowElement. Значение -1 обозначает конец элемента.
		 </apiDesc></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>символ, помещаемый между абзацами
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Получает указанный диапазон текста из FlowElement.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:initialized"><apiName>initialized</apiName><shortdesc> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Идентификатор, используемый document в качестве ссылки на этот объект. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:setStyle"><apiName>setStyle</apiName><shortdesc> Устанавливает стиль, указанный параметром styleProp, для значения, указанного параметром newValue.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя устанавливаемого стиля.
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>Значение, для которого требуется установить стиль.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Устанавливает стиль, указанный параметром <codeph>styleProp</codeph>, для значения, указанного параметром <codeph>newValue</codeph>. Можно установить стиль для фрагмента, абзаца, текстового потока или контейнера, включая любую пользовательскую пару имя-значение.
		
		<p><b>Примечание.</b> При назначении пользовательского стиля Text Layout Framework может импортировать и экспортировать его, но скомпилированный MXML не может его поддерживать.</p>
		
		</apiDesc><example conref="examples\FlowElement_setStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:shallowCopy"><apiName>shallowCopy</apiName><shortdesc>
		 Создает копию этого объекта FlowElement, при этом копируется содержимое между двумя указанными позициями символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>объект, созданный этой операцией копирования.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Относительная текстовая позиция первого копируемого символа. Первая позиция – 0.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Относительная текстовая позиция последнего копируемого символа. Значение -1 обозначает окончание копирования.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Создает копию этого объекта FlowElement, при этом копируется содержимое между двумя указанными позициями символов. Возвращает копию в виде нового объекта FlowElement. В отличие от <codeph>deepCopy()</codeph>, <codeph>shallowCopy()</codeph> не копирует нижестоящие элементы данного объекта FlowElement. 
		 
		 <p>Без аргументов <codeph>shallowCopy()</codeph> по умолчанию копирует все содержимое.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_shallowCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/deepCopy()"><linktext>deepCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:splitAtPosition"><apiName>splitAtPosition</apiName><shortdesc> 
		 Разделяет этот объект FlowElement в указанной параметром relativePosition позиции, которая является относительной текстовой позицией в этом элементе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если <codeph>relativePosition</codeph> превышает <codeph>textLength</codeph> или меньше 0.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>новый объект, включающий в себя содержимое исходного объекта, начиная с указанной позиции.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>позиция, в которой будет разделяться содержимое исходного объекта, начиная с 0.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Разделяет этот объект FlowElement в указанной параметром <codeph>relativePosition</codeph> позиции, которая является относительной текстовой позицией в этом элементе. Этот способ применяется только для разделения объектов SpanElements и FlowGroupElements.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowElement:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat: определяет базовую линию, по которой выравнивается основная базовая линия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: определяет базовую линию, по которой выравнивается основная базовая линия. Например, если значение <codeph>dominantBaseline</codeph> установлено на ASCENT, то установка <codeph>alignmentBaseline</codeph> на DESCENT выравнивает верхнюю границу текста по базовой линии DESCENT или под строкой. Как правило, базовые линии определяет наибольший элемент в строке.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимыми значениями являются flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение USE_DOMINANT_BASELINE.</p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение alpha равно 0, являются активными, несмотря на невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat: цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: цвет фона (принимает значение по умолчанию, если имеет значение undefined в процессе каскада). Может иметь либо постоянное значение <codeph>BackgroundColor.TRANSPARENT</codeph>, либо шестнадцатеричное значение, задающее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого.
		 <p>Допустимые строковые значения – flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT, а также uints от 0x0 до 0xffffffff.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat: величина сдвига базовой линии от значения dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: величина сдвига базовой линии от значения <codeph>dominantBaseline</codeph>. Единицей измерения являются пиксели или процент от <codeph>fontSize</codeph> (в этом случае вводится строковое значение, например, 140%). Положительные значения сдвигают строку вверх для горизонтального текста (вправо для вертикального), а отрицательные значения сдвигают ее вниз для горизонтального текста (влево для вертикального). 
		 <p>Допустимые значения: flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Допустимые числовые значения – от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.0.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat: указывает размещение срок по вертикали или горизонтали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: определяет вертикальное или горизонтальное размещение строки. Строки располагаются либо сверху вниз <codeph>BlockProgression.TB</codeph> (используется для горизонтального текста), либо справа налево <codeph>BlockProgression.RL</codeph> (используется для вертикального текста).
		 <p>Допустимые значения: flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение TB.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat: определяет допустимые места разбиения строк, когда обтекающий текст разбивается на несколько строк.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управляет местом разрыва строк при форматировании текста по размеру окна. Установите значение <codeph>BreakOpportunity.AUTO</codeph> для стандартного разрыва строк. Установите значение <codeph>BreakOpportunity.NONE</codeph> для <i>предотвращения</i> разрыва строк до тех пор, пока текст не превысит допустимых размеров, при этом в самом тексте будут отсутствовать заданные места разрыва. Установите значение <codeph>BreakOpportunity.ANY</codeph> для разрешения разрыва строки в любом месте, не только между словами. Установите значение <codeph>BreakOpportunity.ALL</codeph>, чтобы каждая группа символов находилась в отдельной строке (рекомендуется использовать для путей к файлам).
		 <p>Допустимые значения: flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat: тип используемого для текста хинтинга CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип используемого для текста хинтинга CFF. Тип подсказки CFF определяет, будет ли среда выполнения Flash в принудительном порядке привязывать жирные горизонтальные основы к субпиксельной сетке. Это свойство применяется только в том случае, если для свойства <codeph>renderingMode</codeph> установлено значение <codeph>RenderingMode.CFF</codeph>, и используется встроенный шрифт (для свойства <codeph>fontLookup</codeph> установлено значение <codeph>FontLookup.EMBEDDED_CFF</codeph>). На экранах небольшого размера хинтинг создает для читателей четкий и удобочитаемый текст.
		 <p>Допустимые значения: flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение HORIZONTAL_STEM.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat: цвет текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: цвет текста. Шестнадцатеричное число, содержащее три 8-разрядных значения RGB (красный, зеленый, синий); например, 0xFF0000 для красного и 0x00FF00 для зеленого. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat: число столбцов текста (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число текстовых столбцов (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Количество столбцов отменяет другие параметры настройки столбца. Значение представляет собой целое число или <codeph>FormatValue.AUTO</codeph>, если не указано. Если <codeph>columnCount</codeph> не указан, то <codeph>columnWidth</codeph> используется для создания максимального количества столбцов в контейнере.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также с ints от 1 до 50.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat: определяет величину промежутка между столбцами в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает размер средника между колонками в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Значение представляет собой число
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat: ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: ширина столбца в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Если указана ширина столбцов, но не указано их количество, то TextLayout создает максимально возможное количество столбцов этой ширины при заданной ширине контейнера и настройке <codeph>columnGap</codeph>. Все оставшееся пространство будет располагаться за последним столбцом. Значение представляет собой число.
		 <p>Допустимые строковые значения: flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT, а также числа от 0 до 8000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение undefined, в процессе каскада свойство получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Возвращает вычисленные атрибуты формата, являющиеся действующими для этого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Возвращает вычисленные атрибуты формата, являющиеся действующими для этого элемента. Принимает во внимание наследование атрибутов из вышестоящих элементов.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Возвращает базовые стили экземпляра FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Возвращает базовые стили экземпляра FlowElement. Возвращает копию базовых стилей.  
		  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat: тип регистра цифр, используемого для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип регистра цифр, используемого для текста. Установка значения на <codeph>DigitCase.OLD_STYLE</codeph> позволяет изменить размер букв на примерно соответствующий размеру строчных букв в нижнем или верхнем регистрах. Цифры располагаются пропорционально. Этот стиль доступен только в некоторых шрифтах, обычно в дополнительном или экспертном шрифте. Параметр <codeph>DigitCase.LINING</codeph> определяет высоту верхнего регистра, обычно является моноширинным и служит для выравнивания текста в диаграммах.<p><adobeimage alt="digitCase" href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Допустимые значения: flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat: тип ширины цифр, используемый для этого текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип ширины цифр, используемых для текста. Может иметь значение <codeph>DigitWidth.PROPORTIONAL</codeph>, которое рекомендуется использовать для отдельных чисел, или <codeph>DigitWidth.TABULAR</codeph>, используемое для чисел в таблицах, диаграммах и вертикальных строках.<p><adobeimage alt="digitWidth" href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Допустимые значения: text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat: задает уровень двунаправленной вложенности текста в блоке по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: задает уровень двунаправленной вложенности текста в блоке по умолчанию. Направление чтения слева направо, как в сценариях с латинским стилем, или справа налево, как в сценариях с арабским или еврейским. Это свойство также влияет на направление столбца, когда оно применяется на уровне контейнера. Столбцы могут быть расположены либо слева направо, либо справа налево, так же, как и текст. Примеры:<p><adobeimage alt="direction" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение LTR.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat: указывает, какая из базовых линий элемента привязывается к alignmentBaseline для определения позиции элемента в строке по вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает, какая из базовых линий элемента привязывается к <codeph>alignmentBaseline</codeph> для определения позиции элемента в строке по вертикали. Значение <codeph>TextBaseline.AUTO</codeph> выделяет доминирующую базовую линию, основывающуюся на свойстве <codeph>locale</codeph> вышестоящего абзаца. Для японского и китайского языков значением выделенной базовой линией является <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph>; для всех других - <codeph>TextBaseline.ROMAN</codeph>. Этот выбор базовых линий определяется выбором типа и размера шрифта.<p><adobeimage alt="базовые линии" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat: определяет положение базовой линии первой строки в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает позицию базовой линии первой строки в контейнере. Базовая линия, к которой относится это свойство, зависит от языкового стандарта на уровне контейнера. Для японского и китайского языка это – <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph>; для всех других языков – <codeph>TextBaseline.ROMAN</codeph>. Смещение от верхнего отступа (или правого отступа, если <codeph>blockProgression</codeph> имеет значение RL) контейнера до базовой линии первой строки может иметь значение <codeph>BaselineOffset.ASCENT</codeph>, что означает равное подъему строки, либо <codeph>BaselineOffset.LINE_HEIGHT</codeph>, что означает равное высоте этой первой строки, либо любое фиксированное число для указания абсолютного расстояния. Значение <codeph>BaselineOffset.AUTO</codeph> выравнивает подъем строки по верхнему отступу контейнера.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Допустимые строковые значения: flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT и числа от 0 до 1000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat: имя используемого шрифта или разделенный запятой список имен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: имя используемого шрифта или разделенный запятой список имен. Среда выполнения Flash визуализирует элемент с помощью первого доступного шрифта в списке. Например, если задать Arial, Helvetica, _sans, то проигрыватель сначала выполняет поиск Arial, затем Helvetica, если Arial не обнаружен, а потом _sans, если не обнаружен ни тот, ни другой.
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat: поиск используемых шрифтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: поиск используемых шрифтов. При указании <codeph>FontLookup.DEVICE</codeph> используются шрифты, установленные в системе, в которой выполняется SWF-файл. Использование шрифтов устройства сокращает размер ролика, но в различных системах и платформах текст не всегда отображается одинаково. При указании <codeph>FontLookup.EMBEDDED_CFF</codeph> используются контуры шрифтов, встроенные в опубликованный SWF-файл. Встроенные шрифты увеличивают размер файла SWF (иногда значительно), но текст в выбранном шрифте отображается последовательно.
		 <p>Допустимые значения: flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEVICE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat: размер текста в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: размер текста в пикселях.
		 <p>Допускаются значения и числа от 1 до 720, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 12.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat: стиль текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: стиль текста. Можно использовать значение <codeph>FontPosture.NORMAL</codeph> для обычного текста или <codeph>FontPosture.ITALIC</codeph> для курсивного. Это свойство применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat: толщина текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: толщина текста. Может использоваться значение <codeph>FontWeight.NORMAL</codeph> для обычного текста или <codeph>FontWeight.BOLD</codeph> - для полужирного. Применяется только к шрифтам устройства (свойство <codeph>fontLookup</codeph> устанавливается на flash.text.engine. FontLookup.DEVICE).
		 <p>Допустимые значения: flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NORMAL.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:format:get"><apiName>format</apiName><shortdesc> Свойства TextLayoutFormat, применяются непосредственно к этому элементу.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Свойства TextLayoutFormat, применяются непосредственно к этому элементу.
		 <p>Каждый элемент может иметь свойства, применяемые к нему как часть его формата. Свойства, применяемые к этому элементу, переопределяют свойства, унаследованные им от вышестоящего элемента. Свойства, примененные в отношении этого элемента, будет в свою очередь унаследованы нижестоящими элементами этого элемента, если они не будут переопределены в самом нижестоящем элементе. При отсутствии примененных к элементу свойств значение будет null.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:id:get"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat: правило, используемое для выравнивания текста в абзаце.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: правило, используемое для выравнивания текста в абзаце. Значением по умолчанию является <codeph>FormatValue.AUTO</codeph>, которое выравнивает текст согласно свойству абзаца <codeph>locale</codeph>. Для всех языков, кроме японского и китайского, <codeph>FormatValue.AUTO</codeph> получает значение <codeph>JustificationRule.SPACE</codeph>, которое добавляет к символу пробела дополнительное пространство. Для японского и китайского языков <codeph>FormatValue.AUTO</codeph> имеет значение <codeph>JustficationRule.EAST_ASIAN</codeph>. Выравнивание частично изменяет интервал между знаками пунктуации. Запятая и японская точка занимают в латинице целый символ, в то время как восточно-азиатском тексте – только половину символа. Кроме того, согласно традиции, в восточно-азиатском тексте интервал между знаками пунктуации должен быть уже, чем между остальными символами. В нижеприведенном примере обратите внимание также на интерлиньяж, который применяется ко второй строке абзаца. В восточноазиатской версии последние две строки смещаются вправо. В латинской версии вторая и последующие строки смещаются влево.<p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat: стиль, используемый для выравнивания абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: стиль используемый для выравнивания абзаца. Используется только вместе с параметром <codeph>justificationRule</codeph> для <codeph>JustificationRule.EAST_ASIAN</codeph>. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> относится к <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> для всех языковых стандартов. Константы, определяемые классом JustificationStyle, указывают параметры обработки символов кинсоку – японских символов, которые не должны появляться в начале и конце строк. Если необходимо получить более разреженный текст, укажите <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Если необходимо использовать поведение, подобное тому, что получается при использовании <codeph>justificationRule</codeph> <codeph>JustificationRule.SPACE</codeph>, укажите <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Допустимые значения: flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение flashx.textLayout.formats.FormatValue.AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat: кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: кернинг регулирует количество пикселов между определенными парами символов с целью улучшения удобочитаемости текста. Кернинг поддерживается для всех шрифтов, имеющих таблицы кернинга.
		 <p>Допустимые значения: flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat: указывает модель межстрочного интервала, которая представляет собой комбинацию основы межстрочного интервала и направления межстрочного интервала.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает модель интерлиньяжа, которая является комбинацией основы и направления интерлиньяжа. Основа межстрочного интервала – это базовая линия, на которую ссылается свойство <codeph>lineHeight</codeph>. Направление межстрочного интервала определяет, относится ли свойство <codeph>lineHeight</codeph> к расстоянию от базовой линии строки до базовой линии строки, находящейся перед ней или за ней. Значение по умолчанию <codeph>FormatValue.AUTO</codeph> определяется на основе свойства абзаца <codeph>locale</codeph>. Для японского и китайского языков значение равно <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph>, для всех других языков – <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat: указывает, какая из лигатур, определенных в шрифте, может использоваться в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управляет тем, какая лигатура, определенная в шрифте, может использоваться в тексте. Лигатуры для каждого из этих параметров зависят от шрифта. Лигатура возникает, когда две или более литеры объединяются в один глиф. Лигатуры обычно заменяют последовательные символы с общими компонентами, такие как пары букв «fi», «fl» или «ae». Они используются как с латинскими, так и с нелатинскими наборами символов. Лигатуры, активируемые значениями <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph> и <codeph>EXOTIC</codeph> являются аддитивными. Каждое значение активирует новый набор лигатур, при этом включая в себя все предыдущие типы.<p><b>Примечание.</b> При работе со шрифтами арабского или сирийского языка для <codeph>ligatureLevel</codeph> устанавливается значение MINIMUM или выше.</p><p><adobeimage alt="ligatureLevel" href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Допустимые значения: flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COMMON.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat: определяет перенос слов в контейнере (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управляет переносом слов в контейнере (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Текст в контейнере можно настроить по ширине контейнера (<codeph>LineBreak.TO_FIT</codeph>), либо установить разрыв только при наличии символов возврата каретки или символов перевода строки (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Допустимые значения: flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat: определяет межстрочные интервалы в тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: управление интерлиньяжем текста. Расстояние от базовой линии предыдущей или следующей строки (в зависимости от <codeph>LeadingModel</codeph>) до базовой линии текущей строки равно максимальному межстрочному интервалу, применяемому в отношении любого символа в строке. Значение выражается либо числом, либо процентом. При указании процента вводится строковое значение, например, 140%.<p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Допустимые числовые значения – от -720 до 720.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 120%.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat: если значение равно true, применяет перечеркивание, размещая линию посередине строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: если значение равно <codeph>true</codeph>, применяет перечеркивание, размещая линию посередине строки.
		 <p>Допустимыми значениями являются true, false и flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение false.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkActiveFormat:set"><apiName>linkActiveFormat</apiName><shortdesc> эквивалент setStyle(linkActiveFormat,value).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> эквивалент setStyle(linkActiveFormat,value). Ожидает словарь свойств. Преобразовывает массив объектов с ключом и значением в качестве элементов в словарь. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkHoverFormat:set"><apiName>linkHoverFormat</apiName><shortdesc> эквивалент setStyle(linkHoverFormat,value).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> эквивалент setStyle(linkHoverFormat,value). Ожидает словарь свойств. Преобразовывает массив объектов с ключом и значением в качестве элементов в словарь. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkNormalFormat:set"><apiName>linkNormalFormat</apiName><shortdesc> эквивалент setStyle(linkNormalFormat,value).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> эквивалент setStyle(linkNormalFormat,value). Ожидает словарь свойств. Преобразовывает массив объектов с ключом и значением в качестве элементов в словарь. </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat: языковой стандарт текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: языковой стандарт текста. Управляет преобразованием регистра и формированием. Используются стандартные идентификаторы языкового стандарта, описанные в техническом стандарте Unicode #35. Например, en, en_US и en-US относятся к английскому, а ja – к японскому. 
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение en.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat: отступ снизу в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ снизу в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между нижним краем контейнера и текстом. Значение представляет собой число. <p> При горизонтальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в нижней части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat: отступ слева в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ слева в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между левым краем контейнера и текстом. Значение представляет собой число.<p> При вертикальном тексте в прокручиваемых контейнерах с несколькими столбцами в первом и последующих столбцах отобразится заполнение в виде пробела в конечной части контейнера, но для просмотра заполнения последнего столбца при превышении текстом ширины контейнера, придется выполнить прокрутку.</p>
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat: отступ справа в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ справа в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между правым краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat: отступ сверху в пикселях (принимает значение по умолчанию, если имеет значение undefined в процессе каскада).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: отступ сверху в пикселях (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Пробел между верхним краем контейнера и текстом. Значение представляет собой число.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину отступа для конца абзаца, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, указывающее величину отступа для правого края абзаца, в пикселях. Относится к правому краю в текстах, написанных слева направо, и к левому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого после абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого после абзаца. Сворачивается вместе с <codeph>paragraphSpaceBefore</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого перед абзацем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, определяющее величину интервала в пикселях, оставляемого перед абзацем. Сворачивается вместе с <codeph>paragraphSpaceAfter</codeph>.
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину отступа для начала абзаца, в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, указывающее величину отступа для левого края абзаца, в пикселях. Относится к левому краю в текстах, написанных слева направо, и к правому краю в текстах, написанных справа налево. 
		 <p>Допускаются значения и числа от 0 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeEnd:get"><apiName>parentRelativeEnd</apiName><shortdesc> Возвращает относительный конец этого объекта FlowElement в вышестоящем элементе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Возвращает относительный конец этого объекта FlowElement в вышестоящем элементе. Если вышестоящий элемент null, то это значение всегда равно <codeph>textLength</codeph>. Если вышестоящий элемент не null, то это значение является суммой длин текста этого и всех предыдущих элементов одного уровня, что соответствует первому символу в следующем объекте FlowElement.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeStart:get"><apiName>parentRelativeStart</apiName><shortdesc> Возвращает относительное начало этого объекта FlowElement в вышестоящем элементе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Возвращает относительное начало этого объекта FlowElement в вышестоящем элементе. Если вышестоящий элемент null, то это значение всегда нулевое. Если вышестоящий элемент не null, то значение является суммой длин текста всех предыдущих элементов одного уровня.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parent:get"><apiName>parent</apiName><shortdesc> Возвращает вышестоящий элемент этого объекта FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Возвращает вышестоящий элемент этого объекта FlowElement. Каждый FlowElement имеет не более одного вышестоящего элемента.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat: режим визуализации, используемый для данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: режим визуализации, используемый для данного текста. Применяется только к встроенным шрифтам (для свойства <codeph>fontLookup</codeph> устанавливается значение <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Допустимые значения: flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение CFF.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styleName:get"><apiName>styleName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat: указывает позиции табуляции, связанные с абзацем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает позиции табуляции, связанные с абзацем. Установщики могут принимать значения flashx.textLayout.formats.TabStopFormat, сжатое строковое представление, undefined или <codeph>FormatValue.INHERIT</codeph>. Сжатое строковое представление всегда преобразовывается в массив flashx.textLayout.formats.TabStopFormat. <p>Строковый формат представляет собой список позиций табуляции, где каждая точка табуляции отделена одним или несколькими пробелами.</p><p>Позиция табуляции принимает следующую форму: &lt;тип выравнивания>&lt;позиция выравнивания>|&lt;метка выравнивания >.</p><p>Тип выравнивания представляет собой одиночный символ и может иметь значение S, E, C или D (или эквиваленты нижнего регистра). S или s означает start, E или e – end, C или c – center, D или d – decimal. Тип выравнивания является необязательным параметром, и если он не определен, то по умолчанию принимается значение S.</p><p>Позиция выравнивания представляет собой число, и определяется в соответствии со спецификацией FXG для чисел (десятичное число или экспоненциальное представление). Позиция выравнивания является обязательным параметром.</p><p>Вертикальная черта используется для отделения позиции выравнивания от метки выравнивания, и используется только в случае, если имеется метка выравнивания. </p><p> Метка выравнивания не является обязательной при типе выравнивания D, и не должна присутствовать при типе выравнивания, отличном от D. Метка выравнивания может представлять собой любую последовательностью символов, прерываемых пробелом, оканчивающим позицию табуляции (для последней позиции табуляции завершающий пробел не является обязательным; здесь подразумевается конец метки выравнивания). Пробел может быть частью метки выравнивания, если он маскируется обратной косой чертой (\). Обратная косая черта может быть частью метки выравнивания, она маскируется другой обратной косой чертой (\\). Если используется тип выравнивания D, а метка выравнивания не указана, то она примет значение по умолчанию null.</p><p>Если позиции табуляции не определены, операция табуляции по умолчанию назначает конец строки.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение null.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat: выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: выравнивание последней (или единственной) строки в абзаце относительно контейнера в выровненном тексте. Если для <codeph>textAlign</codeph> установлено значение <codeph>TextAlign.JUSTIFY</codeph>, то <codeph>textAlignLast</codeph>определяет способ выравнивания последней строки (или единственной строки, если блок состоит из одной строки). Значения подобны значениям <codeph>textAlign</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat: выравнивание строк в абзаце относительно контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: выравнивание строк в абзаце относительно контейнера. <codeph>TextAlign.LEFT</codeph> выравнивает строки по левому краю контейнера. <codeph>TextAlign.RIGHT</codeph> выравнивает строки по правому краю. <codeph>TextAlign.CENTER</codeph> помещает строку на равном расстоянии от левого и правого краев. <codeph>TextAlign.JUSTIFY</codeph> выравнивает строки по ширине контейнера. <codeph>TextAlign.START</codeph> эквивалентен установке left в тексте слева направо, или right в тексте справа налево. <codeph>TextAlign.END</codeph> эквивалентен установке right в тексте слева направо, или left в тексте справа налево.
		 <p>Допустимые значения: flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение START.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: альфа-значение (прозрачности) для текста. При значении 0 обеспечивается полная прозрачность, а при значении 1 – полная непрозрачность. Экранные объекты, для которых значение <codeph>textAlpha</codeph> равно 0, являются активными, несмотря на их невидимость.
		 <p>Допускаются значения и числа от 0 до 1, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat: оформление текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: оформление в тексте. Используется для подчеркивания текста; значение по умолчанию – none.
		 <p>Допустимые значения: flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение NONE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat: число, определяющее величину отступа первой строки абзаца в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число, определяющее величину отступа первой строки абзаца в пикселях. Отрицательный отступ перенесет строку на поля или даже за границы контейнера.
		 <p>Допускаются значения и числа от -1000 до 1000, а также flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat: указывает параметры выравнивания текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает параметры выравнивания текста. Значением по умолчанию является <codeph>TextJustify.INTER_WORD</codeph>, что означает добавление дополнительного пробела к знакам пробела. <codeph>TextJustify.DISTRIBUTE</codeph> добавляет дополнительный пробел к знакам пробела и между отдельными буквами. Используется только вместе с <codeph>justificationRule</codeph> параметра <codeph>JustificationRule.SPACE</codeph>.
		 <p>Допустимые значения: flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение INTER_WORD.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textLength:get"><apiName>textLength</apiName><shortdesc>
		 Возвращает общую длину текста, принадлежащего этому объекту FlowElement и его нижестоящим элементам.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Возвращает общую длину текста, принадлежащего этому объекту FlowElement и его нижестоящим элементам. Если элемент не имеет текста, то обычно <codeph>textLength</codeph> имеет нулевое значение. 
		 
		 <p>Последний фрагмент объектов ParagraphElement имеет символ разрыва абзаца для последнего объекта SpanElement. Разрыв абзаца включается в значение <codeph>textLength</codeph> для этого объекта SpanElement и всех его вышестоящих элементов. Он не включается в свойство <codeph>text</codeph> объекта SpanElement.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat: указывает число градусов для поворота данного текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: указывает число градусов для поворота данного текста.
		 <p>Допустимые значения: flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat: число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого слева от каждого символа. Если kerning включен, значение <codeph>trackingLeft</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingLeft</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat: число в пикселях (или процент от fontSize, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: число в пикселях (или процент от <codeph>fontSize</codeph>, например, 120%), определяющее размер трекинга (ручного кернинга), применяемого справа от каждого символа Если kerning включен, значение <codeph>trackingRight</codeph> добавляется к значениям в таблице кернинга для шрифта. Если kerning выключен, значение <codeph>trackingRight</codeph> используется в качестве значения ручного кернинга. Поддерживает как положительные, так и отрицательные значения. 
		 <p>Допустимые числовые значения — от -1000 до 1000.</p>
		 <p>Допустимые процентные значения: от -1000% до 1000%.</p>
		 <p>Допустимые значения включают flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat: тип регистра текста, используемый для этого текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: тип регистра, используемого для данного текста. Примеры:<p><adobeimage alt="typographicCase" href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Допустимые значения: flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение DEFAULT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:userStyles:get"><apiName>userStyles</apiName><shortdesc> Позволяет считывать и записывать стили пользователя в объект FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Позволяет считывать и записывать стили пользователя в объект FlowElement. Следует отметить, что считывание этого свойства выполняет копию словаря стилей пользователя. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat: выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: выравнивание по вертикали (принимает значение по умолчанию, если в процессе каскада было установлено значение undefined). Определяет способ выравнивания элементов TextFlow в контейнере.
		 <p>Допустимые значения: flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если undefined, в процессе каскада свойство получает значение TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat: сворачивает или сохраняет пустое пространство при импорте текста в TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat: сворачивает или сохраняет пустое пространство при импорте текста в TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> сохраняет все символы пробела. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> удаляет символы новой строки, табуляции, а также начальные и концевые пробелы в блоке импортированного текста. Теги разрыва строк () и символы разделителя строк Unicode сохраняются.
		 <p>Допустимые значения: flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если значение равно undefined, в процессе каскада это свойство наследует свое значение от вышестоящего элемента. Если ни в одном из вышестоящих элементов данное свойство не установлено, оно получает значение COLLAPSE.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tlf_internal:impliedElement:set"><apiName>impliedElement</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tracking:set"><apiName>tracking</apiName><shortdesc>
		 Устанавливает трекинг и является синонимом свойства trackingRight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Устанавливает трекинг и является синонимом свойства <codeph>trackingRight</codeph>. Указывается как число пикселей или процент от <codeph>fontSize</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/trackingRight"><linktext>trackingRight</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkElement"><apiName>LinkElement</apiName><shortdesc> Класс LinkElement определяет ссылку на URI (Universal Resource Identifier), которая запускается, когда пользователь нажимает на нее.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> Класс LinkElement определяет ссылку на URI (Universal Resource Identifier), которая запускается, когда пользователь нажимает на нее. Класс LinkElement является подклассом класса SubParagraphGroupElement и может содержать один или более объектов FlowElement, например, объект SpanElement, сохраняющий текст ссылки. Пустой LinkElement, не содержащий объект FlowElement, игнорируется.
	 <p>Если необходимо указать значение параметра target, он должен иметь одно из следующих значений:
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>Значение параметра target</entry><entry>description</entry></row></thead><tbody><row>
	   <entry>_self</entry>
	   <entry>Заменяет текущую HTML-страницу. Если она задана тегами frame или frameset, то новая страница будет загружена внутри этого фрейма. Если она открыта в отдельном окне браузера, то новая страница будет открыта вместо той страницы, с которой она была вызвана.</entry>
	 </row><row>
	   <entry>_blank</entry>
	   <entry>Открывает новое окно браузера с пустой страницей.</entry>
	 </row><row>
	   <entry>_parent</entry>
	   <entry>Заменяет HTML-страницу, с которой она была вызвана.</entry>
	 </row><row>
	   <entry>_top</entry>
	   <entry>Загружает в текущем браузере вместо какого-либо его элемента, например, вместо frameset.</entry>
	 </row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc><example conref="examples\LinkElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.CLICK_click"><apiName>click</apiName><shortdesc> 
	 Передается при нажатии ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.CLICK</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Передается при нажатии ссылки. Клиенты могут изменить способ обработки события по ссылке, задав свой способ и вызвав preventDefault().
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT_rollOut"><apiName>rollOut</apiName><shortdesc> 
	 Передается при снятии указателя мыши со ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Передается при снятии указателя мыши со ссылки. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER_rollOver"><apiName>rollOver</apiName><shortdesc>
	 Передается при первом наведении указателя мыши на ссылку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Передается при первом наведении указателя мыши на ссылку. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><shortdesc> 
	 Передается при прохождении указателя мыши над ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Передается при прохождении указателя мыши над ссылкой. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><shortdesc> 
	 Передается при нахождении указателя мыши над какой-либо ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Передается при нахождении указателя мыши над какой-либо ссылкой. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><shortdesc> 
	 Передается при нажатии кнопки мыши над какой-либо ссылкой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Передается при нажатии кнопки мыши над какой-либо ссылкой.
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:LinkElement:LinkElement"><apiName>LinkElement</apiName><shortdesc> Конструктор создает новый экземпляр LinkElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает новый экземпляр LinkElement.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:LinkElement:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события.
		</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Функция прослушивателя, обрабатывающая событие. Эта функция принимает объект события как единственный параметр и ничего не возвращает, например:
		<p><codeph>function(evt:Event):void</codeph></p>
		Эта функция может иметь любое имя.
		</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, работает ли прослушиватель в фазе захвата или в целевой фазе и в фазе восходящей цепочки. Если значение <codeph>useCapture</codeph> равно <codeph>true</codeph>, прослушиватель обрабатывает событие только во время фазы захвата, но не во время целевой фазы или фазы восходящей цепочки. Если значение <codeph>useCapture</codeph> равно <codeph>false</codeph>, то прослушиватель обрабатывает событие только в целевой фазе или фазе восходящей цепочки. Для прослушивания события во всех трех фазах следует дважды вызвать <codeph>addEventListener()</codeph>, первый раз с <codeph>useCapture</codeph>, равным <codeph>true</codeph>, а второй раз с <codeph>useCapture</codeph>, равным <codeph>false</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Уровень приоритета прослушателя события. Приоритеты обозначены 32-разрядным целым числом. Чем больше число, тем выше приоритет. Все прослушиватели с приоритетом <i>n</i> обрабатываются перед обработкой прослушивателей с приоритетом <i>n-1</i>. Прослушиватели с одинаковым приоритетом обрабатываются в порядке их добавления. Значение приоритета по умолчанию равно 0. 
		</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, является ли ссылка на прослушивателя «сильной» или «слабой». «Сильная» ссылка (по умолчанию) предотвращает удаление прослушивателя сборщиком мусора. «Слабая» ссылка позволяет удалить прослушиватель. <p>Функции элементов уровня класса не подлежат удалению в качестве мусора, вследствие чего можно установить <codeph>useWeakReference</codeph> равным <codeph>true</codeph> для функций элементов уровня класса, не подвергая их возможности подобного удаления. Если значение <codeph>useWeakReference</codeph> равно <codeph>true</codeph> для прослушивателя, являющегося вложенной внутренней функцией, такая функция может быть удалена в качестве мусора и перестанет быть устойчивой. При создании ссылок на внутреннюю функцию (возможно сохранение в другой переменной) она не будет собираться в качестве мусора и останется устойчивой.</p>
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Тип события.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Удаляемый объект прослушивателя.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, был ли слушатель зарегистрирован для фазы захвата или целевой фазы и фазы восходящей цепочки. Если прослушиватель был зарегистрирован для фазы захвата, целевой фазы и фазы восходящей цепочки, необходимо удалить оба вызова <codeph>removeEventListener()</codeph>: один вызов с <codeph>useCapture</codeph>, равным <codeph>true</codeph>, и второй вызов с <codeph>useCapture</codeph>, равным <codeph>false</codeph>. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:LinkElement:href:get"><apiName>href</apiName><shortdesc>
		 Унифицированный идентификатор ресурса (Uniform Resource Identifier, URI-адрес), связанный с объектом LinkElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Унифицированный идентификатор ресурса (Uniform Resource Identifier, URI-адрес), связанный с объектом LinkElement. URI должны поддерживаться методом <codeph>flash.net.navigateToURL()</codeph>. Это свойство соответствует параметру <codeph>request</codeph> для данного метода.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.xml#net/navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:linkState:get"><apiName>linkState</apiName><shortdesc>
		 Текущее состояние ссылки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 Текущее состояние ссылки.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:target:get"><apiName>target</apiName><shortdesc>
		 Значение параметра target, связанное с LinkElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Значение параметра target, связанное с LinkElement. Допустимыми значениями являются _self, _blank, _parent и _top. Это значение соответствует параметру <codeph>window</codeph> метода <codeph>flash.net.navigateToURL()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.xml#net/navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TCYElement"><apiName>TCYElement</apiName><shortdesc> 
	 Класс TCYElement (Tatechuuyoko – ta-tae-chu-yo-ko) является подклассом SubParagraphGroupElement, позволяющим отображать текст в горизонтальном направлении внутри вертикальной строки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс TCYElement (Tatechuuyoko – ta-tae-chu-yo-ko) является подклассом SubParagraphGroupElement, позволяющим отображать текст в горизонтальном направлении внутри вертикальной строки. Обычно это используется для того, чтобы небольшие блоки неяпонского текста или числа, например даты, были более читаемыми. TCY может быть применен к горизонтальному тексту, но это не окажет какого-либо влияния на стиль отображения до тех пор, пока текст не будет повернут вертикально. Блоки TCY, не содержащие текста, будут удалены из текстового потока в процессе нормализации.
	 <p>
	 В приведенном ниже примере на изображении справа показано применение TCY в отношении числа 57, в то время как на изображении слева форматирование TCY отсутствует.</p>
	 <p><adobeimage alt="TCYElement" border="0" href="../../../images/textLayout_TCYElement.png"/>
	 </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TCYElement:TCYElement"><apiName>TCYElement</apiName><shortdesc> Конструктор создает новый экземпляр TCYElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает новый экземпляр TCYElement.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:OverflowPolicy"><apiName>OverflowPolicy</apiName><shortdesc>
	  Класс OverflowPolicy определяет набор констант для свойства overflowPolicy класса IConfiguration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Класс OverflowPolicy определяет набор констант для свойства <codeph>overflowPolicy</codeph> класса IConfiguration. Он определяет, каким образом компоновщик обработает строки в конце области компоновки.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_ANY"><apiName>FIT_ANY</apiName><shortdesc> 
	 Обеспечивает расположение строки в области компоновки, если какая-либо часть строки для этого подходит</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitAny</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Обеспечивает расположение строки в области компоновки, если какая-либо часть строки для этого подходит
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_DESCENDERS"><apiName>FIT_DESCENDERS</apiName><shortdesc> 
	 Обеспечивает расположение строки в области компоновки, если область от верхнего края до базовой линии для этого подходит.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitDescenders</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Обеспечивает расположение строки в области компоновки, если область от верхнего края до базовой линии для этого подходит.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:GlobalSettings"><apiName>GlobalSettings</apiName><shortdesc> Конфигурация, которая применяется ко всем объектам TextFlow.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Конфигурация, которая применяется ко всем объектам TextFlow.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:GlobalSettings:tlf_internal:enableDefaultTabStops:get"><apiName>enableDefaultTabStops</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:enableSearch:get"><apiName>enableSearch</apiName><shortdesc> Управляет, будет ли текст видимым для средству индексирования поисковой системы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Управляет, будет ли текст видимым для средству индексирования поисковой системы. По умолчанию имеет значение <codeph>true</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:fontMapperFunction:get"><apiName>fontMapperFunction</apiName><shortdesc> 
		Указывает обратный вызов, используемый для сопоставления шрифтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
		Указывает обратный вызов, использованный для подстановки шрифтов. Обратный вызов получает объект <codeph>flash.text.engine.FontDescription</codeph> и обновляет его при необходимости. После определения нового обратного вызова подстановки шрифтов, или изменения вариантов поведения существующих обратных вызовов, клиент должен явным образом вызвать <codeph>flashx.textLayout.elements.TextFlow.invalidateAllFormats</codeph> для каждого измененного текстового потока. Это гарантирует, что при каждом восстановлении элемента листа в текстовом потоке FontDescription, применяемый к нему, повторно вычисляется и инициирует обратный вызов. 
		
		</apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontDescription.xml"><linktext>FontDescription</linktext></link><link href="" invalidHref="flashx.textLayout.elements.TextFlow.invalidateAllFormats.xml"><linktext>invalidateAllFormats</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resolveFontLookupFunction:get"><apiName>resolveFontLookupFunction</apiName><shortdesc> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
		     
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link><link href="" invalidHref="flash.text.engine.ElementFormat.xml"><linktext/></link><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resourceStringFunction:get"><apiName>resourceStringFunction</apiName><shortdesc> Функция, которая принимает два параметра (идентификатор ресурса и факультативный массив параметров) для замены в строке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> Функция, которая принимает два параметра (идентификатор ресурса и при желании массив параметров) для замены в строке. Строка имеет следующий формат «Содержимое{0} другое содержимое{1}». Параметры считываются из факультативного массива и подставляются вместо подстрок в квадратных скобках. TLF предоставляет реализацию по умолчанию для строк по умолчанию. Клиенты могут заменять эту функцию на собственную реализацию локализации.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:BreakElement"><apiName>BreakElement</apiName><shortdesc> 
	Класс BreakElement определяет разрыв строки, что обеспечивает создание разрыва строки в тексте без создания нового абзаца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	Класс BreakElement определяет разрыв строки, что обеспечивает создание разрыва строки в тексте без создания нового абзаца. Он вставляет в текст абзаца символ U+2028.
	
	<p><b>Примечание</b>. Этот класс существует в первую очередь для поддержки тегов разрыва в разметке MXML. Для создания разрывов строки можно добавить символы новой строки (\n) непосредственно в текст следующим образом:</p>
	
	<codeblock rev="3.0">
	spanElement1.text += '\n';
	</codeblock>
	
	</apiDesc><example conref="examples\BreakElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:BreakElement:BreakElement"><apiName>BreakElement</apiName><shortdesc> Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> Класс InlineGraphicElement обрабатывает графические объекты, отображающие встроенные в текст элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> Класс InlineGraphicElement обрабатывает графические объекты, отображающие встроенные в текст элементы. 
	 
	 <p>Можно встроить графику или любой DisplayObject либо указать URL-адрес местоположения графики. Свойства <codeph>height</codeph> и <codeph>width</codeph> элемента InlineGraphicElement управляют фактическим размером отображаемой графики. Эти значения также управляют размером пространства, выделяемого для графики, содержащейся в объекте TextLine. Каждое из свойств <codeph>height</codeph> и <codeph>width</codeph> может быть следующими значениями:</p>
	 <ol>
	 <li>Количество пикселей</li>
	 <li>Процент измеренного размера изображения</li>
	 <li>Вычисляющая размер константа auto (значение по умолчанию)</li>
	 </ol>
	 Существует три свойства или средства доступа, относящихся к ширине и высоте графики:
	 <ul>
	 <li>Свойства <codeph>width</codeph> и <codeph>height</codeph></li>
	 <li>Свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph>, являющиеся шириной или высотой графики во время загрузки</li>
	 <li>Свойства <codeph>actualWidth</codeph> и <codeph>actualHeight</codeph>, являющиеся фактически отображаемой и создаваемой шириной или высотой графики, вычисленной на основе <codeph>width</codeph> или <codeph>height</codeph> и <codeph>measuredWidth</codeph> или <codeph>measuredHeight</codeph></li>
	 </ul>
	 <p>Во время загрузки графики свойства <codeph>actualWidth</codeph> и <codeph>actualHeight</codeph> всегда равны нулю.</p>
	 
	 <p>Если <codeph>source</codeph> указан как URI, загрузка графики осуществляется асинхронно. В случае DisplayObject, во время установки графики в объект InlineGraphicElement TextLayout использует <codeph>width</codeph> и <codeph>height</codeph> в качестве <codeph>measuredHeight</codeph> и <codeph>measuredWidth</codeph>; считывание его ширины и высоты выполняется немедленно.</p>
	 <p><b>Примечания</b>. Для отображения асинхронно загружаемой графики необходимо прослушивать событие StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGED на TextFlow и вызывать <codeph>updateAllControllers()</codeph> для вывода графики. В процессе загрузки графики <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> равны нулю.</p>
	 
	 <p>Некоторые встроенные графические элементы являются анимацией или видеороликами, возможно, имеющими звук. Их выполнение начинается при первой их компоновке по окончании загрузки. Они выполняются до тех пор, пока flowComposer на TextFlow не будет иметь значение null. После чего они останавливаются и выгружаются.</p>
	 
	 
	 <ol>
	 	<li> </li>.
	 <li>  </li>
	 	<li> </li>
	 </ol>
	 </apiDesc><example conref="examples\InlineGraphicElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>DisplayObject</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>flashx.textLayout.compose.IFlowComposer.updateAllControllers()</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>StatusChangeEvent</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:InlineGraphicElement:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> Конструктор создает новый объект InlineGraphicElement
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Конструктор создает новый объект InlineGraphicElement
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualHeight:get"><apiName>actualHeight</apiName><shortdesc> Фактическая высота.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Фактическая высота. Это отображаемая и создаваемая высота, вычисляемая на основе свойств <codeph>height</codeph> и <codeph>measuredHeight</codeph>.
		
		<p>Значения свойства <codeph>actualHeight</codeph> вычисляются в соответствии со следующей таблицей:</p>
		<adobetable class="innertable">
		
		
		
		
		<tgroup cols="2"><thead><row><entry>свойство height</entry><entry>actualHeight</entry></row></thead><tbody><row>
		  <entry>auto</entry>
		  <entry>measuredheight</entry>
		</row><row>
		  <entry>h процент</entry>
		  <entry>h процент measuredheight</entry>
		</row><row>
		  <entry>h номер</entry>
		  <entry>h</entry>
		</row></tbody></tgroup></adobetable>
		<p><b>Примечания</b>. Если встроенная графика является объектом DisplayObject, ее ширина и высота считываются немедленно. Если <codeph>measuredWidth</codeph> или <codeph>measuredHeight</codeph> имеют значение нуль, то любые автоматические вычисления, которые бы могли привести к делению на ноль, обращают результат в нуль.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>высота</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualWidth:get"><apiName>actualWidth</apiName><shortdesc> Фактическая ширина.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Фактическая ширина. Это отображаемая и создаваемая ширина, вычисляемая на основе свойств <codeph>width</codeph> и <codeph>measuredWidth</codeph>.
		
		<p>Значения свойства <codeph>actualWidth</codeph> вычисляются в соответствии со следующей таблицей:</p>
		<adobetable class="innertable">
		
		
		
		
		<tgroup cols="2"><thead><row><entry>свойство width</entry><entry>actualWidth</entry></row></thead><tbody><row>
		  <entry>auto</entry>
		  <entry>measuredWidth</entry>
		</row><row>
		  <entry>w процент</entry>
		  <entry>w процент measuredWidth</entry>
		</row><row>
		  <entry>w номер</entry>
		  <entry>w</entry>
		</row></tbody></tgroup></adobetable>
		
		<p><b>Примечания</b>. Если встроенная графика является объектом DisplayObject, ее ширина и высота считываются немедленно. Если <codeph>measuredWidth</codeph> или <codeph>measuredHeight</codeph> имеют значение нуль, то любые автоматические вычисления, которые бы могли привести к делению на ноль, обращают результат в нуль.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>ширина</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc> Встроенная графика.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc> Встроенная графика. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:height:get"><apiName>height</apiName><shortdesc> Высота изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> Высота изображения. Может иметь значение auto, заданное число пикселей или процент измеренной высоты. 
		 
		 <p>Допустимые значения: flashx.textLayout.formats.FormatValue.AUTO и flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Допустимые числовые значения: от 0 до 32000.</p>
		 <p>Допустимые процентные значения: от 0 до 1000000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если имеет значение undefined или inherit, InlineGraphicElement будет использовать значение по умолчанию auto.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc> Исходная высота графического элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Исходная высота графического элемента. Это высота графического элемента во время загрузки.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>высота</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc> Исходная ширина графического элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Исходная ширина графического элемента. Это ширина графического элемента во время загрузки.
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>ширина</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:source:get"><apiName>source</apiName><shortdesc> Устанавливает источник для графического элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Устанавливает источник для графического элемента. Значение может быть строкой, интерпретируемой как URI, классом, интерпретируемым как класс встроенного DisplayObject, экземпляром DisplayObject или URLRequest. Создает DisplayObject и, если объект InlineGraphicElement добавлен в ParagraphElement в объекте TextFlow, встраивает его в текст.
		 
		 </apiDesc><example conref="examples\InlineGraphicElement_sourceExample.as"/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:status:get"><apiName>status</apiName><shortdesc> Текущее состояние изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Текущее состояние изображения. При каждом изменении состояния владелец TextFlow отправляет StatusChangeEvent.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>flashx.textLayout.events.StatusChangeEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:width:get"><apiName>width</apiName><shortdesc> Ширина графического элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>когда заданное значение находится за пределами диапазона данного свойства
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> Ширина графического элемента. Может иметь значение auto, заданное число пикселей или процент измеренной ширины изображения.
		 
		 <p>Допустимые значения: flashx.textLayout.formats.FormatValue.AUTO и flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Допустимые числовые значения: от 0 до 32000.</p>
		 <p>Допустимые процентные значения: от 0 до 1000000.</p>
		 <p>По умолчанию значение равно undefined, что указывает на то, что оно не установлено.</p>
		 <p>Если имеет значение undefined или inherit, InlineGraphicElement будет использовать значение по умолчанию auto.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> 
	 Класс FlowGroupElement – это базовый класс для объектов FlowElement, которые могут содержать массив нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Класс FlowGroupElement – это базовый класс для объектов FlowElement, которые могут содержать массив нижестоящих элементов. Эти классы включают TextFlow, ParagraphElement, DivElement и LinkElement.
	 
	 <p>Объект FlowGroupElement невозможно создать напрямую. При вызове <codeph>new FlowGroupElement()</codeph> выдается исключение error.</p>
 	 
 	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowGroupElement:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChildAt"><apiName>addChildAt</apiName><shortdesc> 
		 Добавляет нижестоящий объект FlowElement в заданной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index</codeph> выходит за пределы диапазона.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>добавленный нижестоящий элемент FlowElement 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>индекс позиции, в которой будет добавлен нижестоящий элемент, начиная с 0.
		 </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Добавляемый нижестоящий элемент.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Добавляет нижестоящий объект FlowElement в заданной позиции индекса.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChild"><apiName>addChild</apiName><shortdesc> 
		 Добавляет нижестоящий объект FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>добавленный нижестоящий элемент FlowElement 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Добавляемый нижестоящий элемент.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Добавляет нижестоящий объект FlowElement. Новый нижестоящий элемент добавляется в конец списка нижестоящих элементов.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findChildIndexAtPosition"><apiName>findChildIndexAtPosition</apiName><shortdesc>
		 В случае относительного расположения текста, найдите индекс первого нижестоящего FlowElement, содержащего относительную позицию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>индекс первого нижестоящего элемента, содержащего <codeph>relativePosition</codeph>
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	позиция относительно данного элемента
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 В случае относительного расположения текста, найдите индекс первого нижестоящего FlowElement, содержащего относительную позицию. Из-за нулевой длины FlowElements несколько нижестоящих элементов могут содержать относительную позицию.
		  
		 <p>Проверьте нижестоящие элементы для поиска FlowElement, содержащего относительную позицию. Предоставленная относительная позиция является относительной для этого FlowElement.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findChildIndexAtPositionExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findLeaf"><apiName>findLeaf</apiName><shortdesc>
		 В случае относительного расположения текста, найдите элемент листа, содержащий позицию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>элемент листа, содержащий относительную позицию.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>относительный индекс текста для поиска.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 В случае относительного расположения текста, найдите элемент листа, содержащий позицию. 
		 
		 <p>Выполняет поиск по иерархии элемента потока для нахождения FlowLeafElement, содержащего указанную позицию. Указанная позиция является относительной для данного объекта FlowElement.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildAt"><apiName>getChildAt</apiName><shortdesc> 
		 Возвращает нижестоящий элемент FlowElement с заданной позицией индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>нижестоящий объект FlowElement в заданной позиции.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>позиция, в которой помещается объект FlowElement.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Возвращает нижестоящий элемент FlowElement с заданной позицией индекса.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildIndex"><apiName>getChildIndex</apiName><shortdesc> 
		 Выполняет поиск указанного объекта FlowElement по нижестоящим элементам и возвращает его позицию индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Позиция индекса указанного нижестоящего элемента. Если элемент <codeph>child</codeph> не найден, возвращает -1.
		  
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Элемент объекта FlowElement, располагаемый среди нижестоящих элементов.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Выполняет поиск указанного объекта FlowElement по нижестоящим элементам и возвращает его позицию индекса.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getFirstLeaf"><apiName>getFirstLeaf</apiName><shortdesc>
		 Возвращает первого потомка FlowLeafElement в этой группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>первый объект FlowLeafElement.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Возвращает первого потомка FlowLeafElement в этой группе.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getFirstLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getLastLeaf"><apiName>getLastLeaf</apiName><shortdesc>
		 Возвращает последнего потомка FlowLeafElement в этой группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>последний объект FlowLeafElement.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Возвращает последнего потомка FlowLeafElement в этой группе.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getLastLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChildAt"><apiName>removeChildAt</apiName><shortdesc> 
		 Удаляет нижестоящий объект FlowElement в заданной позиции.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><codeph>index</codeph> выходит за пределы диапазона.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>нижестоящий объект FlowElement, удаленный из заданной позиции.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>позиция удаляемого нижестоящего элемента.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Удаляет нижестоящий объект FlowElement в заданной позиции.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChild"><apiName>removeChild</apiName><shortdesc> 
		 Удаляет указанный нижестоящий объект FlowElement из данной группы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Элемент <codeph>child</codeph> не найден.
		 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>удаленный нижестоящий объект FlowElement 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>Удаляемый нижестоящий элемент.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Удаляет указанный нижестоящий объект FlowElement из данной группы.
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:replaceChildren"><apiName>replaceChildren</apiName><shortdesc>
		 Заменяет нижестоящие элементы в группе указанными новыми элементами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Указанный <codeph>beginChildIndex</codeph> или <codeph>endChildIndex</codeph> выходит за пределы диапазона.
	     
	     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginChildIndex</apiItemName><apiType value="int"/><apiDesc>Значение индекса для начального положения диапазона замены в массиве нижестоящих элементов.
		 </apiDesc></apiParam><apiParam><apiItemName>endChildIndex</apiItemName><apiType value="int"/><apiDesc>Значение индекса для конечного положения диапазона замены в массиве нижестоящих элементов.
		 </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>Элементы для замены заданного диапазона элементов. Может существовать последовательность, содержащая вышеуказанные элементы потока, массивы или вектора.
		  
	     </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Заменяет нижестоящие элементы в группе указанными новыми элементами. Для управления операциями используйте параметры <codeph>beginChildIndex</codeph> и <codeph>endChildIndex</codeph> следующим образом:
		 <p><ul>
		 <li>Для удаления элементов не передавайте элементов замены.</li>
		 <li>Для вставки элементов передайте одинаковое значение для <codeph>beginChildIndex</codeph> и <codeph>endChildIndex</codeph>. Новые элементы вставляются перед заданным индексом.</li>
		 <li>Для добавления элементов передайте <codeph>numChildren</codeph> для <codeph>beginChildIndex</codeph> и <codeph>endChildIndex</codeph>.</li>
		 </ul></p>
		 <p>В противном случае, этот метод заменяет указанные элементы, начиная с элемента, имеющего индекс <codeph>beginChildIndex</codeph> и до (но не включая) элемента, имеющего индекс <codeph>endChildIndex</codeph>.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_replaceChildrenExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:splitAtIndex"><apiName>splitAtIndex</apiName><shortdesc> 
		 Разделяет этот объект в позиции, указанной параметром childIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>если <codeph>childIndex</codeph> больше длины нижестоящих элементов.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>новый объект FlowGroupElement.
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>childIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Разделяет этот объект в позиции, указанной параметром <codeph>childIndex</codeph>. Если этот элемент группы имеет вышестоящий элемент, то создается поверхностная копия этого объекта, и его нижестоящие элементы заменяются элементами вплоть до индекса. Перемещает элементы после <codeph>childIndex</codeph> в копию.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowGroupElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Добавляет массив нижестоящих элементов к данному объекту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>если элемент массива не FlowElement или String
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Добавляет массив нижестоящих элементов к данному объекту. Использует метод <codeph>replaceChildren()</codeph> для добавления каждого элемента в массив. Предназначается для использования во время импорта скомпилированных файлов MXML.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement/replaceChildren()"><linktext>FlowGroupElement.replaceChildren()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowGroupElement:numChildren:get"><apiName>numChildren</apiName><shortdesc> 
		Возвращает число нижестоящих элементов FlowElement у этого объекта FlowGroupElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		Возвращает число нижестоящих элементов FlowElement у этого объекта FlowGroupElement.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>