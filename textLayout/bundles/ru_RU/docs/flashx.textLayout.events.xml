<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.events"><apiName>flashx.textLayout.events</apiName><apiDetail/><apiClassifier id="flashx.textLayout.events:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> Элемент LinkElement обеспечивает передачу этого события при обнаружении действия мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> Элемент LinkElement обеспечивает передачу этого события при обнаружении действия мыши. Эта специальная версия событий мыши включена в инфраструктуру Text Layout Framework, поскольку при вложении элемента ссылки в поток текста, доступного для редактирования, события мыши обычно являются нежелательными. 
	 <p>Для прослушивания этого типа события можно добавить прослушиватель события к элементу LinkElement. При принятии решения об отмене события путем вызова метода <codeph>Event.preventDefault()</codeph>, поведение по умолчанию, связанное с событием, не будет реализовано.
	 </p>
	 <p>Если добавление прослушивателя событий к LinkElement не осуществляется или функция прослушивателя событий не обеспечивает отмену поведения, вновь выполняется передача события, однако на этот раз экземпляром TextFlow, связанным с LinkElement, а не непосредственно элементом LinkElement. Благодаря этому обеспечивается вторая возможность прослушивания данного события с помощью прослушивателя события, присоединенного к экземпляру TextFlow. 
	 </p>
	 <p>События FlowElementMouseEvent передаются только в том случае, если текст не может быть отредактирован или если клавиша Ctrl была нажата одновременно с действием мыши.</p>
	 <p>
	 События следующих шести типов передаются только в том случае, если текст не может быть отредактирован или если была нажата клавиша Ctrl:
	 <ul>
	   <li><codeph>MouseEvent.CLICK</codeph></li>
	   <li><codeph>MouseEvent.MOUSE_DOWN</codeph></li>
	   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
	   <li><codeph>MouseEvent.MOUSE_UP</codeph></li>
	   <li><codeph>MouseEvent.ROLL_OVER</codeph></li>
	   <li><codeph>MouseEvent.ROLL_OUT</codeph></li>
	 </ul>
	 </p>
	 
	 </apiDesc><example conref="examples\FlowElementMouseEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:FlowElementMouseEvent:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> 
		 Создает объект события, содержащий информацию о действии мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc> Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существуют шесть типов: <codeph>MouseEvent.CLICK</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_OUT</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph>, <codeph>MouseEvent.ROLL_OVER</codeph> и <codeph>MouseEvent.ROLL_OUT</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, участвует ли объект Event в фазе восходящей цепочки потока событий. Объекты FlowElementMouseEvent не являются элементами восходящей цепочки.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Определяет, можно ли отменить объект Event. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>cancelable</codeph>. Объекты FlowElementMouseEvent могут быть отменены. Отмена поведения по умолчанию, связанного с этим событием, осуществляется путем вызова метода <codeph>preventDefault()</codeph> в прослушивателе событий.
		 </apiDesc></apiParam><apiParam><apiItemName>flowElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Экземпляр FlowElement, как правило, элемент LinkElement, связанный с этим событием. Прослушиватели событий могут получать эту информацию через свойство <codeph>flowElement</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>originalEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiData>null</apiData><apiDesc>Первоначальное событие мыши, возникшее для экземпляра flowElement. Прослушиватели событий могут получать эту информацию через свойство <codeph>originalEvent</codeph>.

		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Создает объект события, содержащий информацию о действии мыши. Объекты Event передаются прослушивателям событий в качестве параметров. Рекомендуется использовать этот конструктор в том случае, если планируется передача события вручную. Применение конструктора для прослушивания объектов FlowElementMouseEvent, созданных экземпляром LinkElement, не требуется.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:flowElement:get"><apiName>flowElement</apiName><shortdesc> 
		 Элемент LinkElement, передавший событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Элемент LinkElement, передавший событие.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:originalEvent:get"><apiName>originalEvent</apiName><shortdesc> 
		 Первоначальное событие мыши, созданное в результате действия мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:MouseEvent"/></apiValueDef><apiDesc> 
		 Первоначальное событие мыши, созданное в результате действия мыши. Это свойство может содержать одно из следующих значений:
		 <ul>
		   <li><codeph>MouseEvent.CLICK</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_DOWN</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_UP</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OVER</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
		 </ul>
		 <p>
		 В большинстве случаев первоначальное событие соответствует событию, передаваемому экземпляром LinkElement. События соответствуют событиям <codeph>click</codeph>, <codeph>mouseDown</codeph>, <codeph>mouseOut</codeph> и <codeph>mouseOver</codeph>. Однако, возможны два случая, при которых первоначальное событие преобразуется экземпляром LinkElement в связанное событие. Если экземпляром LinkElement обнаруживается событие <codeph>mouseOver</codeph>, обеспечивается передача события <codeph>rollOver</codeph>. Аналогично, при обнаружении экземпляром LinkElement события <codeph>mouseOut</codeph>, передается событие <codeph>rollOut</codeph>.
		 </p>
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.MouseEvent.xml"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> 
	 Экземпляр TextFlow обеспечивает передачу этого события после завершения операции компоновки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Экземпляр TextFlow обеспечивает передачу этого события после завершения операции компоновки. Каждый текстовый контейнер имеет два состояния: компоновка и отображение. Это событие уведомляет пользователя о завершении этапа компоновки. Таким образом возникает возможность внести любые требуемые и соответствующие изменения в контейнер перед выводом текста на экран. Например, вы можете использовать это событие, чтобы выделить некоторые слова или символы в текстовом потоке до отображения текста на экране.
	 
	 <p>Три основных метода, которые отправляют это событие: <codeph>compose()</codeph>, <codeph>updateToController()</codeph> и <codeph>updateAllControllers()</codeph>. Все эти методы находятся в классе StandardFlowComposer.</p>
	 
	 <p><b>Примечание.</b> Если событие отправлено методом <codeph>updateAllControllers()</codeph>, не вызывайте <codeph>updateAllControllers()</codeph> повторно в функции обработчика событий. Подобный вызов был бы рекурсивным, поскольку метод <codeph>updateAllControllers()</codeph> выполняет как шаг компоновки, так и шаг отображения. <codeph>updateAllControllers()</codeph> отправляет это событие после завершения компоновки, но до выполнения отображения. Это же справедливо и для метода <codeph>updateToController()</codeph>.
	 </p>
	 
	 </apiDesc><example conref="examples\CompositionCompleteEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:CompositionCompleteEvent:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> Конструктор
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>тип события – используйте статическое свойство COMPOSITION_COMPLETE.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, является ли событие «событием на цепочке». Это событие не является элементом восходящей цепочки.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, можно ли предотвратить поведение, связанное с событием. Это событие не может быть отменено.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>Скомпонованный TextFlow
		 </apiDesc></apiParam><apiParam><apiItemName>compositionStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>начало компоновки, в виде индекса в текстовом потоке.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionLength</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>число составленных символов
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Конструктор
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:COMPOSITION_COMPLETE"><apiName>COMPOSITION_COMPLETE</apiName><shortdesc> 
	     Определяет значение свойства type объекта события compositionComplete 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compositionComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Определяет значение свойства <codeph>type</codeph> объекта события <codeph>compositionComplete</codeph>  
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionLength:get"><apiName>compositionLength</apiName><shortdesc> 
		 Число составленных символов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Число составленных символов.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionStart:get"><apiName>compositionStart</apiName><shortdesc> 
		 Начальное местоположение диапазона текста, задействованного при компоновке, выраженное в виде индекса в текстовом потоке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Начальное местоположение диапазона текста, задействованного при компоновке, выраженное в виде индекса в текстовом потоке.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow, на котором была закончена компоновка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow, на котором была закончена компоновка. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> 
	 Экземпляр TextFlow обеспечивает отправку этого события каждый раз, когда оно отмечается как поврежденное.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Экземпляр TextFlow обеспечивает отправку этого события каждый раз, когда оно отмечается как поврежденное. Повреждение может быть инициировано изменениями, внесенными в модель или в макет.
	 
	 </apiDesc><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:DamageEvent:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> Конструктор
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>текстовый индекс начала повреждения
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>длина поврежденного текста
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>damageAbsoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc> Конструктор
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:DamageEvent:DAMAGE"><apiName>DAMAGE</apiName><shortdesc> Тип события DamageEvent </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>damage</apiData><apiType value="String"/></apiValueDef><apiDesc> Тип события DamageEvent </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 Абсолютное начало повреждения 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Абсолютное начало повреждения 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageLength:get"><apiName>damageLength</apiName><shortdesc>
		 Длина повреждения 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Длина повреждения 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 Элемент TextFlow с повреждением 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 Элемент TextFlow с повреждением 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> 
	 Экземпляр TextFlow обеспечивает передачу этого события при изменении статуса FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Экземпляр TextFlow обеспечивает передачу этого события при изменении статуса FlowElement. Это событие может применяться для обнаружения окончания загрузки встроенного графического элемента. Обработчик событий используется для перекомпоновки текстового потока на основе присутствия вновь загруженного встроенного графического элемента.
	 
	 </apiDesc><example conref="examples\StatusChangeEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:StatusChangeEvent:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> Создает объект события, содержащий информацию об изменении статуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип StatusChangeEvent: <codeph>StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает, является ли событие элементом восходящей цепочки. Это событие не является элементом восходящей цепочки.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает, можно ли предотвратить поведение, связанное с событием. Это событие не может быть отменено.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Экземпляр FlowElement, статус которого был изменен.
		 </apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Новый статус экземпляра FlowElement.
		 </apiDesc></apiParam><apiParam><apiItemName>errorEvent</apiItemName><apiType value="flash.events:ErrorEvent"/><apiData>null</apiData><apiDesc>Объект ErrorEvent, связанный со статусом, если таковой существует.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Создает объект события, содержащий информацию об изменении статуса.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:StatusChangeEvent:INLINE_GRAPHIC_STATUS_CHANGE"><apiName>INLINE_GRAPHIC_STATUS_CHANGE</apiName><shortdesc> 
	     Определяет значение свойства type объекта события inlineGraphicStatusChanged.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inlineGraphicStatusChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Определяет значение свойства <codeph>type</codeph> объекта события <codeph>inlineGraphicStatusChanged.</codeph>
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:element:get"><apiName>element</apiName><shortdesc> 
		 Экземпляр FlowElement, статус которого был изменен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Экземпляр FlowElement, статус которого был изменен. 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:errorEvent:get"><apiName>errorEvent</apiName><shortdesc> 
		 Объект ErrorEvent, переданный в результате изменения статуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:ErrorEvent"/></apiValueDef><apiDesc> 
		 Объект ErrorEvent, переданный в результате изменения статуса. 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.ErrorEvent.xml"><linktext>flash.events.ErrorEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:status:get"><apiName>status</apiName><shortdesc>
		 Новый статус элемента FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Новый статус элемента FlowElement. Возможные значения данного свойства определены в классе InlineGraphicElementStatus. Имеется пять статических констант, доступных в классе InlineGraphicElementStatus:
		 <ul>
		   <li>ERROR: строка = error. Во время загрузки заданной графики произошла ошибка.</li>
		   <li>LOADING: строка = loading. Загрузка была инициирована (но не завершена) элементом графики, являющимся URL-адресом.</li>
		   <li>LOAD_PENDING: строка = loadPending. Элемент графики является URL-адресом, который не был загружен.</li>
		   <li>READY: строка = ready. Графика полностью загружена и правильно установлена по размеру.</li>
		   <li>SIZE_PENDING: строка = sizePending. Элемент графики с автоматически изменяемой или заданной в процентах шириной/высотой завершил загрузку, но не был восстановлен.</li>
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
	 Объект SelectionEvent передается экземпляром TextFlow в том случае, если EditManager или SelectionManager обеспечивают изменение или выбор диапазона текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Объект SelectionEvent передается экземпляром TextFlow в том случае, если EditManager или SelectionManager обеспечивают изменение или выбор диапазона текста. Например, это событие передается не только при выборе диапазона текста, но и в случае изменения выбора после щелчка пользователя в любой точке текстового потока. Кроме того, это событие также передается при внесении изменений в текст с помощью EditManager или при форматировании текста внутри текстового диапазона.
	 
	 </apiDesc><example conref="examples\SelectionEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:SelectionEvent:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
		 Создает объект события, содержащий информацию об операции потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует только один тип события SelectionEvent: <codeph>SelectionEvent.SELECTION_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает, является ли событие элементом восходящей цепочки. Это событие не является элементом восходящей цепочки.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает, можно ли предотвратить поведение, связанное с событием.
		 </apiDesc></apiParam><apiParam><apiItemName>selectionState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>	Объект типа ElementRange, описывающий диапазон выбранного текста.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Создает объект события, содержащий информацию об операции потока.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:SelectionEvent:SELECTION_CHANGE"><apiName>SELECTION_CHANGE</apiName><shortdesc> 
		 Константа SelectionEvent.SELECTION_CHANGE определяет значение свойства type объекта события выбора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Константа SelectionEvent.SELECTION_CHANGE определяет значение свойства type объекта события выбора. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:SelectionEvent:selectionState:get"><apiName>selectionState</apiName><shortdesc> 
		 Объект типа SelectionState, представляющий выбранный диапазон, связанный с этим событием SelectionEvent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 Объект типа SelectionState, представляющий выбранный диапазон, связанный с этим событием SelectionEvent.
		 
		 <p>Это свойство, наряду с классом ElementRange, может использоваться для создания экземпляра ElementRange, представляющего диапазон выбранного текста. Для создания экземпляра класса ElementRange, представляющего диапазон выбранного текста, можно применять следующий код (переменная <codeph>ev</codeph> представляет объект события, а условный оператор используется для защиты от значения <codeph>null</codeph> свойства <codeph>selectionState</codeph>):</p>
		 <codeblock>
		 // Find selected element range
		 var range:ElementRange = ev.selectionState ?  
		 	ElementRange.createElementRange(ev.selectionState.textFlow,
		 	ev.selectionState.absoluteStart, ev.selectionState.absoluteEnd) : null;</codeblock>
		 
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ElementRange"><linktext>flashx.textLayout.edit.ElementRange</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> Экземпляр TextFlow обеспечивает передачу этого события непосредственно перед началом операции и повторяет передачу сразу после ее завершения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> Экземпляр TextFlow обеспечивает передачу этого события непосредственно перед началом операции и повторяет передачу сразу после ее завершения. Несмотря на то, что передаваемый в обоих случаях объект события является экземпляром FlowOperationEvent, события, передаваемые до и после операции, существенным образом различаются.
	 
	 <p>Перед выполнением любой операции объект TextFlow передает событие FlowOperationEvent, свойство <codeph>type</codeph> которого имеет значение <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN. </codeph> Для определения типа начинающейся операции следует проверить свойство <codeph>operation</codeph>. События типа FLOW_OPERATION_BEGIN могут быть отменены. Это означает, что при принятии решении о том, что продолжение операции не требуется, можно вызвать метод <codeph>Event.PreventDefault()</codeph> для отмены операции. В случае отмены операции, она не выполняется, а событие FLOW_OPERATION_END не передается. Для выполнения другой операции до осуществления операции в событии также можно использовать обратный вызов для EditManager. В этом случае операции, инициированные в обработчике событий, будут отменены как одиночная операция с операцией, запущенной событием.</p>
	 
	 <p>Если продолжение операции разрешено, элемент TextFlow обеспечит передачу события FlowOperationEvent по завершении операции и свойство <codeph>type</codeph> будет иметь значение <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>. Это событие передается до того, как в проигрывателе Flash Player появятся ошибки, которые могли возникнуть в результате выполнения операции. Благодаря этому можно обработать ошибку до ее появления в проигрывателе Flash Player. Доступ к ошибке можно получить при помощи свойства события <codeph>error</codeph>. Если ошибка должна быть обработана в обработчике событий, для предотвращения появления ошибки в проигрывателе Flash Player следует отменить событие FLOW_OPERATION_END, вызвав метод <codeph>Event.preventDefault()</codeph>. Для выполнения какой-либо дополнительной операции также можно использовать обратный вызов для EditManager. В этом случае операции, являющиеся результатом, будут отменены единым блоком вместе с операцией, вызывающей событие.
	 </p> 
	 
	 </apiDesc><example conref="examples\FlowOperationEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:FlowOperationEvent:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> Создает объект события, содержащий информацию об операции потока.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>		Тип события. Прослушиватели событий могут получать эту информацию через унаследованное свойство <codeph>type</codeph>. Существует два типа: <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN</codeph> и <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>		Указывает, является ли событие элементом восходящей цепочки. Это событие не является элементом восходящей цепочки.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Указывает, можно ли предотвратить поведение, связанное с событием. Для отмены этого события необходимо вызвать метод <codeph>Event.preventDefault()</codeph> в функции обработчика событий.
		 </apiDesc></apiParam><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiData>null</apiData><apiDesc>	Операция FlowOperation, которая должна начаться либо только что была завершена.
		 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>		Любая ошибка, создаваемая в ходе выполнения операции.
		 </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiType value="Error"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> Создает объект события, содержащий информацию об операции потока.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_BEGIN"><apiName>FLOW_OPERATION_BEGIN</apiName><shortdesc> 
		 Определяет значение свойства type объекта события flowOperationBegin.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationBegin</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Определяет значение свойства <codeph>type</codeph> объекта события <codeph>flowOperationBegin</codeph>, передаваемого перед выполнением операции. Отмена этого события приведет к блокировке операции. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_COMPLETE"><apiName>FLOW_OPERATION_COMPLETE</apiName><shortdesc>  
		 Задает значение свойства type для объекта события flowOperationComplete.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Задает значение свойства <codeph>type</codeph> для объекта события <codeph>flowOperationComplete</codeph>. Отправляется после завершения всех операций, включая ожидающие выполнения и составные, после завершения компоновки и прокрутки экрана.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_END"><apiName>FLOW_OPERATION_END</apiName><shortdesc>  
		 Определяет значение свойства type объекта события flowOperationEnd.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Определяет значение свойства <codeph>type</codeph> объекта события <codeph>flowOperationEnd</codeph>, передаваемого после завершения операции. Все ошибки сохраняются в элементе <codeph>OperationEvent.error</codeph>. При возникновении ошибки отмена этого события приведет к блокировке повторного появления ошибки. Вообще говоря, все ошибки могут стать критическими с высокой степенью вероятности.
	 	 <p>Изменение операции в этот момент времени (после ее выполнения) может завершиться отказом.</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:error:get"><apiName>error</apiName><shortdesc> 
		 Ошибка, появляющаяся в ходе операции, при ее наличии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Error"/></apiValueDef><apiDesc> 
		 Ошибка, появляющаяся в ходе операции, при ее наличии. При возникновении ошибки в ходе выполнения операции, ссылка на объект ошибки присоединяется к событию FLOW_OPERATION_END. Благодаря этому можно исправить ошибку до ее появления в проигрывателе Flash Player. В случае отмены события ошибка не появится в проигрывателе Flash Player.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:level:get"><apiName>level</apiName><shortdesc> 
		 Операции можно объединять в составные путем вложения одной в другую.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Операции можно объединять в составные путем вложения одной в другую. Этот флажок описывает уровень вложенности операции.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:operation:get"><apiName>operation</apiName><shortdesc> 
		 Операция, выполнение которой должно начаться или только что было завершено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 Операция, выполнение которой должно начаться или только что было завершено.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> 
	 Экземпляр TextFlow обеспечивает передачу этого события после того, как для любого из контейнеров будет завершено обновление.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>Note: the DamageEvent_example class contains a good example of 
	 using the UpdateCompleteEvent, so I have included it as the class example
	 instead of creating a new example. I've updated the description of the
	 DamageEvent_example file to include prominent mention of the UpdateCompleteEvent.
	 
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Экземпляр TextFlow обеспечивает передачу этого события после того, как для любого из контейнеров будет завершено обновление. Каждый текстовый контейнер имеет два состояния: компоновка и отображение. Это событие уведомляет о завершении этапа отображения. Таким образом, создается возможность вносить любые необходимые изменения в контейнер в тот момент, когда он подготовлен к отображению, но еще не выведен на экран.
	 
	 </apiDesc><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:UpdateCompleteEvent:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> Конструктор
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>тип события – используйте статическое свойство UPDATE_COMPLETE.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, является ли событие событием восходящей цепочки. Это событие не является элементом восходящей цепочки.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Указывает, можно ли предотвратить поведение, связанное с событием. Это событие не может быть отменено.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>Элемент ContainerController, контейнер которого был обновлен
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiData>null</apiData><apiDesc>Обновленный TextFlow
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Конструктор
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:UPDATE_COMPLETE"><apiName>UPDATE_COMPLETE</apiName><shortdesc> 
	     Определяет значение свойства type объекта UpdateCompleteEvent 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>updateComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Определяет значение свойства <codeph>type</codeph> объекта <codeph>UpdateCompleteEvent</codeph> 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:controller:get"><apiName>controller</apiName><shortdesc> 
		 Контроллер обновляемого контейнера
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 Контроллер обновляемого контейнера
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 Обновленный TextFlow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 Обновленный TextFlow. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
	 Экземпляр TextLayoutEvent представляет событие, например событие TextLayoutEvent.SCROLL, не требующее определения пользовательских свойств.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Экземпляр TextLayoutEvent представляет событие, например событие <codeph>TextLayoutEvent.SCROLL</codeph>, не требующее определения пользовательских свойств. 
	 <p>Событие прокрутки, представляемое с помощью экземпляра TextLayoutEvent, свойство <codeph>type</codeph> которого имеет значение <codeph>TextLayoutEvent.SCROLL</codeph>. Использование класса, специально предназначенного для события прокрутки, не требуется, поскольку пользовательские свойства, существующие у других событий, имеющих определенные классы событий, отсутствуют в событии прокрутки. Если необходимо новое событие форматирования макета, а пользовательские свойства для события не требуются, новое событие также будет представлено объектом TextLayoutEvent, однако в качестве значения свойства <codeph>type</codeph> будет задана новая статическая константа.
	 </p>
	 
	 </apiDesc><example conref="examples\TextLayoutEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:TextLayoutEvent:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
		  Класс TextLayoutEvent представляет объект события, передаваемый прослушивателю событий для многих событий Text Layout.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
		  Класс TextLayoutEvent представляет объект события, передаваемый прослушивателю событий для многих событий Text Layout.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:TextLayoutEvent:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	      Константа TextLayoutEvent.SCROLL определяет значение свойства type объекта события scroll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
	      Константа <codeph>TextLayoutEvent.SCROLL</codeph> определяет значение свойства <codeph>type</codeph> объекта события <codeph>scroll</codeph>.
	     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>