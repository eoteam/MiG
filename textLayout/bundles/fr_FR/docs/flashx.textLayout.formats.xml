<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.formats"><apiName>flashx.textLayout.formats</apiName><apiDetail/><apiClassifier id="flashx.textLayout.formats:ITabStopFormat"><apiName>ITabStopFormat</apiName><shortdesc>
	 Cette interface fournit un accès en lecture aux propriétés associées aux taquets de tabulation. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Cette interface fournit un accès en lecture aux propriétés associées aux taquets de tabulation. 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 Alignement de tabulation de ce taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement de tabulation de ce taquet de tabulation. 
		 <p>Les valeurs valides sont flash.text.engine.TabAlignment.START, flash.text.engine.TabAlignment.CENTER, flash.text.engine.TabAlignment.END, flash.text.engine.TabAlignment.DECIMAL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si undefined pendant la cascade cette propriété aura la valeur START. </p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 Symbole d’alignement à utiliser si l’alignement est DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Symbole d’alignement à utiliser si l’alignement est DECIMAL.
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si undefined pendant la cascade cette propriété aura la valeur null. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITabStopFormat:flashx.textLayout.formats:ITabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 Position du taquet de tabulation, en pixels, par rapport au début de la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Position du taquet de tabulation, en pixels, par rapport au début de la ligne.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 10000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:Direction"><apiName>Direction</apiName><shortdesc>
	  Définit les valeurs de définition de la propriété direction de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de définition de la propriété <codeph>direction</codeph> de la classe <codeph>TextLayoutFormat</codeph>. Le sens de lecture de gauche à droite est utilisé dans les scripts de style latin. Le sens de lecture de droite à gauche est utilisé dans les scripts arabes ou hébreux par exemple.  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/direction"><linktext>TextLayoutFormat.direction</linktext></link></related-links><apiValue id="flashx.textLayout.formats:Direction:LTR"><apiName>LTR</apiName><shortdesc> Spécifie le sens de gauche à droite pour le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ltr</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie le sens de gauche à droite pour le texte.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:Direction:RTL"><apiName>RTL</apiName><shortdesc> Spécifie le sens de droite à gauche pour le texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rtl</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie le sens de droite à gauche pour le texte. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:VerticalAlign"><apiName>VerticalAlign</apiName><shortdesc>
	  Définit les valeurs de la propriété verticalAlign de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de la propriété <codeph>verticalAlign</codeph> de la classe TextLayoutFormat. Indique la façon dont les éléments TextFlow s’alignent sur leurs conteneurs.   
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/verticalAlign"><linktext>TextLayoutFormat.verticalAlign</linktext></link></related-links><apiValue id="flashx.textLayout.formats:VerticalAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc> Spécifie l’alignement sur le bord inférieur du cadre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement sur le bord inférieur du cadre. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Spécifie la justification verticale des lignes dans le cadre 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie la justification verticale des lignes dans le cadre 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Détermine l’alignement au milieu de l’image. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middle</apiData><apiType value="String"/></apiValueDef><apiDesc> Détermine l’alignement au milieu de l’image.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:VerticalAlign:TOP"><apiName>TOP</apiName><shortdesc> Spécifie l’alignement sur le bord supérieur du cadre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement sur le bord supérieur du cadre. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextDecoration"><apiName>TextDecoration</apiName><shortdesc>
	  Définit les valeurs de la propriété textDecoration de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de la propriété <codeph>textDecoration</codeph> de la classe TextLayoutFormat. Les valeurs indiquent soit du texte normal, sans aucune décoration, soit du texte souligné. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textDecoration"><linktext>TextLayoutFormat.textDecoration</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextDecoration:NONE"><apiName>NONE</apiName><shortdesc> Spécifie du texte normal - aucune décoration n’est appliquée  
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie du texte normal - aucune décoration n’est appliquée  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextDecoration:UNDERLINE"><apiName>UNDERLINE</apiName><shortdesc> Spécifie que le texte est souligné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>underline</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que le texte est souligné.  
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:JustificationRule"><apiName>JustificationRule</apiName><shortdesc>
	  Définit les valeurs de définition de la propriété justificationRule de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de définition de la propriété <codeph>justificationRule</codeph> de la classe TextLayoutFormat. La valeur par défaut SPACE, qui effectue la justification en ajoutant un espace supplémentaire aux caractères d’espacement. Lorsque vous utilisez EAST_ASIAN, l’interligne de style japonais est utilisée. Il s’applique vers le bas contrairement à celui du texte en caractères romains, qui s’applique vers le haut. L’espacement de signes de ponctuation est également différent. En caractères romains, la virgule et les points japonais prennent une largeur de caractère complet, mais seulement la moitié en caractères asiatiques. En outre, l’espacement entre les signes de ponctuation séquentielle devient plus serré, obéissant ainsi aux conventions typographiques traditionnelles asiatiques. Notez également l’interligne, appliquée à la deuxième ligne des paragraphes dans l’exemple ci-dessous. Dans la version asiatique, les deux dernières lignes sont décalées à gauche. Dans la version en caractères romains, la deuxième ligne et les lignes suivantes sont décalées à gauche. 
	  <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:JustificationRule:EAST_ASIAN"><apiName>EAST_ASIAN</apiName><shortdesc> Spécifie les règles de justification asiatiques. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>eastAsian</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie les règles de justification asiatiques.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:JustificationRule:SPACE"><apiName>SPACE</apiName><shortdesc> Spécifie la justification pour le texte latin et d’autres scripts horizontaux qui séparent les mots par des espaces. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>space</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie la justification pour le texte latin et d’autres scripts horizontaux qui séparent les mots par des espaces. Utilisez cette valeur pour tout, sauf le texte asiatique. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextJustify"><apiName>TextJustify</apiName><shortdesc>
	  Définit les valeurs de définition de la propriété textJustify de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de définition de la propriété <codeph>textJustify</codeph> de la classe TextLayoutFormat. La valeur par défaut est INTER_WORD, ce qui signifie qu’en mode de justification, un espace supplémentaire est ajouté aux espaces. DISTRIBUTE indique qu’un espace supplémentaire est ajouté à la fois aux espaces et entre chaque lettre. Utilisez ces valeurs uniquement lorsque vous définissez <codeph>justificationRule</codeph> sur SPACE.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textJustify"><linktext>TextLayoutFormat.textJustify</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/justificationRule"><linktext>TextLayoutFormat.justificationRule</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextJustify:DISTRIBUTE"><apiName>DISTRIBUTE</apiName><shortdesc> Spécifie que la justification doit s’accomplir en ajoutant un espace à la fois aux espaces et entre chaque lettre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>distribute</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que la justification doit s’accomplir en ajoutant un espace à la fois aux espaces et entre chaque lettre.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextJustify:INTER_WORD"><apiName>INTER_WORD</apiName><shortdesc> Spécifie que la justification est d’ajouter de l’espace aux caractères d’espacement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>interWord</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que la justification est d’ajouter de l’espace aux caractères d’espacement.  
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TLFTypographicCase"><apiName>TLFTypographicCase</apiName><shortdesc>
	  Définit les valeurs de la propriété typographicCaseproperty de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de la propriété <codeph>typographicCaseproperty</codeph> de la classe TextLayoutFormat. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/typographicCase"><linktext>TextLayoutFormat.typographicCase</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TLFTypographicCase:CAPS_TO_SMALL_CAPS"><apiName>CAPS_TO_SMALL_CAPS</apiName><shortdesc> Spécifie que les caractères majuscules utilisent des glyphes de petites majuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que les caractères majuscules utilisent des glyphes de petites majuscules en sortie. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> Spécifie la casse typographique par défaut, sans fonctions spéciales.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie la casse typographique par défaut, sans fonctions spéciales. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE_TO_SMALL_CAPS"><apiName>LOWERCASE_TO_SMALL_CAPS</apiName><shortdesc> Convertit tous les caractères minuscules en majuscules, puis applique les petits majuscules aux caractères que la conversion a modifiés uniquement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercaseToSmallCaps</apiData><apiType value="String"/></apiValueDef><apiDesc> Convertit tous les caractères minuscules en majuscules, puis applique les petits majuscules aux caractères que la conversion a modifiés uniquement.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> Spécifie que tous les caractères utilisent des glyphes minuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que tous les caractères utilisent des glyphes minuscules en sortie. 
  	 	 
  	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TLFTypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> Spécifie que tous les caractères utilisent des glyphes majuscules en sortie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que tous les caractères utilisent des glyphes majuscules en sortie.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineShift"><apiName>BaselineShift</apiName><shortdesc>
	  Définit les constantes permettant de spécifier le texte en indice ou en exposant dans la propriété baselineShift de la classe TextLayoutFormat. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les constantes permettant de spécifier le texte en indice ou en exposant dans la propriété <codeph>baselineShift</codeph> de la classe <codeph>TextLayoutFormat</codeph>. Vous pouvez spécifier le décalage vertical comme décalage en pixels absolu, pourcentage de la taille de point actuelle ou constantes SUPERSCRIPT ou SUBSCRIPT. Les valeurs positives décalent la ligne vers le haut pour le texte horizontal (à droite pour le texte vertical) et les valeurs négatives décalent la ligne vers le bas pour le texte horizontal (à gauche pour le texte vertical).  
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/baselineShift"><linktext>TextLayoutFormat.baselineShift</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineShift:SUBSCRIPT"><apiName>SUBSCRIPT</apiName><shortdesc> Décale la ligne de base vers la position d’indice actuelle. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>subscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Décale la ligne de base vers la position d’indice actuelle. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineShift:SUPERSCRIPT"><apiName>SUPERSCRIPT</apiName><shortdesc> Décale la ligne de base vers la position d’exposant actuelle. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>superscript</apiData><apiType value="String"/></apiValueDef><apiDesc> Décale la ligne de base vers la position d’exposant actuelle. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
	 La classe TabStopFormat représente les propriétés d’un taquet de tabulation dans un paragraphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITabStopFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 La classe TabStopFormat représente les propriétés d’un taquet de tabulation dans un paragraphe. Vous pouvez définir la propriété <codeph>TextLayoutFormat.tabstops</codeph> sur un tableau d’objets TabStopFormat.
	 </apiDesc><example conref="examples\TabStopFormat_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TabElement"><linktext>flashx.textLayout.elements.TabElement</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.TextLayoutFormat.tabStops</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TabStopFormat:TabStopFormat"><apiName>TabStopFormat</apiName><shortdesc>
		 Crée un nouvel objet TabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Occurrence facultative à partir de laquelle copier les valeurs initiales. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Crée un nouvel objet TabStopFormat. Tous les paramètres sont vides ou peuvent être initialisés à partir de l’objet <codeph>initialValues</codeph> fourni.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TabStopFormat:apply"><apiName>apply</apiName><shortdesc>
		 Remplace les valeurs des propriétés de cet objet TabStopFormat par les valeurs des propriétés qui sont définies dans l’occurrence incoming ITabStopFormat. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence dont les valeurs des propriétés sont appliquées à cet objet TabStopFormat. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remplace les valeurs des propriétés de cet objet TabStopFormat par les valeurs des propriétés qui sont définies dans l’occurrence <codeph>incoming</codeph> ITabStopFormat. Les propriétés dont les valeurs sont <codeph>undefined</codeph> dans l’occurrence <codeph>incoming</codeph> ITabStopFormat ne sont pas modifiées dans cet objet.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Concatène les valeurs des propriétés de l’occurrence incoming ITabStopFormat avec les valeurs de cet objet TabStopFormat. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence partir de laquelle les valeurs sont concaténées. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatène les valeurs des propriétés de l’occurrence <codeph>incoming</codeph> ITabStopFormat avec les valeurs de cet objet TabStopFormat. Dans cet objet TabStopFormat (l’objet récepteur), les propriétés dont les valeurs sont <codeph>FormatValue.INHERIT</codeph> et les propriétés héritières dont les valeurs sont <codeph>undefined</codeph> reçoivent de nouvelles valeurs de la part de l’objet <codeph>incoming</codeph>. Les valeurs de toutes les autres propriétés restent inchangées.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:concat"><apiName>concat</apiName><shortdesc>
		 Concatène les valeurs des propriétés de l’occurrence incoming ITabStopFormat avec les valeurs de cet objet TabStopFormat. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence partir de laquelle les valeurs sont concaténées. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatène les valeurs des propriétés de l’occurrence <codeph>incoming</codeph> ITabStopFormat avec les valeurs de cet objet TabStopFormat. Dans cet objet TabStopFormat (l’objet récepteur), les propriétés dont les valeurs sont <codeph>FormatValue.INHERIT</codeph> et les propriétés héritières dont les valeurs sont <codeph>undefined</codeph> reçoivent de nouvelles valeurs de la part de l’objet <codeph>incoming</codeph>. Les propriétés non héritières dont les valeurs sont <codeph>undefined</codeph> reçoivent leurs valeurs par défaut. Les valeurs de toutes les autres propriétés restent inchangées.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:copy"><apiName>copy</apiName><shortdesc>
		 Copie les paramètres TabStopFormat à partir de l’occurrence values ITabStopFormat dans cet objet TabStopFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence facultative à partir de laquelle copier les valeurs.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copie les paramètres TabStopFormat à partir de l’occurrence <codeph>values</codeph> ITabStopFormat dans cet objet TabStopFormat. Si les <codeph>valeurs</codeph> sont<codeph>null</codeph>, cet objet TabStopFormat est initialisé avec des valeurs non définies pour toutes les propriétés.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Compare les propriétés de l’occurrence p1 ITabStopFormat avec celles de l’occurrence p2 ITabStopFormat et renvoie la valeur true si toutes les propriétés correspondent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>La valeur est true si toutes les propriétés correspondent. Sinon, la valeur est false. 
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence à comparer avec <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence à comparer avec <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compare les propriétés de l’occurrence ITabStopFormat <codeph>p1</codeph> avec celles de l’occurrence ITabStopFormat <codeph>p2</codeph> et renvoie la valeur <codeph>true</codeph> si toutes les propriétés correspondent.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Définit les propriétés de cet objet TabStopFormat sur undefined si elles ne correspondent pas à celles de l’occurrence ITabStopFormat incoming.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence avec laquelle comparer les valeurs des propriétés de cet objet TabStopFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Définit les propriétés de cet objet TabStopFormat sur <codeph>undefined</codeph> si elles ne correspondent pas à celles de l’occurrence ITabStopFormat <codeph>incoming</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TabStopFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Définit les propriétés de cet objet TabStopFormat sur undefined si elles correspondent à celles de l’occurrence ITabStopFormat incoming.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITabStopFormat</apiOperationClassifier><apiDesc>Occurrence avec laquelle comparer les valeurs des propriétés de cet objet TabStopFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Définit les propriétés de cet objet TabStopFormat sur <codeph>undefined</codeph> si elles correspondent à celles de l’occurrence ITabStopFormat <codeph>incoming</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TabStopFormat:alignment:get"><apiName>alignment</apiName><shortdesc>
		 Alignement de tabulation de ce taquet de tabulation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement de tabulation de ce taquet de tabulation. 
		 <p>Les valeurs valides sont flash.text.engine.TabAlignment.START, flash.text.engine.TabAlignment.CENTER, flash.text.engine.TabAlignment.END, flash.text.engine.TabAlignment.DECIMAL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si undefined pendant la cascade cette propriété aura la valeur START. </p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link><link href="" invalidHref="flash.text.engine.TabAlignment.xml"><linktext>flash.text.engine.TabAlignment</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
		 Symbole d’alignement à utiliser si l’alignement est DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Symbole d’alignement à utiliser si l’alignement est DECIMAL.
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si undefined pendant la cascade cette propriété aura la valeur null. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Crée un objet TabStopFormat avec des paramètres par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITabStopFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Renvoie un objet TabStopFormat avec des paramètres par défaut. Cette fonction renvoie toujours le même objet. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TabStopFormat:position:get"><apiName>position</apiName><shortdesc>
		 Position du taquet de tabulation, en pixels, par rapport au début de la ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Position du taquet de tabulation, en pixels, par rapport au début de la ligne.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 10000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:FormatValue"><apiName>FormatValue</apiName><shortdesc>
	  Définit des valeurs spécifiant qu’une propriété de mise en forme hérite la valeur de son parent ou que sa valeur est générée automatiquement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit des valeurs spécifiant qu’une propriété de mise en forme hérite la valeur de son parent ou que sa valeur est générée automatiquement. La constante <codeph>INHERIT</codeph> indique qu’une propriété hérite de la valeur de son parent, tandis que la constante <codeph>AUTO</codeph> précise qu’un algorithme interne détermine automatiquement la valeur de la propriété. Par exemple, vous pouvez définir <codeph>TextLayoutFormat.columnWidth</codeph> à l’aide de ces valeurs. En règle générale, la description de la propriété indique qu’elle accepte ces constantes. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat"><linktext>TextLayoutFormat</linktext></link></related-links><apiValue id="flashx.textLayout.formats:FormatValue:AUTO"><apiName>AUTO</apiName><shortdesc> Spécifie qu’une valeur est automatiquement générée pour la propriété. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie qu’une valeur est automatiquement générée pour la propriété.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:FormatValue:INHERIT"><apiName>INHERIT</apiName><shortdesc> Spécifique qu’une propriété doit hériter de la valeur de son parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inherit</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifique qu’une propriété doit hériter de la valeur de son parent.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextAlign"><apiName>TextAlign</apiName><shortdesc>
	  Définit les valeurs de définition des propriétés textAlign et textAlignLast de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de définition des propriétés <codeph>textAlign</codeph> et <codeph>textAlignLast</codeph> de la classe TextLayoutFormat. Les valeurs décrivent l’alignement des lignes du paragraphe par rapport au conteneur. 
	 
	 </apiDesc><example conref="examples\TextAlignExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlign"><linktext>TextLayoutFormat.textAlign</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/textAlignLast"><linktext>TextLayoutFormat.textAlignLast</linktext></link></related-links><apiValue id="flashx.textLayout.formats:TextAlign:CENTER"><apiName>CENTER</apiName><shortdesc> Spécifie l’alignement centré au sein du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement centré au sein du conteneur. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:END"><apiName>END</apiName><shortdesc> Spécifie l’alignement sur le bord situé à l’extrémité - le texte est aligné à l’opposé du sens de l’écriture. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement sur le bord situé à l’extrémité - le texte est aligné à l’opposé du sens de l’écriture. Cela revient à spécifier la droite pour un texte écrit de gauche à droite, ou à spécifier la gauche pour un texte écrit de droite à gauche.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:JUSTIFY"><apiName>JUSTIFY</apiName><shortdesc> Spécifie que le texte est justifié dans les lignes de sorte qu’il remplit l’espace du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>justify</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que le texte est justifiée dans les lignes de sorte qu’il remplit l’espace du conteneur. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:LEFT"><apiName>LEFT</apiName><shortdesc> Spécifie l’alignement sur le bord gauche. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement sur le bord gauche.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc> Spécifie l’alignement sur le bord droit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement sur le bord droit. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextAlign:START"><apiName>START</apiName><shortdesc> Spécifie l’alignement sur le bord situé au début - le texte est aligné de façon à suivre le sens de l’écriture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie l’alignement sur le bord situé au début - le texte est aligné de façon à suivre le sens de l’écriture. Cela revient à spécifier la gauche pour un texte écrit de gauche à droite, ou à spécifier la droite pour un texte écrit de droite à gauche.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
	 La classe TextLayoutFormat détient toutes les propriétés de présentation du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 La classe TextLayoutFormat détient toutes les propriétés de présentation du texte. Ces propriétés affectent le format et le style d’un flux de texte au niveau du conteneur, au niveau du paragraphe et au niveau du texte. La classe ContainerController et la classe de base FlowElement ont des propriétés <codeph>format</codeph> qui vous permettent de leur affecter une occurrence TextLayoutFormat. Affectez un objet TextLayoutFormat à un conteneur pour définir le format du contenu de tous les conteneurs. Affectez un objet TextLayoutFormat à l’un des descendants de l’objet FlowElement pour indiquer la mise en forme de cet élément en particulier : TextFlow, ParagraphElement, DivElement, SpanElement, InlineGraphicElement, LinkElement et TCYElement. Outre la propriété <codeph>format</codeph>, ces classes définissent également chaque propriété TextLayoutFormat individuelle, ce qui vous permet de remplacer le paramètre d’une propriété de style en particulier de cet élément, si vous le souhaitez.  <p>Comme vous pouvez définir un style donné à plusieurs niveaux, des conflits sont possibles. Par exemple, la couleur du texte au niveau TextFlow peut être définie sur noir alors qu’un objet SpanElement la définit sur bleu. La règle générale est que le paramètre du plus bas niveau dans l’arborescence du flux de texte est prioritaire. Ainsi, si le niveau de ligature est défini pour une occurrence TextFlow et également pour un objet DivElement, le paramètre DivElement est prioritaire.  </p><p>Les styles en cascade font référence au mécanisme d’adoption des styles à partir d’un niveau supérieur du flux de texte si la valeur d’un style n’est pas définie (undefined) à un niveau inférieur. Lorsqu’un style n’est pas défini sur un élément au point sur lequel il va être rendu, soit il prend sa valeur par défaut, soit la valeur est propagée en cascade ou est issue de la valeur d’un élément parent. Par exemple, si la transparence (propriété <codeph>textAlpha</codeph>) du texte n’est pas définie sur un objet SpanElement, mais est définie sur l’objet TextFlow, la valeur de la propriété <codeph>TextFlow.textAlpha</codeph> est propagée en cascade sur l’objet SpanElement et est appliquée au texte de cette plage. Le résultat de la propagation en cascade, ou la somme des styles appliqués à l’élément, est stocké dans la propriété <codeph>computedFormat</codeph> de l’élément. </p><p>De la même façon, vous pouvez appliquer des styles d’utilisateur à l’aide de la propriété <codeph>userStyles</codeph> des classes ContainerController et FlowElement. Cette propriété vous permet de lire ou d’écrire un dictionnaire de styles d’utilisateur et d’appliquer ses paramètres à un conteneur ou à un élément de flux de texte. Le dictionnaire des styles d’utilisateur est un objet composé des paires <i>nom-valeur du style</i>. Les styles spécifiés par la propriété <codeph>userStyles</codeph> ont priorité sur tous les autres.</p><p>La plupart des styles qui ne sont pas définis héritent de la valeur de leur parent immédiat lors de la propagation en cascade. Un petit nombre de styles, cependant, n’héritent pas de la valeur de leur parent, mais prennent une valeur par défaut. </p><p><b>Les propriétés de style qui adoptent leurs valeurs par défaut, si undefined, incluent :</b> <codeph>backgroundAlpha</codeph>, <codeph>backgroundColor</codeph>, <codeph>columnCount</codeph>, <codeph>columnGap</codeph>, <codeph>columnWidth</codeph>, <codeph>lineBreak</codeph>, <codeph>paddingBottom</codeph>, <codeph>paddingLeft</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingTop</codeph>, <codeph>verticalAlign</codeph></p>.
	 </apiDesc><example conref="examples\TextLayoutFormatExample.as"/><example conref="examples\TextLayoutFormatExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/format"><linktext>flashx.textLayout.elements.FlowElement.format</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>flashx.textLayout.factory.TextFlowTextLineFactory</linktext></link></related-links><apiConstructor id="flashx.textLayout.formats:TextLayoutFormat:TextLayoutFormat"><apiName>TextLayoutFormat</apiName><shortdesc>
		 Crée un nouvel objet TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initialValues</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Occurrence facultative à partir de laquelle copier les valeurs initiales. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Crée un nouvel objet TextLayoutFormat. Tous les paramètres sont vides ou peuvent être initialisés à partir de l’objet <codeph>initialValues</codeph> fourni.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/defaultFormat"><linktext>defaultFormat</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:apply"><apiName>apply</apiName><shortdesc>
		 Remplace les valeurs des propriétés de cet objet TextLayoutFormat par les valeurs des propriétés qui sont définies dans l’occurrence incoming ITextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence dont les valeurs des propriétés sont appliquées à cet objet TextLayoutFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remplace les valeurs des propriétés de cet objet TextLayoutFormat par les valeurs des propriétés qui sont définies dans l’occurrence <codeph>incoming </codeph> ITextLayoutFormat. Les propriétés dont les valeurs sont <codeph>undefined</codeph> dans l’occurrence <codeph>incoming</codeph> ITextLayoutFormat ne sont pas modifiées dans cet objet.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_applyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concatInheritOnly"><apiName>concatInheritOnly</apiName><shortdesc>
		 Concatène les valeurs des propriétés de l’occurrence incoming ITextLayoutFormat avec les valeurs de cet objet TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence à partir de laquelle les valeurs sont concaténées. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatène les valeurs des propriétés de l’occurrence <codeph>incoming</codeph> ITextLayoutFormat avec les valeurs de cet objet TextLayoutFormat. Dans cet objet TextLayoutFormat (l’objet récepteur), les propriétés dont les valeurs sont <codeph>FormatValue.INHERIT</codeph> et les propriétés héritières dont les valeurs sont <codeph>undefined</codeph> reçoivent de nouvelles valeurs de la part de l’objet <codeph>incoming</codeph>. Les valeurs de toutes les autres propriétés restent inchangées.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatInheritOnlyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:concat"><apiName>concat</apiName><shortdesc>
		 Concatène les valeurs des propriétés de l’occurrence incoming ITextLayoutFormat avec les valeurs de cet objet TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence à partir de laquelle les valeurs sont concaténées. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Concatène les valeurs des propriétés de l’occurrence <codeph>incoming</codeph> ITextLayoutFormat avec les valeurs de cet objet TextLayoutFormat. Dans cet objet TextLayoutFormat (l’objet récepteur), les propriétés dont les valeurs sont <codeph>FormatValue.INHERIT</codeph> et les propriétés héritières dont les valeurs sont <codeph>undefined</codeph> reçoivent de nouvelles valeurs de la part de l’objet <codeph>incoming</codeph>. Les propriétés non héritières dont les valeurs sont <codeph>undefined</codeph> reçoivent leurs valeurs par défaut. Les valeurs de toutes les autres propriétés restent inchangées.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_concatExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>flashx.textLayout.formats.FormatValue.INHERIT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:copy"><apiName>copy</apiName><shortdesc>
		 Copie les paramètres de TextLayoutFormat à partir des valeurs de l’occurrence ITextLayoutFormat dans cet objet TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence facultative à partir de laquelle copier les valeurs.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Copie les paramètres TextLayoutFormat à partir de l’occurrence <codeph>values</codeph> ITextLayoutFormat dans cet objet TextLayoutFormat. Si les <codeph>valeurs</codeph> sont<codeph>null</codeph>, cet objet TexteLayoutFormat est initialisé avec des valeurs non définies pour toutes les propriétés.
		 </apiDesc><example conref="examples\TextLayoutFormat_copyExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:isEqual"><apiName>isEqual</apiName><shortdesc>
		 Compare les propriétés de l’occurrence p1 ITextLayoutFormat avec celles de l’occurrence occurrence p2 ITextLayoutFormat et renvoie la valeur true si toutes les propriétés correspondent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>La valeur est true si toutes les propriétés correspondent. Sinon, la valeur est false. 
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>p1</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence à comparer avec <codeph>p2</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>p2</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence à comparer avec <codeph>p1</codeph>.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Compare les propriétés de l’occurrence ITextLayoutFormat <codeph>p1</codeph> avec celles de l’occurrence ITextLayoutFormat <codeph>p2</codeph> et renvoie la valeur <codeph>true</codeph> si toutes les propriétés correspondent.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeClashing"><apiName>removeClashing</apiName><shortdesc>
		 Définit les propriétés de cet objet TextLayoutFormat sur undefined si elles ne correspondent pas à celles de l’occurrence ITextLayoutFormat incoming.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence avec laquelle comparer les valeurs des propriétés de cet objet TextLayoutFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Définit les propriétés de cet objet TextLayoutFormat sur <codeph>undefined</codeph> si elles ne correspondent pas à celles de l’occurrence ITextLayoutFormat <codeph>incoming</codeph>.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeClashingExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.formats:TextLayoutFormat:removeMatching"><apiName>removeMatching</apiName><shortdesc>
		 Définit les propriétés de cet objet TextLayoutFormat sur undefined si elles correspondent à celles de l’occurrence ITextLayoutFormat incoming.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>incoming</apiItemName><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier><apiDesc>Occurrence avec laquelle comparer les valeurs des propriétés de cet objet TextLayoutFormat.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Définit les propriétés de cet objet TextLayoutFormat sur <codeph>undefined</codeph> si elles correspondent à celles de l’occurrence ITextLayoutFormat <codeph>incoming</codeph>.
		 
		 </apiDesc><example conref="examples\TextLayoutFormat_removeMatchingExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.formats:TextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. Par exemple, si vous définissez <codeph>dominantBaseline</codeph> sur ASCENT, la définition de <codeph>alignmentBaseline</codeph> sur DESCENT aligne le haut du texte sur la ligne de base DESCENT ou en dessous. Le plus grand élément de la ligne détermine en général les lignes de base. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur USE_DOMINANT_BASELINE. </p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la propagation en cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la propagation en cascade). La valeur 0 est entièrement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où alpha est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade). Il peut s’agir de la valeur de la constante <codeph>BackgroundColor.TRANSPARENT</codeph> ou d’une valeur hexadécimale qui spécifie les trois valeurs RVB à 8 bits (rouge, vert, bleu), par exemple, 0xFF0000 est rouge et 0x00FF00 est vert.
		 <p>Les valeurs valides comme chaîne sont flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT et uints de 0x0 à 0xffffffff.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Valeur de décalage de la ligne de base par rapport à la valeur dominantBaseline. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Valeur de décalage de la ligne de base par rapport à la valeur <codeph>dominantBaseline</codeph>. Les unités sont en pixels, ou un pourcentage de <codeph>fontSize</codeph> (dans ce cas, entrez une valeur de chaîne, comme 140 %). Les valeurs positives décalent la ligne vers le haut pour le texte horizontal (à droite pour le texte vertical) et les valeurs négatives décalent la ligne vers le bas pour le texte horizontal (à gauche pour le texte vertical).  
		 <p>Les valeurs valides sont flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000. </p>
		 <p>Les valeurs en pourcentage sont comprises entre -1000 et 1000. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 0.0. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Spécifie la progression verticale ou horizontale du positionnement de la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la progression verticale ou horizontale du positionnement de la ligne. Les lignes sont placées de haut en bas (<codeph>BlockProgression.TB</codeph>, pour le texte horizontal) ou de droite à gauche (<codeph>BlockProgression.RL</codeph>, pour le texte vertical). 
		 <p>Les valeurs légales sont flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de TB. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Contrôle l’autorisation des sauts de ligne lignes lors de la séparation de l’habillage du texte en plusieurs lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Contrôle l’autorisation des sauts de ligne lignes lors de la séparation de l’habillage du texte en plusieurs lignes. Défini sur <codeph>BreakOpportunity.AUTO</codeph> pour diviser le texte normalement. Défini sur <codeph>BreakOpportunity.NONE</codeph> pour <i>ne pas</i> diviser le texte à moins que le texte ne dépasse la mesure et qu’il n’existe pas d’autres endroits auquel diviser la ligne. Défini sur <codeph>BreakOpportunity.tout</codeph> pour permettre le saut de ligne à n’importe quel endroit, plutôt qu’entre les mots. Défini sur <codeph>BreakOpportunity.ALL</codeph> pour placer chaque groupe typographique sur une ligne distincte (utile pour le texte d’un chemin). 
		 <p>Les valeurs valides sont flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 Type de repère CFF utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de repère CFF utilisé pour ce texte. Les repères CFF déterminent si l’exécution de Flash force les souches horizontales fortes à intégrer une grille de sous-pixels ou non. Cette propriété s’applique uniquement si la propriété <codeph>renderingMode</codeph> est définie sur <codeph>RenderingMode.CFF</codeph> et que la police est intégrée (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>). Sur des écrans de petite taille, les repères produisent un texte clair et lisible pour les lecteurs humains.
		 <p>Les valeurs valides sont flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur HORIZONTAL_STEM. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Couleur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Couleur du texte. Nombre hexadécimal qui spécifie les trois valeurs RVB à 8 bits (rouge, vert, bleu) ; par exemple, 0xFF0000 est rouge et 0x00FF00 est vert. 
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). Le numéro de la colonne prévaut sur les autres paramètres de colonne. La valeur est un nombre entier ou <codeph>FormatValue.AUTO</codeph> si elle n’est pas spécifiée. Si le compte <codeph>columnCount</codeph> n’est pas spécifié, la largeur <codeph>columnWidth</codeph> est utilisée pour créer autant de colonnes que le conteneur peut en contenir. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et ints de 1 à 50.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Spécifie la valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). La valeur est un nombre 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Si vous spécifiez la largeur des colonnes, mais pas le nombre, l’objet TextLayout va créer autant de colonnes de cette largeur que possible, à partir des paramètres <codeph>columnGap</codeph> et de la largeur du conteneur. Tout espace restant est laissé après la dernière colonne. La valeur est un nombre. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et des nombres de 0 à 8000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:defaultFormat:get"><apiName>defaultFormat</apiName><shortdesc>
		 Renvoie un objet TextLayoutFormat avec des paramètres par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc>
		 Renvoie un objet TextLayoutFormat avec des paramètres par défaut. Cette fonction renvoie toujours le même objet. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 Type de casse de chiffres utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de casse de chiffres utilisée pour ce texte. La définition de la valeur sur <codeph>DigitCase.OLD_STYLE</codeph> lettres minuscules se rapproche fonctionnalité et avec des jambages. Les chiffres sont espacés proportionnellement. Ce style n’est disponible que dans les caractères sélectionnés, le plus souvent dans une police supplémentaire ou spéciale. Le paramètre <codeph>DigitCase.LINING</codeph> a une hauteur en majuscules et est généralement à espacement fixe pour s’aligner dans les graphiques. <p><adobeimage alt="digitCase " href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Type de largeur de chiffres utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de largeur de chiffres utilisée pour ce texte. La valeur peut être <codeph>DigitWidth.PROPORTIONAL</codeph>, ce qui est la meilleure approche pour les nombres individuels, ou <codeph>DigitWidth.TABULAR</codeph>, qui est recommandé pour les nombres inclus dans les tableaux, diagrammes et lignes verticales. <p><adobeimage alt="digitWidth " href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte. Sens de lecture de gauche à droite, comme dans les scripts de style latin, ou de droite à gauche, comme en arabe ou en hébreu. Cette propriété affecte également le sens de la colonne lorsqu’elle est appliquée au niveau du conteneur. Les colonnes peuvent se lire de gauche à droite ou de droite à gauche, exactement comme du texte. Voici quelques exemples :<p><adobeimage alt="sens" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur LTR. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Spécifie la ligne de base de l’élément qui s’aligne sur alignmentBaseline pour déterminer la position verticale de l’élément sur la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. La valeur <codeph>TextBaseline.AUTO</codeph> sélectionne la ligne de base dominante en fonction de la propriété <codeph>locale</codeph> du paragraphe parent. Pour le chinois et le japonais, la valeur de ligne de base sélectionnée est <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph> ; pour tous les autres, il s’agit de <codeph>TextBaseline.ROMAN</codeph>. Ces choix de base sont déterminés par le choix de police et la taille de police. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Spécifie la position de la ligne de base de la première ligne du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la position de la ligne de base de la première ligne du conteneur. La ligne de base à laquelle cette propriété fait référence dépend de la langue définie au niveau du conteneur. Pour le chinois et le japonais, la valeur est <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph> et pour toutes les autres langues, la valeur est <codeph>TextBaseline.ROMAN</codeph> La valeur du décalage entre l’encart supérieur (ou l’encart droit si la valeur de <codeph>blockProgression</codeph> est RL) du conteneur et la ligne de base de la première ligne peut être <codeph>BaselineOffset.ASCENT</codeph>, c’est-à-dire égale à la hauteur de la ligne,<codeph>BaselineOffset.LINE_HEIGHT</codeph>, c’est-à-dire égale à la hauteur de cette première ligne, ou n’importe quel nombre de valeur fixe pour indiquer une distance absolue. <codeph>BaselineOffset.AUTO</codeph> aligne la hauteur de la ligne sur l’encart supérieur du conteneur.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT, et les nombres de 1 à 1000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. Pour le rendu de l’élément, le moteur d’exécution Flash sélectionne la première police disponible dans la liste. Par exemple Arial, Helvetica, _sans oblige le lecteur à rechercher Arial, puis Helvetica si Arial est introuvable, puis _sans lorsque ces deux polices sont introuvables.
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura pour valeur Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Recherche de police à utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Recherche de police à utiliser. Si vous spécifiez <codeph>FontLookup.DEVICE</codeph>, les polices installées sur le système qui utilise le fichier SWF sont utilisées. Les polices de périphérique donnent la taille des fichiers d’animation, mais le texte n’est pas toujours restitué de la même façon selon les systèmes et plates-formes. Si vous spécifiez <codeph>FontLookup.EMBEDDED_CFF</codeph>, des polices vectorielles incorporées dans le fichier SWF publié sont utilisées. Les polices intégrées augmentent la taille du fichier SWF (parfois nettement), mais le texte est systématiquement affiché dans la police choisie. 
		 <p>Les valeurs valides sont flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEVICE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 La taille du texte en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 La taille du texte en pixels. 
		 <p>Les valeurs valides sont des nombres compris entre 1 et 720 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 12. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Style de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style de texte. Peut être <codeph>FontPosture.NORMAL</codeph>, à utiliser en texte brut, ou <codeph>FontPosture.ITALIC</codeph> pour l’italique. Cette propriété s’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Epaisseur du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Epaisseur du texte. Peut être <codeph>FontWeight.NORMAL</codeph> pour une utilisation en texte brut ou <codeph>FontWeight.BOLD</codeph>. S’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Règle utilisée pour justifier le texte dans un paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Règle utilisée pour justifier le texte dans un paragraphe. La valeur par défaut est <codeph>FormatValue.AUTO</codeph>, qui justifie le texte en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour toutes les langues, sauf le japonais et le chinois, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustificationRule.SPACE</codeph>, qui ajoute un espace supplémentaire aux caractères d’espace. Pour le chinois et le japonais, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustficationRule.EAST_ASIAN</codeph>. La justification change partiellement l’espacement de la ponctuation. Dans un texte en caractères romains, la virgule et les points japonais prennent une largeur de caractère complète, mais seulement la moitié de cette largeur dans un texte en caractères asiatiques. Par ailleurs, dans le texte en caractères asiatiques, l’espacement entre les signes de ponctuation séquentielle se rapproche, obéissant ainsi aux conventions typographiques asiatiques traditionnelles. Notez également, dans l’exemple ci-après, l’interligne qui est appliqué à la deuxième ligne des paragraphes. Dans la version asiatique, les deux dernières lignes sont décalées à gauche. Dans la version en caractères romains, la deuxième ligne et les lignes suivantes sont décalées à gauche. <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 Style utilisé pour la justification du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style utilisé pour la justification du paragraphe. A utiliser uniquement en combinaison avec un paramètre <codeph>justificationRule</codeph> de la règle <codeph>JustificationRule.EAST_ASIAN</codeph>. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue sur <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> pour toutes les langues. Les constantes définies par la classe JustificationStyle spécifient les options de gestion des caractères kinsoku, c’est-à-dire des caractères japonais qui ne peuvent pas s’afficher au début ou à la fin d’une ligne. Pour obtenir un texte plus étiré, spécifiez <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Si vous souhaitez un comportement similaire à celui obtenu avec le paramètre <codeph>justificationRule</codeph> de la règle <codeph>JustificationRule.SPACE</codeph>, utilisez <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Les valeurs valides sont flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. Le crénage est pris en charge pour toutes les polices qui disposent de tables de crénage.
		 <p>Les valeurs valides sont flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. La base d’interlignage est la ligne de base à laquelle se rapporte la propriété <codeph>lineHeight</codeph>. Le sens de l’interlignage détermine si la propriété <codeph>lineHeight</codeph> fait référence à la distance de la ligne de base d’une ligne par rapport à celle de la ligne précédente ou suivante. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour le chinois et le japonais, il s’agit de <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> et pour tous les autres, il s’agit de <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Définit laquelle des ligatures définies dans la police à utiliser dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Définit laquelle des ligatures définies dans la police à utiliser dans le texte. Les ligatures qui apparaissent pour chacun de ces paramètres dépendent de la police. Une ligature se produit lorsque plusieurs formes de lettres sont unies dans un seul glyphe. Les ligatures remplacent généralement des caractères consécutifs partageant des composants communs, par exemple les paires de lettres « fi », « fl » ou « ae ». Elles sont utilisées avec les jeux de caractères latins et non latins. Les ligatures activées par les valeurs de la classe LigatureLevel, <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, et <codeph>EXOTIC</codeph>, sont cumulables. Chaque valeur active un nouvel ensemble de ligatures, mais comprend également ceux des types précédents. <p><b>Remarque :</b> lorsque vous utilisez les polices Arabic ou Syriac, <codeph>ligatureLevel</codeph> doit être défini sur MINIMUM ou une valeur supérieure.</p><p><adobeimage alt="ligatureLevel " href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Les valeurs valides sont flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COMMON. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Contrôle le retour à la ligne dans le conteneur (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Contrôle le retour à la ligne dans le conteneur (adopte la valeur par défaut si undefined pendant la propagation en cascade). Le texte du conteneur peut être défini pour s’adapter à la largeur du conteneur (<codeph>LineBreak.TO_FIT</codeph>) ou pour aller à la ligne uniquement lors de caractères de retour chariot ou de saut de ligne (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Les valeurs valides sont flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Contrôles d’interligne du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Contrôles d’interligne du texte. La distance entre la ligne de base de la ligne précédente ou suivante (en fonction de <codeph>LeadingModel</codeph>) et la ligne de base de la ligne actuelle est égale à la quantité maximale de l’interlignage appliquée à n’importe quel caractère de la ligne. Il s’agit d’un nombre ou d’un pourcentage. Si vous spécifiez un pourcentage, entrez une valeur de chaîne, telle que 140 %. <p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Les valeurs numériques valides sont comprises entre -720 et 720.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 120 %. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Si la valeur est <codeph>true</codeph>, applique le style de formatage barré, une ligne au milieu du texte. 
		 <p>Les valeurs valides sont définies sur true, false et flashx.textLayout.formats.FormatValue.INHERIT. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur false. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 Variable locale du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Variable locale du texte. Contrôle les transformations de casse et de forme. Les identifiants de langue standard tels que décrits dans la norme technique Unicode #35 sont utilisés. Par exemple en, en_US et en-US correspondent à l’anglais, ja au japonais. 
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur en. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord inférieur du conteneur et le texte. La valeur est un nombre.  <p> Avec le texte horizontal, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace au bas du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge. </p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord gauche du conteneur et le texte. La valeur est un nombre. <p> Avec le texte vertical, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace à la fin du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge.</p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord droit du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord supérieur du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. Fait référence au bord droit dans un texte rédigé de gauche à droite et au bord gauche dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser après le paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser après le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceBefore</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser avant le paragraphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser avant le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceAfter</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. Fait référence au bord gauche dans un texte rédigé de gauche à droite et au bord droit dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 Mode de rendu utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Mode de rendu utilisé pour ce texte. S’applique uniquement aux polices incorporées (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Les valeurs valides sont flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur CFF. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Spécifie les taquets de tabulation associés au paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie les taquets de tabulation associés au paragraphe. Les accesseurs Set peuvent contenir un tableau de flashx.textLayout.formats.TabStopFormat, une représentation sous forme de chaîne condensée, une valeur undefined ou <codeph>FormatValue.INHERIT</codeph>. La représentation sous forme de chaîne condensée est toujours convertie en tableau d’objets flashx.textLayout.formats.TabStopFormat. <p>Le format basé sur une chaîne est une liste de taquets de tabulation, où chaque taquet de tabulation est délimité par un ou plusieurs espaces. </p><p>Un taquet de tabulation prend la forme suivante : &lt;type d’alignement>&lt;position d’alignement>|&lt;symbole d’alignement>.</p><p>Le type d’alignement est un caractère unique. Il peut s’agir des caractères S, E, C ou D (ou des équivalents minuscules). S ou s correspond à start, E ou e à end, C ou c à center, D ou d à decimal. Le type d’alignement est facultatif. S’il n’est pas spécifié, sa valeur est par défaut S. </p><p>La position d’alignement est un nombre qui est spécifié conformément aux spécifications FXG des nombres (notation décimale ou scientifique). La position d’alignement est obligatoire. </p><p>La barre verticale permet de séparer la position d’alignement du symbole d’alignement, et elle ne doit être présente que si le symbole d’alignement est présent. </p><p> Le symbole d’alignement est facultatif si l’alignement est de type D et ne doit pas être présent si le type d’alignement est autre que D. Le symbole d’alignement peut se composer de n’importe quelle séquence de caractères se terminant par l’espace qui met fin au taquet de tabulation (pour le dernier taquet de tabulation, l’espace de fin est facultatif ; la fin du symbole d’alignement étant implicite). Un espace peut faire partie du symbole d’alignement s’il s’accompagne d’une barre oblique inverse (\). Une barre oblique inverse peut faire partie du symbole d’alignement si elle est convertie avec une autre barre oblique inverse (\\). Si l’alignement est de type D et que le symbole d’alignement n’est pas spécifié, il prendra la valeur null par défaut. </p><p>Si aucun taquet de tabulation n’est spécifié, l’action par défaut de la tabulation est la fin de la ligne. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur null. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Alignement de la dernière (ou de l’unique) ligne du paragraphe par rapport au conteneur dans un texte justifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement de la dernière (ou de l’unique) ligne du paragraphe par rapport au conteneur dans un texte justifié. Si la propriété <codeph>textAlign</codeph> est définie sur <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> indique la façon dont la dernière ligne (ou la ligne unique s’il s’agit d’un seul bloc de lignes) est alignée. Les valeurs sont similaires à <codeph>textAlign</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Alignement des lignes du paragraphe par rapport au conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement des lignes du paragraphe par rapport au conteneur. <codeph>TextAlign.LEFT</codeph> aligne les lignes le long du bord gauche du conteneur. <codeph>TextAlign.RIGHT</codeph> les aligne sur le bord droit. <codeph>TextAlign.CENTER</codeph> positionne la ligne à distance égale entre les bords gauche et droit. <codeph>TextAlign.JUSTIFY</codeph> répartit les lignes afin qu’elles remplissent l’espace. <codeph>TextAlign.START</codeph> équivaut à définir gauche dans du texte de gauche à droite ou droite dans du texte de droite à gauche. <codeph>TextAlign.END</codeph> revient à spécifier la droite pour un texte écrit de gauche à droite, ou à spécifier la gauche pour un texte écrit de droite à gauche.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Valeur alpha (transparence) du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Valeur alpha (transparence) du texte. La valeur 0 est entièrement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où <codeph>textAlpha</codeph> est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 1. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Décoration du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Décoration du texte. Permet d’appliquer un soulignement. Par défaut, aucun soulignement n’est appliqué. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NONE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 Nombre qui indique la valeur de retrait de la première ligne du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique la valeur de retrait de la première ligne du paragraphe. Une valeur de retrait négative pousse la ligne dans la marge, et probablement en dehors du conteneur. 
		 <p>Les valeurs valides sont des nombres compris entre -1000 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Spécifie des options de justification de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie des options de justification de texte. La valeur par défaut est <codeph>TextJustify.INTER_WORD</codeph>, ce qui signifie qu’un espace supplémentaire est ajouté aux espaces. <codeph>TextJustify.DISTRIBUTE</codeph> ajoute un espace supplémentaire aux espaces et entre chaque lettre. A utiliser uniquement en combinaison avec une valeur <codeph>justificationRule</codeph> de <codeph>JustificationRule.SPACE</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur INTER_WORD. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Détermine le nombre de degrés de rotation de ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Détermine le nombre de degrés de rotation de ce texte. 
		 <p>Les valeurs valides dont flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à gauche de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à gauche de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingLeft</codeph> est ajoutée aux valeurs de la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingLeft</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à droite de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à droite de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingRight</codeph> est ajoutée aux valeurs de la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingRight</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 Type de casse typographique utilisée pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de casse typographique utilisée pour ce texte. Voici quelques exemples :<p><adobeimage alt="typographicCase " href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). Indique la façon dont les éléments TextFlow s’alignent dans le conteneur.
		 <p>Les valeurs valides sont flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:TextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> conserve tous les espaces. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> supprime les nouvelles lignes, les tabulations et l’interlignage ou les espaces dans un bloc de texte importé. Les caractères de balise de saut de ligne () et de séparateur de ligne Unicode sont conservés. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COLLAPSE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BackgroundColor"><apiName>BackgroundColor</apiName><shortdesc>
	  Définit une constante spécifiant que la valeur de la propriété backgroundColor de la classe TextLayoutFormat est « transparent ». </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit une constante spécifiant que la valeur de la propriété <codeph>backgroundColor</codeph> de la classe <codeph>TextLayoutFormat</codeph> est « transparent ». 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/backgroundColor"><linktext>TextLayoutFormat.backgroundColor</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BackgroundColor:TRANSPARENT"><apiName>TRANSPARENT</apiName><shortdesc> Transparent - aucune couleur d’arrière-plan n’est appliquée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>transparent</apiData><apiType value="String"/></apiValueDef><apiDesc> Transparent - aucune couleur d’arrière-plan n’est appliquée. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LineBreak"><apiName>LineBreak</apiName><shortdesc> Définit les valeurs permettant de définir la propriété lineBreak de la classe TextLayoutFormat afin de spécifier les sauts de ligne dans l’habillage du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Définit les valeurs permettant de définir la propriété <codeph>lineBreak </codeph> de la classe <codeph>TextLayoutFormat </codeph> afin de spécifier les sauts de ligne dans l’habillage du texte. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/linebreak"><linktext>TextLayoutFormat.linebreak</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LineBreak:EXPLICIT"><apiName>EXPLICIT</apiName><shortdesc> Spécifie que les lignes doivent être coupées uniquement à un retour chariot ou à des caractères de saut de ligne explicites. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>explicit</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que les lignes doivent être coupées uniquement à un retour chariot ou à des caractères de saut de ligne explicites.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LineBreak:TO_FIT"><apiName>TO_FIT</apiName><shortdesc> Spécifie que les lignes sont automatiquement envoyées à la ligne pour s’adapter à la largeur du conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toFit</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que les lignes sont automatiquement envoyées à la ligne pour s’adapter à la largeur du conteneur. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BlockProgression"><apiName>BlockProgression</apiName><shortdesc>
	  Définit les valeurs de la propriété blockProgression de la classe TextLayouFormat. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de la propriété <codeph>blockProgression</codeph> de la classe <codeph>TextLayouFormat</codeph>. L’objet BlockProgression indique la direction dans laquelle les lignes sont placées dans le conteneur.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/blockProgression"><linktext>TextLayoutFormat.blockProgression</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BlockProgression:RL"><apiName>RL</apiName><shortdesc> 
		  Spécifie une progression du bloc de droite à gauche. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rl</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Spécifie une progression du bloc de droite à gauche. Les lignes sont présentées verticalement en commençant par le bord droit du conteneur, puis en se dirigeant vers la gauche. Utilisé pour le texte vertical, par exemple, pour le texte chinois ou japonais vertical.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BlockProgression:TB"><apiName>TB</apiName><shortdesc> 
		  Spécifie une progression du bloc de haut en bas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tb</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		  Spécifie une progression du bloc de haut en bas. Les lignes sont présentées horizontalement en commençant par le haut du conteneur, puis en se dirigeant vers le bas. Utilisé pour le texte horizontal.  
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:ITextLayoutFormat"><apiName>ITextLayoutFormat</apiName><shortdesc>
	 Cette interface fournit un accès en lecture aux propriétés associées aux objets FlowElements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 Cette interface fournit un accès en lecture aux propriétés associées aux objets FlowElements.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. Par exemple, si vous définissez <codeph>dominantBaseline</codeph> sur ASCENT, la définition de <codeph>alignmentBaseline</codeph> sur DESCENT aligne le haut du texte sur la ligne de base DESCENT ou en dessous. Le plus grand élément de la ligne détermine en général les lignes de base. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur USE_DOMINANT_BASELINE. </p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 Valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la propagation en cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la propagation en cascade). La valeur 0 est entièrement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où alpha est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 Couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade). Il peut s’agir de la valeur de la constante <codeph>BackgroundColor.TRANSPARENT</codeph> ou d’une valeur hexadécimale qui spécifie les trois valeurs RVB à 8 bits (rouge, vert, bleu), par exemple, 0xFF0000 est rouge et 0x00FF00 est vert.
		 <p>Les valeurs valides comme chaîne sont flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT et uints de 0x0 à 0xffffffff.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 Valeur de décalage de la ligne de base par rapport à la valeur dominantBaseline. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Valeur de décalage de la ligne de base par rapport à la valeur <codeph>dominantBaseline</codeph>. Les unités sont en pixels, ou un pourcentage de <codeph>fontSize</codeph> (dans ce cas, entrez une valeur de chaîne, comme 140 %). Les valeurs positives décalent la ligne vers le haut pour le texte horizontal (à droite pour le texte vertical) et les valeurs négatives décalent la ligne vers le bas pour le texte horizontal (à gauche pour le texte vertical).  
		 <p>Les valeurs valides sont flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000. </p>
		 <p>Les valeurs en pourcentage sont comprises entre -1000 et 1000. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 0.0. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 Spécifie la progression verticale ou horizontale du positionnement de la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la progression verticale ou horizontale du positionnement de la ligne. Les lignes sont placées de haut en bas (<codeph>BlockProgression.TB</codeph>, pour le texte horizontal) ou de droite à gauche (<codeph>BlockProgression.RL</codeph>, pour le texte vertical). 
		 <p>Les valeurs légales sont flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de TB. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 Contrôle l’autorisation des sauts de ligne lignes lors de la séparation de l’habillage du texte en plusieurs lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Contrôle l’autorisation des sauts de ligne lignes lors de la séparation de l’habillage du texte en plusieurs lignes. Défini sur <codeph>BreakOpportunity.AUTO</codeph> pour diviser le texte normalement. Défini sur <codeph>BreakOpportunity.NONE</codeph> pour <i>ne pas</i> diviser le texte à moins que le texte ne dépasse la mesure et qu’il n’existe pas d’autres endroits auquel diviser la ligne. Défini sur <codeph>BreakOpportunity.tout</codeph> pour permettre le saut de ligne à n’importe quel endroit, plutôt qu’entre les mots. Défini sur <codeph>BreakOpportunity.ALL</codeph> pour placer chaque groupe typographique sur une ligne distincte (utile pour le texte d’un chemin). 
		 <p>Les valeurs valides sont flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 Type de repère CFF utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de repère CFF utilisé pour ce texte. Les repères CFF déterminent si l’exécution de Flash force les souches horizontales fortes à intégrer une grille de sous-pixels ou non. Cette propriété s’applique uniquement si la propriété <codeph>renderingMode</codeph> est définie sur <codeph>RenderingMode.CFF</codeph> et que la police est intégrée (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>). Sur des écrans de petite taille, les repères produisent un texte clair et lisible pour les lecteurs humains.
		 <p>Les valeurs valides sont flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur HORIZONTAL_STEM. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:color:get"><apiName>color</apiName><shortdesc>
		 Couleur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Couleur du texte. Nombre hexadécimal qui spécifie les trois valeurs RVB à 8 bits (rouge, vert, bleu) ; par exemple, 0xFF0000 est rouge et 0x00FF00 est vert. 
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 Nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). Le numéro de la colonne prévaut sur les autres paramètres de colonne. La valeur est un nombre entier ou <codeph>FormatValue.AUTO</codeph> si elle n’est pas spécifiée. Si le compte <codeph>columnCount</codeph> n’est pas spécifié, la largeur <codeph>columnWidth</codeph> est utilisée pour créer autant de colonnes que le conteneur peut en contenir. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et ints de 1 à 50.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 Spécifie la valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). La valeur est un nombre 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 Largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Si vous spécifiez la largeur des colonnes, mais pas le nombre, l’objet TextLayout va créer autant de colonnes de cette largeur que possible, à partir des paramètres <codeph>columnGap</codeph> et de la largeur du conteneur. Tout espace restant est laissé après la dernière colonne. La valeur est un nombre. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et des nombres de 0 à 8000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 Type de casse de chiffres utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de casse de chiffres utilisée pour ce texte. La définition de la valeur sur <codeph>DigitCase.OLD_STYLE</codeph> lettres minuscules se rapproche fonctionnalité et avec des jambages. Les chiffres sont espacés proportionnellement. Ce style n’est disponible que dans les caractères sélectionnés, le plus souvent dans une police supplémentaire ou spéciale. Le paramètre <codeph>DigitCase.LINING</codeph> a une hauteur en majuscules et est généralement à espacement fixe pour s’aligner dans les graphiques. <p><adobeimage alt="digitCase " href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 Type de largeur de chiffres utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de largeur de chiffres utilisée pour ce texte. La valeur peut être <codeph>DigitWidth.PROPORTIONAL</codeph>, ce qui est la meilleure approche pour les nombres individuels, ou <codeph>DigitWidth.TABULAR</codeph>, qui est recommandé pour les nombres inclus dans les tableaux, diagrammes et lignes verticales. <p><adobeimage alt="digitWidth " href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:direction:get"><apiName>direction</apiName><shortdesc>
		 Spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte. Sens de lecture de gauche à droite, comme dans les scripts de style latin, ou de droite à gauche, comme en arabe ou en hébreu. Cette propriété affecte également le sens de la colonne lorsqu’elle est appliquée au niveau du conteneur. Les colonnes peuvent se lire de gauche à droite ou de droite à gauche, exactement comme du texte. Voici quelques exemples :<p><adobeimage alt="sens" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur LTR. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 Spécifie la ligne de base de l’élément qui s’aligne sur alignmentBaseline pour déterminer la position verticale de l’élément sur la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la ligne de base de l’élément s’alignant sur <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. La valeur <codeph>TextBaseline.AUTO</codeph> sélectionne la ligne de base dominante en fonction de la propriété <codeph>locale</codeph> du paragraphe parent. Pour le chinois et le japonais, la valeur de ligne de base sélectionnée est <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph> ; pour tous les autres, il s’agit de <codeph>TextBaseline.ROMAN</codeph>. Ces choix de base sont déterminés par le choix de police et la taille de police. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 Spécifie la position de la ligne de base de la première ligne du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie la position de la ligne de base de la première ligne du conteneur. La ligne de base à laquelle cette propriété fait référence dépend de la langue définie au niveau du conteneur. Pour le chinois et le japonais, la valeur est <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph> et pour toutes les autres langues, la valeur est <codeph>TextBaseline.ROMAN</codeph> La valeur du décalage entre l’encart supérieur (ou l’encart droit si la valeur de <codeph>blockProgression</codeph> est RL) du conteneur et la ligne de base de la première ligne peut être <codeph>BaselineOffset.ASCENT</codeph>, c’est-à-dire égale à la hauteur de la ligne,<codeph>BaselineOffset.LINE_HEIGHT</codeph>, c’est-à-dire égale à la hauteur de cette première ligne, ou n’importe quel nombre de valeur fixe pour indiquer une distance absolue. <codeph>BaselineOffset.AUTO</codeph> aligne la hauteur de la ligne sur l’encart supérieur du conteneur.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT, et les nombres de 1 à 1000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		  Nom de la police à utiliser, ou liste de noms de police séparés par une virgule. Pour le rendu de l’élément, le moteur d’exécution Flash sélectionne la première police disponible dans la liste. Par exemple Arial, Helvetica, _sans oblige le lecteur à rechercher Arial, puis Helvetica si Arial est introuvable, puis _sans lorsque ces deux polices sont introuvables.
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura pour valeur Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 Recherche de police à utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Recherche de police à utiliser. Si vous spécifiez <codeph>FontLookup.DEVICE</codeph>, les polices installées sur le système qui utilise le fichier SWF sont utilisées. Les polices de périphérique donnent la taille des fichiers d’animation, mais le texte n’est pas toujours restitué de la même façon selon les systèmes et plates-formes. Si vous spécifiez <codeph>FontLookup.EMBEDDED_CFF</codeph>, des polices vectorielles incorporées dans le fichier SWF publié sont utilisées. Les polices intégrées augmentent la taille du fichier SWF (parfois nettement), mais le texte est systématiquement affiché dans la police choisie. 
		 <p>Les valeurs valides sont flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEVICE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 La taille du texte en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 La taille du texte en pixels. 
		 <p>Les valeurs valides sont des nombres compris entre 1 et 720 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 12. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 Style de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style de texte. Peut être <codeph>FontPosture.NORMAL</codeph>, à utiliser en texte brut, ou <codeph>FontPosture.ITALIC</codeph> pour l’italique. Cette propriété s’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 Epaisseur du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Epaisseur du texte. Peut être <codeph>FontWeight.NORMAL</codeph> pour une utilisation en texte brut ou <codeph>FontWeight.BOLD</codeph>. S’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 Règle utilisée pour justifier le texte dans un paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Règle utilisée pour justifier le texte dans un paragraphe. La valeur par défaut est <codeph>FormatValue.AUTO</codeph>, qui justifie le texte en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour toutes les langues, sauf le japonais et le chinois, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustificationRule.SPACE</codeph>, qui ajoute un espace supplémentaire aux caractères d’espace. Pour le chinois et le japonais, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustficationRule.EAST_ASIAN</codeph>. La justification change partiellement l’espacement de la ponctuation. Dans un texte en caractères romains, la virgule et les points japonais prennent une largeur de caractère complète, mais seulement la moitié de cette largeur dans un texte en caractères asiatiques. Par ailleurs, dans le texte en caractères asiatiques, l’espacement entre les signes de ponctuation séquentielle se rapproche, obéissant ainsi aux conventions typographiques asiatiques traditionnelles. Notez également, dans l’exemple ci-après, l’interligne qui est appliqué à la deuxième ligne des paragraphes. Dans la version asiatique, les deux dernières lignes sont décalées à gauche. Dans la version en caractères romains, la deuxième ligne et les lignes suivantes sont décalées à gauche. <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 Style utilisé pour la justification du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Style utilisé pour la justification du paragraphe. A utiliser uniquement en combinaison avec un paramètre <codeph>justificationRule</codeph> de la règle <codeph>JustificationRule.EAST_ASIAN</codeph>. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue sur <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> pour toutes les langues. Les constantes définies par la classe JustificationStyle spécifient les options de gestion des caractères kinsoku, c’est-à-dire des caractères japonais qui ne peuvent pas s’afficher au début ou à la fin d’une ligne. Pour obtenir un texte plus étiré, spécifiez <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Si vous souhaitez un comportement similaire à celui obtenu avec le paramètre <codeph>justificationRule</codeph> de la règle <codeph>JustificationRule.SPACE</codeph>, utilisez <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Les valeurs valides sont flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
		 Le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. Le crénage est pris en charge pour toutes les polices qui disposent de tables de crénage.
		 <p>Les valeurs valides sont flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. La base d’interlignage est la ligne de base à laquelle se rapporte la propriété <codeph>lineHeight</codeph>. Le sens de l’interlignage détermine si la propriété <codeph>lineHeight</codeph> fait référence à la distance de la ligne de base d’une ligne par rapport à celle de la ligne précédente ou suivante. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour le chinois et le japonais, il s’agit de <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> et pour tous les autres, il s’agit de <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 Définit laquelle des ligatures définies dans la police à utiliser dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Définit laquelle des ligatures définies dans la police à utiliser dans le texte. Les ligatures qui apparaissent pour chacun de ces paramètres dépendent de la police. Une ligature se produit lorsque plusieurs formes de lettres sont unies dans un seul glyphe. Les ligatures remplacent généralement des caractères consécutifs partageant des composants communs, par exemple les paires de lettres « fi », « fl » ou « ae ». Elles sont utilisées avec les jeux de caractères latins et non latins. Les ligatures activées par les valeurs de la classe LigatureLevel, <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, et <codeph>EXOTIC</codeph>, sont cumulables. Chaque valeur active un nouvel ensemble de ligatures, mais comprend également ceux des types précédents. <p><b>Remarque :</b> lorsque vous utilisez les polices Arabic ou Syriac, <codeph>ligatureLevel</codeph> doit être défini sur MINIMUM ou une valeur supérieure.</p><p><adobeimage alt="ligatureLevel " href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Les valeurs valides sont flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COMMON. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 Contrôle le retour à la ligne dans le conteneur (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Contrôle le retour à la ligne dans le conteneur (adopte la valeur par défaut si undefined pendant la propagation en cascade). Le texte du conteneur peut être défini pour s’adapter à la largeur du conteneur (<codeph>LineBreak.TO_FIT</codeph>) ou pour aller à la ligne uniquement lors de caractères de retour chariot ou de saut de ligne (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Les valeurs valides sont flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 Contrôles d’interligne du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Contrôles d’interligne du texte. La distance entre la ligne de base de la ligne précédente ou suivante (en fonction de <codeph>LeadingModel</codeph>) et la ligne de base de la ligne actuelle est égale à la quantité maximale de l’interlignage appliquée à n’importe quel caractère de la ligne. Il s’agit d’un nombre ou d’un pourcentage. Si vous spécifiez un pourcentage, entrez une valeur de chaîne, telle que 140 %. <p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Les valeurs numériques valides sont comprises entre -720 et 720.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 120 %. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 Si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Si la valeur est <codeph>true</codeph>, applique le style de formatage barré, une ligne au milieu du texte. 
		 <p>Les valeurs valides sont définies sur true, false et flashx.textLayout.formats.FormatValue.INHERIT. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur false. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:locale:get"><apiName>locale</apiName><shortdesc>
		 Variable locale du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Variable locale du texte. Contrôle les transformations de casse et de forme. Les identifiants de langue standard tels que décrits dans la norme technique Unicode #35 sont utilisés. Par exemple en, en_US et en-US correspondent à l’anglais, ja au japonais. 
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur en. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 Encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord inférieur du conteneur et le texte. La valeur est un nombre.  <p> Avec le texte horizontal, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace au bas du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge. </p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 Encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord gauche du conteneur et le texte. La valeur est un nombre. <p> Avec le texte vertical, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace à la fin du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge.</p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 Encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord droit du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 Encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord supérieur du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. Fait référence au bord droit dans un texte rédigé de gauche à droite et au bord gauche dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser après le paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser après le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceBefore</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser avant le paragraphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique la quantité d’espace, en pixels, à laisser avant le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceAfter</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. Fait référence au bord gauche dans un texte rédigé de gauche à droite et au bord droit dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 Mode de rendu utilisé pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Mode de rendu utilisé pour ce texte. S’applique uniquement aux polices incorporées (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Les valeurs valides sont flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur CFF. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 Spécifie les taquets de tabulation associés au paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie les taquets de tabulation associés au paragraphe. Les accesseurs Set peuvent contenir un tableau de flashx.textLayout.formats.TabStopFormat, une représentation sous forme de chaîne condensée, une valeur undefined ou <codeph>FormatValue.INHERIT</codeph>. La représentation sous forme de chaîne condensée est toujours convertie en tableau d’objets flashx.textLayout.formats.TabStopFormat. <p>Le format basé sur une chaîne est une liste de taquets de tabulation, où chaque taquet de tabulation est délimité par un ou plusieurs espaces. </p><p>Un taquet de tabulation prend la forme suivante : &lt;type d’alignement>&lt;position d’alignement>|&lt;symbole d’alignement>.</p><p>Le type d’alignement est un caractère unique. Il peut s’agir des caractères S, E, C ou D (ou des équivalents minuscules). S ou s correspond à start, E ou e à end, C ou c à center, D ou d à decimal. Le type d’alignement est facultatif. S’il n’est pas spécifié, sa valeur est par défaut S. </p><p>La position d’alignement est un nombre qui est spécifié conformément aux spécifications FXG des nombres (notation décimale ou scientifique). La position d’alignement est obligatoire. </p><p>La barre verticale permet de séparer la position d’alignement du symbole d’alignement, et elle ne doit être présente que si le symbole d’alignement est présent. </p><p> Le symbole d’alignement est facultatif si l’alignement est de type D et ne doit pas être présent si le type d’alignement est autre que D. Le symbole d’alignement peut se composer de n’importe quelle séquence de caractères se terminant par l’espace qui met fin au taquet de tabulation (pour le dernier taquet de tabulation, l’espace de fin est facultatif ; la fin du symbole d’alignement étant implicite). Un espace peut faire partie du symbole d’alignement s’il s’accompagne d’une barre oblique inverse (\). Une barre oblique inverse peut faire partie du symbole d’alignement si elle est convertie avec une autre barre oblique inverse (\\). Si l’alignement est de type D et que le symbole d’alignement n’est pas spécifié, il prendra la valeur null par défaut. </p><p>Si aucun taquet de tabulation n’est spécifié, l’action par défaut de la tabulation est la fin de la ligne. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur null. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 Alignement de la dernière (ou de l’unique) ligne du paragraphe par rapport au conteneur dans un texte justifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement de la dernière (ou de l’unique) ligne du paragraphe par rapport au conteneur dans un texte justifié. Si la propriété <codeph>textAlign</codeph> est définie sur <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> indique la façon dont la dernière ligne (ou la ligne unique s’il s’agit d’un seul bloc de lignes) est alignée. Les valeurs sont similaires à <codeph>textAlign</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 Alignement des lignes du paragraphe par rapport au conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement des lignes du paragraphe par rapport au conteneur. <codeph>TextAlign.LEFT</codeph> aligne les lignes le long du bord gauche du conteneur. <codeph>TextAlign.RIGHT</codeph> les aligne sur le bord droit. <codeph>TextAlign.CENTER</codeph> positionne la ligne à distance égale entre les bords gauche et droit. <codeph>TextAlign.JUSTIFY</codeph> répartit les lignes afin qu’elles remplissent l’espace. <codeph>TextAlign.START</codeph> équivaut à définir gauche dans du texte de gauche à droite ou droite dans du texte de droite à gauche. <codeph>TextAlign.END</codeph> revient à spécifier la droite pour un texte écrit de gauche à droite, ou à spécifier la gauche pour un texte écrit de droite à gauche.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 Valeur alpha (transparence) du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Valeur alpha (transparence) du texte. La valeur 0 est entièrement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où <codeph>textAlpha</codeph> est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 1. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 Décoration du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Décoration du texte. Permet d’appliquer un soulignement. Par défaut, aucun soulignement n’est appliqué. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NONE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 Nombre qui indique la valeur de retrait de la première ligne du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre qui indique la valeur de retrait de la première ligne du paragraphe. Une valeur de retrait négative pousse la ligne dans la marge, et probablement en dehors du conteneur. 
		 <p>Les valeurs valides sont des nombres compris entre -1000 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 Spécifie des options de justification de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Spécifie des options de justification de texte. La valeur par défaut est <codeph>TextJustify.INTER_WORD</codeph>, ce qui signifie qu’un espace supplémentaire est ajouté aux espaces. <codeph>TextJustify.DISTRIBUTE</codeph> ajoute un espace supplémentaire aux espaces et entre chaque lettre. A utiliser uniquement en combinaison avec une valeur <codeph>justificationRule</codeph> de <codeph>JustificationRule.SPACE</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur INTER_WORD. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 Détermine le nombre de degrés de rotation de ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Détermine le nombre de degrés de rotation de ce texte. 
		 <p>Les valeurs valides dont flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 Nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à gauche de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à gauche de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingLeft</codeph> est ajoutée aux valeurs de la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingLeft</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 Nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à droite de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la valeur d’interlettrage (crénage manuel) à appliquer à droite de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingRight</codeph> est ajoutée aux valeurs de la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingRight</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 Type de casse typographique utilisée pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Type de casse typographique utilisée pour ce texte. Voici quelques exemples :<p><adobeimage alt="typographicCase " href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 Alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). Indique la façon dont les éléments TextFlow s’alignent dans le conteneur.
		 <p>Les valeurs valides sont flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.formats:ITextLayoutFormat:flashx.textLayout.formats:ITextLayoutFormat:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 Réduit ou conserve les espaces lors de l’importation de texte dans un objet TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> conserve tous les espaces. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> supprime les nouvelles lignes, les tabulations et l’interlignage ou les espaces dans un bloc de texte importé. Les caractères de balise de saut de ligne () et de séparateur de ligne Unicode sont conservés. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COLLAPSE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:LeadingModel"><apiName>LeadingModel</apiName><shortdesc>
	  Définit les valeurs permettant de définir la propriété leadingModel de la classe TextLayoutFormat, qui est composée de combinaisons valides de bases d’interlignage et de sens d’interlignage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs permettant de définir la propriété <codeph>leadingModel</codeph> de la classe <codeph>TextLayoutFormat</codeph>, qui est composée de combinaisons valides de bases d’interlignage et de sens d’interlignage. La base d’interlignage décrit quelles lignes de base déterminent l’interligne (ou <codeph>lineHeight</codeph>) des lignes dans un paragraphe. Le sens de l’interlignage détermine si la propriété <codeph>lineHeight</codeph> fait référence à la distance de la ligne de base d’une ligne par rapport à celle de la ligne précédente ou suivante. 
	  <p>
	  <adobeimage alt="baselines" border="0" href="../../../images/textLayout_baselines.jpg"/> <adobeimage alt="leadingDirection_1" border="0" href="../../../images/textLayout_LD1.jpg"/> <adobeimage alt="leadingDirection_2" border="0" href="../../../images/textLayout_LD2.jpg"/> <adobeimage alt="leadingDirection_3" border="0" href="../../../images/textLayout_LD3.jpg"/>
	  </p>
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/leadingModel"><linktext>TextLayoutFormat.leadingModel</linktext></link><link href="flashx.textLayout.formats.xml#TextLayoutFormat/lineHeight"><linktext>TextLayoutFormat.lineHeight</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link></related-links><apiValue id="flashx.textLayout.formats:LeadingModel:APPROXIMATE_TEXT_FIELD"><apiName>APPROXIMATE_TEXT_FIELD</apiName><shortdesc> Spécifie un modèle d’interlignage qui se rapproche du comportement de l’interligne de TextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>approximateTextField</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie un modèle d’interlignage qui se rapproche du comportement de l’interligne de <codeph>TextField</codeph>. Elle est similaire à <codeph>ASCENT_DESCENT_UP</codeph> en ce sens que <codeph>lineHeight</codeph> fait référence à la distance entre la ligne de base ascendante d'une ligne et la ligne de base descendante de la ligne précédente. Toutefois, les positions de la ligne de base s’approchent de celles déterminées par <codeph>TextField</codeph> plutôt que d’utiliser les mesures offertes par <codeph>TextLine</codeph>.  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ASCENT_DESCENT_UP"><apiName>ASCENT_DESCENT_UP</apiName><shortdesc> Indique que la valeur de la base d’interlignage est ASCENT/DESCENT et celle du sens d’interlignage est UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascentDescentUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Indique que la valeur de la base d’interlignage est ASCENT/DESCENT et celle du sens d’interlignage est UP. En d’autres termes, la propriété <codeph>lineHeight</codeph> se rapporte à la distance de la ligne de base Ascent d’une ligne par rapport à la ligne de base Descent de la ligne précédente.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:AUTO"><apiName>AUTO</apiName><shortdesc> Spécifie que le modèle d’interlignage est choisi automatiquement en fonction de la propriété locale du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="3.0" version="#IDEOGRAPHIC_TOP_DOWN"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie que le modèle d’interlignage est choisi automatiquement en fonction de la propriété <codeph>locale </codeph> du paragraphe. Pour le chinois et le japonais, la valeur est IDEOGRAPHIC_TOP_DOWN et pour toutes les autres langues, la valeur est ROMAN_UP.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_DOWN"><apiName>IDEOGRAPHIC_CENTER_DOWN</apiName><shortdesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_CENTER et celle du sens d’interlignage est down.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_CENTER et celle du sens d’interlignage est down. En d’autres termes, la propriété <codeph>lineHeight</codeph> se rapporte à la distance de la ligne de base idéographique centrale d’une ligne par rapport à la ligne de base idéographique centrale de la ligne suivante.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_CENTER_UP"><apiName>IDEOGRAPHIC_CENTER_UP</apiName><shortdesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_CENTER et celle du sens d’interlignage est UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenterUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_CENTER et celle du sens d’interlignage est UP. En d’autres termes, la propriété <codeph>lineHeight</codeph> se rapporte à la distance de la ligne de base idéographique centrale d’une ligne par rapport à la ligne de base idéographique centrale de la ligne précédente.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_DOWN"><apiName>IDEOGRAPHIC_TOP_DOWN</apiName><shortdesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_TOP et celle du sens d’interlignage est DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopDown</apiData><apiType value="String"/></apiValueDef><apiDesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_TOP et celle du sens d’interlignage est DOWN. En d’autres termes, la propriété <codeph>lineHeight</codeph> se rapporte à la distance de la ligne de base idéographique supérieure d’une ligne par rapport à la ligne de base idéographique supérieure de la ligne suivante.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:IDEOGRAPHIC_TOP_UP"><apiName>IDEOGRAPHIC_TOP_UP</apiName><shortdesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_TOP et celle du sens d’interlignage est UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTopUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Indique que la valeur de la base d’interlignage est IDEOGRAPHIC_TOP et celle du sens d’interlignage est UP. En d’autres termes, la propriété <codeph>lineHeight</codeph> se rapporte à la distance de la ligne de base idéographique supérieure d’une ligne par rapport à la ligne de base idéographique supérieure de la ligne précédente.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:LeadingModel:ROMAN_UP"><apiName>ROMAN_UP</apiName><shortdesc> Indique que la valeur de la base d’interlignage est ROMAN et celle du sens d’interlignage est UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>romanUp</apiData><apiType value="String"/></apiValueDef><apiDesc> Indique que la valeur de la base d’interlignage est ROMAN et celle du sens d’interlignage est UP. En d’autres termes, la propriété <codeph>lineHeight</codeph> se rapporte à la distance de la ligne de base des caractères romains d’une ligne par rapport à la ligne de base des caractères romains de la ligne précédente.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:IMEStatus"><apiName>IMEStatus</apiName><shortdesc>
	  Utilisée en interne pour la spécification de l’état des clauses du texte IME lors d’un session d’entrée de texte IME. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Utilisée en interne pour la spécification de l’état des clauses du texte IME lors d’un session d’entrée de texte IME. 
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="flashx.textLayout.formats:IMEStatus:IMEStatus"><apiName>IMEStatus</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.formats:IMEStatus:DEAD_KEY_INPUT_STATE"><apiName>DEAD_KEY_INPUT_STATE</apiName><shortdesc> Etat de saisie par touche morte - dans le processus de saisie d’un caractère multitouche, par exemple, un car accentué
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deadKeyInputState</apiData><apiType value="String"/></apiValueDef><apiDesc> Etat de saisie par touche morte - dans le processus de saisie d’un caractère multitouche, par exemple, un car accentué
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:IME_CLAUSE"><apiName>IME_CLAUSE</apiName><shortdesc> Nom de la propriété IMEClause.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeClause</apiData><apiType value="String"/></apiValueDef><apiDesc> Nom de la propriété IMEClause. La valeur est un entier. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:IME_STATUS"><apiName>IME_STATUS</apiName><shortdesc> Nom de la propriété IMEStatus
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeStatus</apiData><apiType value="String"/></apiValueDef><apiDesc> Nom de la propriété IMEStatus
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:NOT_SELECTED_CONVERTED"><apiName>NOT_SELECTED_CONVERTED</apiName><shortdesc> Non sélectionné, converti : le texte a été converti et ne fait pas partie de la clause actuelle de la session IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>notSelectedConverted</apiData><apiType value="String"/></apiValueDef><apiDesc> Non sélectionné, converti : le texte a été converti et ne fait pas partie de la clause actuelle de la session IME
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:NOT_SELECTED_RAW"><apiName>NOT_SELECTED_RAW</apiName><shortdesc> Non sélectionné, brut : le texte n’a pas été converti et ne fait pas partie de la clause actuelle de la session IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>notSelectedRaw</apiData><apiType value="String"/></apiValueDef><apiDesc> Non sélectionné, brut : le texte n’a pas été converti et ne fait pas partie de la clause actuelle de la session IME
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:SELECTED_CONVERTED"><apiName>SELECTED_CONVERTED</apiName><shortdesc> Sélectionné, converti : le texte a été converti et se trouve dans la clause de la session IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectedConverted</apiData><apiType value="String"/></apiValueDef><apiDesc> Sélectionné, converti : le texte a été converti et se trouve dans la clause de la session IME
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:IMEStatus:SELECTED_RAW"><apiName>SELECTED_RAW</apiName><shortdesc> Sélectionné, brut : le texte n’a pas été converti et se trouve dans la clause de la session IME
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectedRaw</apiData><apiType value="String"/></apiValueDef><apiDesc> Sélectionné, brut : le texte n’a pas été converti et se trouve dans la clause de la session IME
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:BaselineOffset"><apiName>BaselineOffset</apiName><shortdesc>
	  Définit les valeurs de la propriété firstBaselineOffset des classes TextLayoutFormat et ContainerFormattedElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de la propriété <codeph>firstBaselineOffset</codeph> des classes <codeph>TextLayoutFormat</codeph> et <codeph>ContainerFormattedElement</codeph>. Détermine le décalage par rapport à l’encart supérieur du conteneur jusqu’à la ligne de base de la première ligne. Le décalage de la ligne de base peut être spécifié comme hauteur de la ligne ou valeur générée automatiquement. 
	  <p>
	  <adobeimage alt="firstBaselineOffset_1" border="0" href="../../../images/textLayout_FBO1.jpg"/> <adobeimage alt="firstBaselineOffset_2" border="0" href="../../../images/textLayout_FBO2.jpg"/> <adobeimage alt="firstBaselineOffset_3" border="0" href="../../../images/textLayout_FBO3.jpg"/> <adobeimage alt="firstBaselineOffset_4" border="0" href="../../../images/textLayout_FBO4.jpg"/>
	  </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/firstBaselineOffset"><linktext>TextLayoutFormat.firstBaselineOffset</linktext></link></related-links><apiValue id="flashx.textLayout.formats:BaselineOffset:ASCENT"><apiName>ASCENT</apiName><shortdesc> Spécifie un décalage égal à la hauteur de la ligne, c’est-à-dire à la police la plus haute de la ligne, en considérant que la base des images intégrées repose sur la ligne de base. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie un décalage égal à la hauteur de la ligne, c’est-à-dire à la police la plus haute de la ligne, en considérant que la base des images intégrées repose sur la ligne de base. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:AUTO"><apiName>AUTO</apiName><shortdesc>  Aligne la valeur ascendante de la ligne avec l’encart supérieur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>  Aligne la valeur ascendante de la ligne avec l’encart supérieur du conteneur. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:BaselineOffset:LINE_HEIGHT"><apiName>LINE_HEIGHT</apiName><shortdesc> Spécifie un décalage égal à la hauteur de la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineHeight</apiData><apiType value="String"/></apiValueDef><apiDesc> Spécifie un décalage égal à la hauteur de la ligne. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.formats:WhiteSpaceCollapse"><apiName>WhiteSpaceCollapse</apiName><shortdesc>
	  Définit les valeurs de définition de la propriété whiteSpaceCollapse de la classe TextLayoutFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Définit les valeurs de définition de la propriété <codeph>whiteSpaceCollapse</codeph> de la classe <codeph>TextLayoutFormat</codeph>. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/whiteSpaceCollapse"><linktext>TextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:COLLAPSE"><apiName>COLLAPSE</apiName><shortdesc> 
		 Réduit les espaces blancs lors de l’importation du texte [Par défaut).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>collapse</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Réduit les espaces blancs lors de l’importation du texte [Par défaut). Dans un bloc de texte importé, supprime les nouvelles lignes, les tabulations et les espaces de début et de fin. Conserve les balises des sauts de ligne (br/) et les caractères de séparation de lignes Unicode. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.formats:WhiteSpaceCollapse:PRESERVE"><apiName>PRESERVE</apiName><shortdesc> Conserve les espaces blancs lors de l’importation du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>preserve</apiData><apiType value="String"/></apiValueDef><apiDesc> Conserve les espaces blancs lors de l’importation du texte.  
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>