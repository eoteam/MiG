<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.container"><apiName>flashx.textLayout.container</apiName><apiDetail/><apiClassifier id="flashx.textLayout.container:ISandboxSupport"><apiName>ISandboxSupport</apiName><shortdesc> Interface pour prendre en charge les conteneurs gérés par TLF dans un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface pour prendre en charge les conteneurs gérés par TLF dans un sandbox de sécurité. 
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Appelée pour demander aux clients de commencer l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Appelée pour demander aux clients de commencer l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Appelée pour informer les clients que l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité n’est plus nécessaire. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Appelée pour informer les clients que l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité n’est plus nécessaire. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Appel du client pour transférer un événement mouseMove de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Appel du client pour transférer un événement mouseMove de l’extérieur d’un sandbox de sécurité. Les coordonnées du déplacement de la souris ne sont pas nécessaires. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ISandboxSupport:flashx.textLayout.container:ISandboxSupport:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Appel du client pour transférer un événement mouseUp de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Appel du client pour transférer un événement mouseUp de l’extérieur d’un sandbox de sécurité. Les coordonnées du déplacement de la souris vers le haut ne sont pas nécessaires. 
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.container:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Gère le texte dans un conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="callInContext"/><Exclude kind="method" name="getBaseSWFContext"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:ISWFContext</apiBaseInterface><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc> Gère le texte dans un conteneur. Suppose qu’il possède tous les enfants du conteneur. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Distribué par un objet TextFlow à chaque fois qu’un conteneur a reçu de nouvelles classes DisplayObjets ou que ces classes ont été mises à jour consécutivement à la composition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué par un objet TextFlow à chaque fois qu’un conteneur a reçu de nouvelles classes DisplayObjets ou que ces classes ont été mises à jour consécutivement à la composition. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Distribué par un objet TextFlow chaque fois qu’il est endommagé. 
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué par un objet TextFlow chaque fois qu’il est endommagé. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Distribué par un objet TextFlow après que le texte est déroulé dans un conteneur contrôleur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué par un objet TextFlow après que le texte est déroulé dans un conteneur contrôleur.   
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Distribué lorsqu’une classe InlineGraphicElement est redimensionnée en raison de la largeur ou hauteur automatique ou en pourcentage et après chargement du graphique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsqu’une classe InlineGraphicElement est redimensionnée en raison de la largeur ou hauteur automatique ou en pourcentage et après chargement du graphique.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Distribué lorsqu’un lien est activé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsqu’un lien est activé.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Distribué lorsque la souris sort de n’importe quel lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque la souris sort de n’importe quel lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Distribué lorsque la souris entre pour la première fois dans un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque la souris entre pour la première fois dans un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Distribué lorsque la souris survole un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque la souris survole un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Distribué lorsque le bouton de la souris est relâché au-dessus d’un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque le bouton de la souris est relâché au-dessus d’un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Distribué lorsque l’utilisateur clique sur le bouton de la souris sur un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque l’utilisateur clique sur le bouton de la souris sur un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Distribué à chaque recomposition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué à chaque recomposition.  
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Distribué chaque fois que la sélection est modifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué chaque fois que la sélection est modifiée. Principalement utilisé pour mettre à jour l’interface utilisateur qui dépend de la sélection.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.container:TextContainerManager_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.container:TextContainerManager:TextContainerManager"><apiName>TextContainerManager</apiName><shortdesc> Fonction constructeur : crée une occurrence TextContainerManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>La classe DisplayObjectContainer dans laquelle les lignes de texte sont gérées. 
		 </apiDesc></apiParam><apiParam><apiItemName>configuration</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>L’occurrence IConfiguration à utiliser avec cette occurrence TextContainerManager.  
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Fonction constructeur : crée une occurrence TextContainerManager. Pour obtenir de meilleurs résultats : 
		 <ol>
		 <li>Démarrez avec TextContainerManager.defaultConfiguration et modifiez-le.</li>   
		 <li>Partagez la même configuration avec de nombreux gestionnaires InputManager.</li>
		 </ol>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:TextContainerManager:activateHandler"><apiName>activateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>L’objet Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#activateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginInteraction"><apiName>beginInteraction</apiName><shortdesc> Renvoie l’occurrence ISelectionManager en cours. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le gestionnaire d’interaction pour cette occurrence TextContainerManager. 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie l’occurrence ISelectionManager en cours. Convertit en occurrence TextFlow et en crée une si nécessaire.  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Appelée pour demander aux clients de commencer l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Appelée pour demander aux clients de commencer l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:compose"><apiName>compose</apiName><shortdesc> Compose le texte du conteneur ; appelle la fabrique ou updateAllControllers(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Compose le texte du conteneur ; appelle la fabrique ou <codeph>updateAllControllers()</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> Crée un objet ContextMenu pour l’occurrence TextContainerManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Le menu contextuel créé. 
		 
		 </apiDesc><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> Crée un objet ContextMenu pour l’occurrence TextContainerManager. Utilisez les méthodes de la classe ContextMenu pour ajouter des éléments au menu.  
		 <p>Vous pouvez annuler cette méthode pour définir un menu contextuel personnalisé. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createEditManager"><apiName>createEditManager</apiName><shortdesc>Créez un gestionnaire d’édition à utiliser pour effectuer des modifications. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Le gestionnaire d’édition pour cette occurrence TextContainerManager .
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:IEditManager</apiOperationClassifier></apiReturn><apiParam><apiItemName>undoManager</apiItemName><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier><apiDesc>L’occurrence IUndoManager de l’objet EditManager en cours de création. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>Créez un gestionnaire d’édition à utiliser pour effectuer des modifications. Annulez cette méthode si vous préférez utiliser un objet EditManager personnalisé à la place de la valeur par défaut. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:createSelectionManager"><apiName>createSelectionManager</apiName><shortdesc>Créez un gestionnaire de sélection à utiliser pour la sélection. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Une nouvelle occurrence SelectionManager. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>Créez un gestionnaire de sélection à utiliser pour la sélection. Annulez cette méthode si vous préférez utiliser un objet SelectionManager personnalisé à la place de la valeur par défaut. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>L’objet Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#deactivateHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:drawBackgroundAndSetScrollRect"><apiName>drawBackgroundAndSetScrollRect</apiName><shortdesc>   
		 Renvoie true s’il a rempli la propriété scrollRect du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si elle a créé l’objet <codeph>scrollRect</codeph>.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>scrollX</apiItemName><apiType value="Number"/><apiDesc>La position de départ horizontale du rectangle déroulant. 
		 </apiDesc></apiParam><apiParam><apiItemName>scrollY</apiItemName><apiType value="Number"/><apiDesc>La position de départ verticale du rectangle déroulant. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>   
		 Renvoie <codeph>true</codeph> s’il a rempli la propriété scrollRect du conteneur. Cette méthode vous permet de déterminer si <codeph>scrollRect</codeph> est défini sans réellement accéder à la propriété <codeph>scrollRect</codeph>, ce qui peut éventuellement engendrer un problème de performance. 
		 <p>Annulez cette méthode pour dessiner un arrière-plan ou une bordure. L’annulation de cette méthode est une opération délicate, puisque le rectangle scrollRect <b>doit</b> être défini comme spécifié.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:editHandler"><apiName>editHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#editHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endInteraction"><apiName>endInteraction</apiName><shortdesc> Met fin à l’interaction. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Met fin à l’interaction.  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Appelée pour informer les clients que l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité n’est plus nécessaire. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Appelée pour informer les clients que l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité n’est plus nécessaire. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusChangeHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Traite un événement focusIn.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/></apiParam></apiOperationDef><apiDesc> Traite un événement focusIn.
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#focusOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> Crée un rectangle qui indique où le dernier appel de la méthode compose() ou de la méthode updateContainer() a placé le texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Les limites du contenu.
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> Crée un rectangle qui indique où le dernier appel de la méthode <codeph>compose()</codeph> ou de la méthode <codeph>updateContainer()</codeph> a placé le texte.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.container.xml#TextContainerManager/compose()"><linktext>compose()</linktext></link><link href="flashx.textLayout.container.xml#TextContainerManager/updateContainer()"><linktext>updateContainer()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getFocusedSelectionFormat"><apiName>getFocusedSelectionFormat</apiName><shortdesc> Renvoie l’occurrence focusedSelectionFormat : obtenez-la par défaut par la configuration. </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie l’occurrence focusedSelectionFormat : obtenez-la par défaut par la configuration. Elle peut être remplacée dans la sous-classe pour fournir un autre SelectionFormat.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getInactiveSelectionFormat"><apiName>getInactiveSelectionFormat</apiName><shortdesc> Renvoie l’occurrence inactiveSelectionFormat : obtenez-la par défaut par la configuration. Elle peut être remplacée dans la sous-classe pour fournir un autre SelectionFormat.
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie l’occurrence inactiveSelectioFormat : obtenez-la par défaut par la configuration. Elle peut être remplacée dans la sous-classe pour fournir un autre SelectionFormat.
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getLineAt"><apiName>getLineAt</apiName><shortdesc> Renvoie le TextLine à l’index depuis le tableau de lignes composées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le TextLine qui se produit à l’index spécifié. 
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Recherche la ligne à cette position d’index dans le texte. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Renvoie le TextLine à l’index depuis le tableau de lignes composées. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>La quantité delta d’espace pour faire défiler.
		
		</apiDesc></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>Le nombre de lignes à faire défiler. 
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#getScrollDelta()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getTextFlow"><apiName>getTextFlow</apiName><shortdesc> L’objet TextFlow en cours. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’objet TextFlow en cours.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> L’objet TextFlow en cours. Le convertit en une représentation d’objet TextFlow complète si ça n’en est pas déjà une.  
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:getText"><apiName>getText</apiName><shortdesc>
		 Renvoie le texte actuel en insérant un séparateur entre les paragraphes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>separator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>Chaîne à définir entre les paragraphes.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Renvoie le texte actuel en insérant un séparateur entre les paragraphes. Le séparateur peut être spécifié avec l’argument <codeph>separator</codeph>. La valeur par défaut de l’argument <codeph>separator</codeph> est le caractère Unicode <codeph>’PARAGRAPH SEPARATOR’ (U+2029)</codeph>. 
		 
		 <p>L’appel du setter écarte tout objet TextFlow attaché. Toute sélection est perdue. </p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUndoManager"><apiName>getUndoManager</apiName><shortdesc> 
		 Renvoie le gestionnaire d’annulation à utiliser. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Nouvelle occurrence IUndoManager. 
		 
		 </apiDesc><apiOperationClassifier>flashx.undo:IUndoManager</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
		 Renvoie le gestionnaire d’annulation à utiliser. Par défaut, crée un gestionnaire d’annulation unique. Vous pouvez annuler cette méthode dans la sous-classe si vous voulez personnaliser le gestionnaire d’annulation (par exemple, pour utiliser un gestionnaire d’annulation partagé pour plusieurs occurrences TextContainerManager). 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:protected:getUnfocusedSelectionFormat"><apiName>getUnfocusedSelectionFormat</apiName><shortdesc> Renvoie l’occurrence unfocusedSelectionFormat : obtenez-la par défaut de la configuration. Vous pouvez ignorer cette méthode dans la sous-classe pour fournir un autre SelectionFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>flashx.textLayout.edit:SelectionFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie l’occurrence unfocusedSelectionFormat : obtenez-la par défaut de la configuration. Vous pouvez ignorer cette méthode dans la sous-classe pour fournir un autre SelectionFormat.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Traite l’événement IME.START_COMPOSITION lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> L’objet IMEEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>IME.START_COMPOSITION</codeph> lorsque le client gère les événements. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#IMEEvent/START_COMPOSITION"><linktext>IMEEvent.START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateSelectionFormats"><apiName>invalidateSelectionFormats</apiName><shortdesc> Appelez cette méthode si vous modifiez les formats de sélection (SelectionFormat) et que vous souhaitez que l’occurrence interactionManager soit mise à jour. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Appelez cette méthode si vous modifiez les formats de sélection (SelectionFormat) et que vous souhaitez que l’occurrence interactionManager soit mise à jour.  
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:invalidateUndoManager"><apiName>invalidateUndoManager</apiName><shortdesc> Appelez cette méthode si vous éditez et que vous souhaitez rétablir le gestionnaire d’annulation utilisé pour l’édition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Appelez cette méthode si vous éditez et que vous souhaitez rétablir le gestionnaire d’annulation utilisé pour l’édition. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:isDamaged"><apiName>isDamaged</apiName><shortdesc> Renvoie true si le contenu doit être composé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> si le contenu doit être composé ; sinon <codeph>false</codeph>.
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Renvoie <codeph>true</codeph> si le contenu doit être composé. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Objet KeyboardEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyFocusChangeHandler()."> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>L’objet KeyboardEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#keyUpHandler()."> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>Objet ContextMenuEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#menuSelectHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDoubleClickHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseDownHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseMoveHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Appel du client pour transférer un événement mouseMove de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Appel du client pour transférer un événement mouseMove de l’extérieur d’un sandbox de sécurité. Les coordonnées du déplacement de la souris ne sont pas nécessaires. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseOutHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> Traite un événement mouseOver.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/></apiParam></apiOperationDef><apiDesc> Traite un événement mouseOver.
		</apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseUpHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Appel du client pour transférer un événement mouseUp de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Appel du client pour transférer un événement mouseUp de l’extérieur d’un sandbox de sécurité. Les coordonnées du déplacement de la souris vers le haut ne sont pas nécessaires. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#mouseWheelHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>L’extrémité de la sélection modifiée lorsque vous développez la sélection. Il peut s’agir du début ou de la fin de la sélection, exprimé sous la forme d’un décalage à partir du début de l’enchaînement de texte. 
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	La fin stable de la sélection lorsque vous développez la sélection. Il peut s’agir du début ou de la fin de la sélection. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()"> 
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setTextFlow"><apiName>setTextFlow</apiName><shortdesc> Définit un objet textFlow dans cette occurrence TextContainerManager en remplaçant tout TextFlow existant et en supprimant le texte actif. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Définit un objet textFlow dans cette occurrence TextContainerManager en remplaçant tout TextFlow existant et en supprimant le texte actif.  
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:setText"><apiName>setText</apiName><shortdesc>
		 Définit la propriété text sur la chaîne spécifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>La chaîne à définir.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Définit la propriété <codeph>text</codeph> sur la chaîne spécifiée. Ignore les objets TextFlow associés. Toute sélection est perdue. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:textInputHandler"><apiName>textInputHandler</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> L’objet TextEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#textInputHandler()"> </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:TextContainerManager:updateContainer"><apiName>updateContainer</apiName><shortdesc> Met à jour l’affichage ; appelle la fabrique ou updateAllControllers(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Met à jour l’affichage ; appelle la fabrique ou updateAllControllers(). 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:TextContainerManager:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> Renvoie l’étendue verticale autorisée pour du texte à l’intérieur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Renvoie l’étendue verticale autorisée pour du texte à l’intérieur du conteneur. La valeur est spécifiée en pixels. 
		 <p>Après la définition de cette propriété, le texte dans le conteneur est endommagé et doit être composé.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> Renvoie l’étendue horizontale autorisée pour du texte à l’intérieur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Renvoie l’étendue horizontale autorisée pour le texte à l’intérieur du conteneur. La valeur est spécifiée en pixels.
		 
		 <p>Après la définition de cette propriété, le texte dans le conteneur est endommagé et doit être composé.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:configuration:get"><apiName>configuration</apiName><shortdesc> L’objet Configuration pour cette occurrence TextContainerManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> L’objet Configuration pour cette occurrence TextContainerManager.  
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.IConfiguration.xml"><linktext>IConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:container:get"><apiName>container</apiName><shortdesc> Renvoie le conteneur (DisplayObjectContainer) qui contient le texte géré par l’occurrence TextContainerManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> Renvoie le conteneur (DisplayObjectContainer) qui contient le texte géré par l’occurrence TextContainerManager. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>ContainerController.container</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:defaultConfiguration:get"><apiName>defaultConfiguration</apiName><shortdesc> La configuration par défaut pour cette occurrence TextContainerManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> La configuration par défaut pour cette occurrence TextContainerManager. Les attributs de colonne et de marge sont définis sur la valeur <codeph>FormatValue.INHERIT</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.formats.xml#FormatValue/INHERIT"><linktext>FormatValue.INHERIT</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:editingMode:get"><apiName>editingMode</apiName><shortdesc> Mode d’édition de cette occurrence TextContainerManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Mode d’édition de cette occurrence TextContainerManager. Les modes sont : lecture seule, lecture et sélection autorisées et édition (lecture, sélection et écriture) autorisée. Utilisez les valeurs constantes de la classe EditingMode pour définir cette propriété. 
		 <p>La valeur par défaut est READ_WRITE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#EditingMode"><linktext>EditingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Contrôle si la fabrique génère toutes les lignes de texte ou s’arrête lorsque les limites du conteneur sont atteintes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPolicy"> 
		 Contrôle si la fabrique génère toutes les lignes de texte ou s’arrête lorsque les limites du conteneur sont atteintes. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#horizontalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> Définit le format lorsque l’affichage se limite à une chaîne. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> Définit le format lorsque l’affichage se limite à une chaîne. Si un objet TextFlow est affiché, cela n’a aucun effet immédiat. Le paramètre ITextLayoutFormat fourni n’est pas copié. La modification sans appel de ce setter entraîne des effets inconnus.  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:numLines:get"><apiName>numLines</apiName><shortdesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flashx.textLayout.compose.IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Occurrence ISWFContext facultative utilisée pour effectuer des appels FTE, si nécessaire, dans le contexte swf approprié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Occurrence ISWFContext facultative utilisée pour effectuer des appels FTE, si nécessaire, dans le contexte swf approprié.  
		
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Contrôle si la fabrique génère toutes les lignes de texte ou s’arrête lorsque les limites du conteneur sont atteintes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPolicy"> 
		 Contrôle si la fabrique génère toutes les lignes de texte ou s’arrête lorsque les limites du conteneur sont atteintes. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:TextContainerManager:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flashx.textLayout.container.ContainerController#verticalScrollPosition"> 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
	  La classe ScrollPolicy est une classe d’énumération qui définit des valeurs pour le paramétrage des propriétés horizontalScrollPolicy et verticalScrollPolicy de la classe ContainerController, qui définit un conteneur d’enchaînement de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  La classe ScrollPolicy est une classe d’énumération qui définit des valeurs pour le paramétrage des propriétés <codeph>horizontalScrollPolicy</codeph> et <codeph>verticalScrollPolicy</codeph> de la classe ContainerController, qui définit un conteneur d’enchaînement de texte.  
	 
	  </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/horizontalScrollPolicy"><linktext>ContainerController.horizontalScrollPolicy</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/verticalScrollPolicy"><linktext>ContainerController.verticalScrollPolicy</linktext></link></related-links><apiValue id="flashx.textLayout.container:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc> 
		 Spécifie que le défilement doit se produire si le contenu dépasse les dimensions du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Spécifie que le défilement doit se produire si le contenu dépasse les dimensions du conteneur. Le moteur d’exécution calcule le nombre de lignes dépassant les limites du conteneur et l’utilisateur peut y accéder grâce aux touches du curseur, par glissement ou en faisant pivoter la molette de la souris. Vous pouvez également provoquer le défilement en définissant la valeur de la position correspondante, <codeph>ContainerController.horizontalScrollPosition</codeph> ou <codeph>ContainerController.verticalScrollPosition</codeph>. Le moteur d’exécution peut également faire automatiquement défiler le contenu du conteneur au cours de l’édition. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc> 
		 Oblige le moteur d’exécution à ne pas afficher les lignes en dépassement, ce qui signifie que l’utilisateur ne peut pas y accéder</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Oblige le moteur d’exécution à ne pas afficher les lignes en dépassement, ce qui signifie que l’utilisateur ne peut pas y accéder. Dans ce cas, la définition des propriétés <codeph>ContainerController.horizontalScrollPosition</codeph> et <codeph>ContainerController.verticalScrollPosition</codeph> correspondantes n’a aucun effet. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc> 
		 Spécifie que le défilement est disponible pour accéder au contenu qui dépasse les dimensions du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Spécifie que le défilement est disponible pour accéder au contenu qui dépasse les dimensions du conteneur. Le moteur d’exécution calcule le nombre de lignes dépassant les limites du conteneur et permet à l’utilisateur de les faire défiler dans la vue avec les touches de déplacement du curseur, en faisant glisser la sélection ou en faisant tourner la molette de la souris. Vous pouvez également faire défiler en définissant la valeur de la position correspondante, <codeph>ContainerController.horizontalScrollPosition</codeph> ou <codeph>ContainerController.verticalScrollPosition</codeph>. Le moteur d’exécution peut également faire automatiquement défiler le contenu du conteneur au cours de l’édition. 
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ColumnState"><apiName>ColumnState</apiName><shortdesc> 
	 La classe ColumnState calcule les tailles et les emplacements des colonnes à l’aide de la largeur et des attributs du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe ColumnState calcule les tailles et les emplacements des colonnes à l’aide de la largeur et des attributs du conteneur. Vous pouvez créer des occurrences de cette classe indépendamment pour calculer les valeurs de colonne, ou vous pouvez obtenir les valeurs de colonne qui ont été utilisées pour le texte une fois que le conteneur a été composé ou mis à jour (redessiné).
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ColumnState:ColumnState"><apiName>ColumnState</apiName><shortdesc>
		 Fonction constructeur : crée un objet ColumnState. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>blockProgression</apiItemName><apiType value="String"/><apiDesc>La direction des lignes pour l’enchaînement de texte, soit BlockProgression.TB (de haut en bas) ou BlockProgression.RL (de droite à gauche). 
		 </apiDesc></apiParam><apiParam><apiItemName>columnDirection</apiItemName><apiType value="String"/><apiDesc>La direction de la disposition de colonne pour l’enchaînement de texte, soit Direction.RTL (de droite à gauche) ou Direction.LTR (de gauche à droite). 
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Une occurrence ContainerController dont les attributs sont utilisés pour calculer les valeurs de colonne. 
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiDesc>Etendue horizontale, en pixels, autorisée pour le texte à l’intérieur du conteneur. 
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiDesc>Etendue verticale, en pixels, autorisée pour le texte à l’intérieur du conteneur. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Fonction constructeur : crée un objet ColumnState. Si les valeurs de <codeph>controller.compositionWidth</codeph> et <codeph>controller.compositionHeight</codeph> sont égales à <codeph>NaN</codeph> (pas un nombre), le constructeur mesure le contenu du conteneur afin de déterminer la largeur et la hauteur de la composition réelle qui remplit ColumnState. Utilisez les constantes définies par la classe <codeph>flashx.textLayout.formats.BlockProgression</codeph> afin de spécifier la valeur du paramètre <codeph>blockProgression</codeph>. Utilisez les constantes définies par <codeph>flashx.textLayout.formats.Direction</codeph> afin de spécifier la valeur du paramètre <codeph>columnDirection</codeph>.
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>BlockProgression</linktext></link><link href="flashx.textLayout.formats.xml#Direction"><linktext>Direction</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.container:ColumnState:getColumnAt"><apiName>getColumnAt</apiName><shortdesc> 
		 Renvoie la zone occupée par une colonne dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La zone de la colonne spécifiée. 
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>La position relative de la colonne parmi toutes les colonnes dans le conteneur, avec la première colonne à la position 0. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Renvoie la zone occupée par une colonne dans le conteneur. Permet d’accéder à la zone d’une colonne spécifique. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ColumnState:columnCount:get"><apiName>columnCount</apiName><shortdesc> 
		 Le nombre de colonnes dans le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Le nombre de colonnes dans le conteneur. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnGap:get"><apiName>columnGap</apiName><shortdesc> 
		 L’espace, en pixels, situé entre les colonnes dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 L’espace, en pixels, situé entre les colonnes dans le conteneur. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ColumnState:columnWidth:get"><apiName>columnWidth</apiName><shortdesc> 
		 La largeur des colonnes, en pixels, dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 La largeur des colonnes, en pixels, dans le conteneur.  
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.container:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
	 La classe ContainerController définit la relation entre un objet TextFlow et un conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.edit:IInteractionEventHandler</apiBaseInterface><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseInterface>flashx.textLayout.container:ISandboxSupport</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe ContainerController définit la relation entre un objet TextFlow et un conteneur. Un objet TextFlow a une interface IFlowComposer qui gère un conteneur ou un ensemble de conteneurs pour l’objet TextFlow. L’interface IFlowComposer dispose d’un objet ContainerController pour chaque conteneur qu’elle gère. L’objet ContainerController gère les attributs qui sont spécifiques à ce conteneur ainsi que le texte du conteneur.
	 
	 <p><adobeimage alt="IContainerController" href="../../../images/textLayout_multiController.gif"/></p>
	 
	 </apiDesc><example conref="examples\ContainerControllerExample1.as"/><example conref="examples\ContainerControllerExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.container:ContainerController:ContainerController"><apiName>ContainerController</apiName><shortdesc> 
		 Constructeur : crée une occurrence ContainerController. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>container</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>La classe DisplayObjectContainer dans laquelle gérer les lignes de texte. 
		 </apiDesc></apiParam><apiParam><apiItemName>compositionWidth</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>La largeur initiale de composition du texte dans le conteneur. 
		 </apiDesc></apiParam><apiParam><apiItemName>compositionHeight</apiItemName><apiType value="Number"/><apiData>100</apiData><apiDesc>La hauteur initiale de composition du texte dans le conteneur. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructeur : crée une occurrence ContainerController. La classe ContainerController a une largeur <codeph>compositionWidth</codeph> et une hauteur <codeph>compositionHeight</codeph> par défaut garantissant l’affichage d’une partie du texte si vous ne spécifiez pas sa largeur/hauteur.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.container:ContainerController:activateHandler"><apiName>activateHandler</apiName><shortdesc> Traite l’événement Event.ACTIVATE lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>L’objet Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>Event.ACTIVATE</codeph> lorsque le client gère les événements.
		 
		 </apiDesc><example conref="examples\ContainerController_activateHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/ACTIVATE"><linktext>Event.ACTIVATE </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addBackgroundShape"><apiName>addBackgroundShape</apiName><shortdesc>
		 Ajoute un objet flash.display.Shape dans l’arrière-plan duquel des formes (telles que la couleur d’arrière-plan) sont dessinées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>shape</apiItemName><apiType value="flash.display:Shape"/><apiDesc>Objet <codeph>flash.display.Shape</codeph> à ajouter
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ajoute un objet <codeph>flash.display.Shape</codeph> dans l’arrière-plan duquel des formes (telles que la couleur d’arrière-plan) sont dessinées. Par défaut, l’implémentation de cette méthode, qui peut être remplacée, ajoute l’objet à <codeph>container</codeph> juste avant le premier enfant <codeph>flash.text.engine.TextLine</codeph>, s’il existe, et après le dernier enfant existant dans le cas contraire.  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.Shape.xml"><linktext>flash.display.Shape</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addSelectionContainer"><apiName>addSelectionContainer</apiName><shortdesc>
		 Ajoute un objet flash.display.DisplayObjectContainer auquel des formes de sélection (telles que la mise en surbrillance de la sélection de bloc, un curseur, etc. ) sont ajoutées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Objet <codeph>flash.display.DisplayObjectContainer</codeph> à ajouter
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ajoute un objet <codeph>flash.display.DisplayObjectContainer</codeph> auquel des formes de sélection (telles que la mise en surbrillance de la sélection de bloc, un curseur, etc. ) sont ajoutées. Par défaut, l’implémentation de cette méthode, qui peut être remplacée, a le comportement suivant : l’objet est ajouté juste avant le premier enfant <codeph>flash.text.engine.TextLine</codeph> de <codeph>container</codeph>, s’il existe, et l’objet est opaque et possède un mode normal de fusion. Dans tous les autres cas, il est ajouté comme dernier enfant de <codeph>container</codeph>. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:addTextLine"><apiName>addTextLine</apiName><shortdesc>
		 Ajoute un objet flash.text.engine.TextLine comme descendant de container. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>l’objet <codeph>flash.text.engine.TextLine</codeph> à ajouter 
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>index d’insertion de la ligne de texte dans son parent  
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Ajoute un objet <codeph>flash.text.engine.TextLine</codeph> comme descendant de <codeph>container</codeph>. Par défaut, l’implémentation de cette méthode, qui peut être remplacée, ajoute l’objet comme enfant direct de <codeph>container</codeph> à l’index spécifié. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:autoScrollIfNecessary"><apiName>autoScrollIfNecessary</apiName><shortdesc> 
		 Gérer un événement scroll au cours d’une sélection « faire glisser ». </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mouseX</apiItemName><apiType value="int"/><apiDesc>La position horizontale du curseur de la souris sur la scène. 
		 </apiDesc></apiParam><apiParam><apiItemName>mouseY</apiItemName><apiType value="int"/><apiDesc>La position verticale du curseur de la souris sur la scène. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gérer un événement scroll au cours d’une sélection « faire glisser ».  
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:beginMouseCapture"><apiName>beginMouseCapture</apiName><shortdesc> 
		 Appelée pour demander aux clients de commencer l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Appelée pour demander aux clients de commencer l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:clearStyle"><apiName>clearStyle</apiName><shortdesc> Désactive le style spécifié par la propriété styleProp à partir de cet objet FlowElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Désactive le style spécifié par la propriété <codeph>styleProp</codeph> à partir de cet objet FlowElement. Définit la valeur sur <codeph>undefined</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:createContextMenu"><apiName>createContextMenu</apiName><shortdesc> 
		 Crée un menu contextuel pour l’objet ContainerController. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.ui:ContextMenu"/></apiReturn></apiOperationDef><apiDesc> 
		 Crée un menu contextuel pour l’objet ContainerController. Utiliser les méthodes de la classe ContextMenu pour ajouter des éléments au menu. 
		 <p>Vous pouvez annuler cette méthode pour définir un menu contextuel personnalisé. </p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.ui.ContextMenu.xml"><linktext>ContextMenu</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:deactivateHandler"><apiName>deactivateHandler</apiName><shortdesc> Traite l’événement Event.DEACTIVATE lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>L’objet Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>Event.DEACTIVATE</codeph> lorsque le client gère les événements. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#Event/DEACTIVATE"><linktext>Event.DEACTIVATE </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:editHandler"><apiName>editHandler</apiName><shortdesc>
		 Traite un événement de modification (CUT, COPY, PASTE, SELECT_ALL) lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet Event.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Traite un événement de modification (CUT, COPY, PASTE, SELECT_ALL) lorsque le client gère les événements. 
		 
		 </apiDesc><example conref="examples\ContainerController_editHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.Event.xml"><linktext>Event</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:endMouseCapture"><apiName>endMouseCapture</apiName><shortdesc> 
		 Appelée pour informer les clients que l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité n’est plus nécessaire. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Appelée pour informer les clients que l’avance rapide des événements mouseup et mousemove de l’extérieur d’un sandbox de sécurité n’est plus nécessaire. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusChangeHandler"><apiName>focusChangeHandler</apiName><shortdesc> 
		 Traite les événements FocusEvent.KEY_FOCUS_CHANGE et FocusEvent.MOUSE_FOCUS_CHANGE lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Traite les événements <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> et <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link><link href="" invalidHref="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>FocusEvent.MOUSE_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusInHandler"><apiName>focusInHandler</apiName><shortdesc> Traite l’événement FocusEvent.FOCUS_IN lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>FocusEvent.FOCUS_IN</codeph> lorsque le client gère les événements.
		 
		 </apiDesc><example conref="examples\ContainerController_focusInHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FocusEvent.FOCUS_IN</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc> Traite l’événement FocusEvent.FOCUS_OUT lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>FocusEvent.FOCUS_OUT</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FocusEvent.FOCUS_OUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getContentBounds"><apiName>getContentBounds</apiName><shortdesc> 
		 Renvoie la zone occupée par le texte, telle qu’indiquée par la dernière opération de composition ou de mise à jour.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Décrit la zone occupée par le texte.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Renvoie la zone occupée par le texte, telle qu’indiquée par la dernière opération de composition ou de mise à jour. La largeur et la hauteur peuvent être estimées, si le conteneur est déroulant et que le texte dépasse de la zone visible. 
		 
		 </apiDesc><example conref="examples\ContainerController_getContentBoundsExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.geom.Rectangle.xml"><linktext>Rectangle</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:getFirstTextLineChildIndex"><apiName>getFirstTextLineChildIndex</apiName><shortdesc>
		 Récupère l’index dans lequel la première ligne de texte doit apparaître dans son parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>l’index dans lequel la première ligne de texte doit apparaître dans son parent. 
		 
		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Récupère l’index dans lequel la première ligne de texte doit apparaître dans son parent. Par défaut, l’implémentation de cette méthode, qui peut être remplacée, renvoie l’index enfant du premier enfant <codeph>flash.text.engine.TextLine</codeph> de <codeph>container</codeph>, s’il existe, et celui du dernier enfant de <codeph>container</codeph> dans le cas contraire.  
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getScrollDelta"><apiName>getScrollDelta</apiName><shortdesc> 
		La distance de défilement nécessaire pour faire défiler vers le haut ou vers le bas par le nombre de lignes spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La quantité d’espace delta à faire défiler.
		
		</apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>numLines</apiItemName><apiType value="int"/><apiDesc>Le nombre de lignes à faire défiler. 
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		La distance de défilement nécessaire pour faire défiler vers le haut ou vers le bas par le nombre de lignes spécifié. Les nombres négatifs font défiler vers le haut, affichant la partie supérieure de l’objet TextFlow. Les nombres positifs font défiler vers le bas, affichant complètement la ligne suivante à partir du bas. 
		
		<p>Lors d’un défilement vers le haut, par exemple, la méthode rend la ligne suivante entièrement visible. Si la ligne suivante est partiellement masquée et que le nombre de lignes spécifié est de 1, la ligne partiellement masquée devient complètement visible. </p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:getStyle"><apiName>getStyle</apiName><shortdesc> Renvoie la valeur du style spécifié par le paramètre styleProp. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur actuelle pour le style spécifié. 
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Le nom de la propriété de style dont vous voulez la valeur. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Renvoie la valeur du style spécifié par le paramètre <codeph>styleProp</codeph>.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:imeStartCompositionHandler"><apiName>imeStartCompositionHandler</apiName><shortdesc> Traite l’événement IMEEvent.IME_START_COMPOSITION lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:IMEEvent"/><apiDesc> L’objet IMEEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>IMEEvent.IME_START_COMPOSITION</codeph> lorsque le client gère les événements. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.IMEEvent.IME_START_COMPOSITION.xml"><linktext>flash.events.IMEEvent.IME_START_COMPOSITION</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:invalidateContents"><apiName>invalidateContents</apiName><shortdesc> 
		 Désigne tout le texte dans ce conteneur comme requérant une composition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Désigne tout le texte dans ce conteneur comme requérant une composition.  
		 
		 </apiDesc><example conref="examples\ContainerController_invalidateContentsExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Détermine si le conteneur contient du texte qui nécessite une composition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true si le conteneur nécessite une composition.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Détermine si le conteneur contient du texte qui nécessite une composition. 
		 
		 </apiDesc><example conref="examples\ContainerController_isDamagedExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc> Traite l’événement KeyboardEvent.KEY_DOWN lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Objet KeyboardEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>KeyboardEvent.KEY_DOWN</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KeyboardEvent.KEY_DOWN </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyFocusChangeHandler"><apiName>keyFocusChangeHandler</apiName><shortdesc> Traite l’événement FocusEvent.KEY_FOCUS_CHANGE lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>L’objet FocusEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> lorsque le client gère les événements. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>FocusEvent.KEY_FOCUS_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc> Traite l’événement keyboard.KEY_UP lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>L’objet KeyboardEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>Keyboard.KEY_UP</codeph> lorsque le client gère les événements.
		 
		 </apiDesc><example conref="examples\ContainerController_keyUpHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KeyboardEvent.KEY_UP </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:menuSelectHandler"><apiName>menuSelectHandler</apiName><shortdesc> 
		 Traite l’événement MENU_SELECT ContextMenuEvent. lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:ContextMenuEvent"/><apiDesc>Objet ContextMenuEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Traite l’événement <codeph>ContextMenuEvent.MENU_SELECT</codeph> lorsque le client gère les événements.
		 
		 </apiDesc><example conref="examples\ContainerController_menuSelectHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc> Traite l’événement MouseEvent.DOUBLE_CLICK lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>MouseEvent.DOUBLE_CLICK</codeph> lorsque le client gère les événements.
		 
		 </apiDesc><example conref="examples\ContainerController_mouseDoubleClickHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/DOUBLE_CLICK"><linktext>MouseEvent.DOUBLE_CLICK </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc> Traite l’événement MouseEvent.MOUSE_DOWN lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>MouseEvent.MOUSE_DOWN</codeph> lorsque le client gère les événements. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_DOWN"><linktext>MouseEvent.MOUSE_DOWN </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc> 
		 Traite l’événement MouseEvent.MOUSE_MOVE lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Traite l’événement <codeph>MouseEvent.MOUSE_MOVE</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_MOVE"><linktext>MouseEvent.MOUSE_MOVE </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseMoveSomewhere"><apiName>mouseMoveSomewhere</apiName><shortdesc> Appel du client pour transférer un événement mouseMove de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Appel du client pour transférer un événement mouseMove de l’extérieur d’un sandbox de sécurité. Les coordonnées du déplacement de la souris ne sont pas nécessaires. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc> Traite l’événement MouseEvent.MOUSE_OUT lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>MouseEvent.MOUSE_OUT</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OUT"><linktext>MouseEvent.MOUSE_OUT </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc> 
		 Traite l’événement MouseEvent.MOUSE_OVER lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Traite l’événement <codeph>MouseEvent.MOUSE_OVER</codeph> lorsque le client gère les événements. 
		 
		 </apiDesc><example conref="examples\ContainerController_mouseOverHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_OVER"><linktext>MouseEvent.MOUSE_OVER </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc> 
		 Traite l’événement MouseEvent.MOUSE_UP lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Traite l’événement <codeph>MouseEvent.MOUSE_UP</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_UP"><linktext>MouseEvent.MOUSE_UP </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseUpSomewhere"><apiName>mouseUpSomewhere</apiName><shortdesc> Appel du client pour transférer un événement mouseUp de l’extérieur d’un sandbox de sécurité. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc> Appel du client pour transférer un événement mouseUp de l’extérieur d’un sandbox de sécurité. Les coordonnées du déplacement de la souris vers le haut ne sont pas nécessaires. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc> Traite l’événement MouseEvent.MOUSE_WHEEL lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>L’objet MouseEvent.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>MouseEvent.MOUSE_WHEEL</codeph> lorsque le client gère les événements.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/MOUSE_WHEEL"><linktext>MouseEvent.MOUSE_WHEEL </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeSelectionContainer"><apiName>removeSelectionContainer</apiName><shortdesc>
		 Supprime l’objet flash.display.DisplayObjectContainer qui contient des formes de sélection (telles que la mise en surbrillance de la sélection de bloc, un curseur, etc.) </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selectionContainer</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Objet <codeph>Flash.display.DisplayObjectContainer</codeph> à supprimer 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Supprime l’objet <codeph>flash.display.DisplayObjectContainer</codeph> qui contient des formes de sélection (telles que la mise en surbrillance de la sélection de bloc, un curseur, etc.). L’implémentation par défaut de cette méthode, qui peut être remplacée, supprime l’objet de son parent s’il existe. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.DisplayObjectContainer.xml"><linktext>flash.display.DisplayObjectContainer</linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:removeTextLine"><apiName>removeTextLine</apiName><shortdesc>
		 Supprime un objet flash.text.engine.TextLine de son parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>l’objet <codeph>flash.text.engine.TextLine</codeph> à supprimer 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Supprime un objet <codeph>flash.text.engine.TextLine</codeph> de son parent. L’implémentation par défaut de cette méthode, qui peut être remplacée, supprime l’objet de <codeph>container</codeph> s’il est un enfant direct de ce dernier. Cette méthode peut être appelée même si l’objet n’est pas un descendant de <codeph>container</codeph>. Les implémentations de cette méthode doivent s’assurer qu’aucune action n’est effectuée dans ce cas. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link><link href="flashx.textLayout.container.xml#ContainerController/container"><linktext>container</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:scrollToRange"><apiName>scrollToRange</apiName><shortdesc> 
		 Fait défiler afin que la plage du texte soit visible dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>L’extrémité de la sélection modifiée lorsque vous développez la sélection. Il peut s’agir du début ou de la fin de la sélection, exprimé sous la forme d’un décalage à partir du début de l’enchaînement de texte. 
		 </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>  	La fin stable de la sélection lorsque vous développez la sélection. Il peut s’agir du début ou de la fin de la sélection. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Fait défiler afin que la plage du texte soit visible dans le conteneur. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:selectRange"><apiName>selectRange</apiName><shortdesc> 
		 Définit la plage du texte sélectionné dans un composant implémentant ITextSupport. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>Valeur d’index de base zéro du caractère à l’extrémité d’ancrage de la sélection 
		 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>Valeur d’index de base zéro du caractère à l’extrémité active de la sélection.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Définit la plage du texte sélectionné dans un composant qui implémente ITextSupport. Si l’un des arguments est hors limites la sélection ne doit pas être modifiée. Les composants qui souhaitent prendre en charge l’IME en ligne doivent appeler cette méthode. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setCompositionSize"><apiName>setCompositionSize</apiName><shortdesc> 
		 Définit la largeur et la hauteur autorisées du texte dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>La largeur en pixels disponible pour le texte dans le conteneur. 
		 </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>La hauteur en pixels disponible pour le texte dans le conteneur. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Définit la largeur et la hauteur autorisées du texte dans le conteneur.  
		 
		 </apiDesc><example conref="examples\ContainerController_setCompositionSizeExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:setStyle"><apiName>setStyle</apiName><shortdesc> 
		Définit la valeur du style spécifié par le paramètre styleProp sur la valeur spécifiée par le paramètre newValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Le nom de la propriété de style dont vous voulez définir la valeur. 
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>La valeur que vous souhaitez affecter à ce style. 
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Définit la valeur du style spécifié par le paramètre <codeph>styleProp</codeph> sur la valeur spécifiée par la paramètre <codeph>newValue</codeph>.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:textInputHandler"><apiName>textInputHandler</apiName><shortdesc> Traite l’événement TextEvent.TEXT_INPUT lorsque le client gère les événements. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:TextEvent"/><apiDesc> L’objet TextEvent. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Traite l’événement <codeph>TextEvent.TEXT_INPUT</codeph> lorsque le client gère les événements.
		 
		 </apiDesc><example conref="examples\ContainerController_textInputHandlerExample.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>TextEvent.TEXT_INPUT</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.container:ContainerController:protected:updateVisibleRectangle"><apiName>updateVisibleRectangle</apiName><shortdesc> 
		 En cas de défilement, définit le rectangle de défilement en fonction du rectangle conteneur afin que toutes les lignes qui ne sont pas entièrement visibles soient découpées dans la zone défilable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 En cas de défilement, définit le rectangle de défilement en fonction du rectangle conteneur afin que toutes les lignes qui ne sont pas entièrement visibles soient découpées dans la zone défilable. En l’absence de défilement, efface le rectangle de défilement afin qu’aucun découpage n’ait lieu. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.container:ContainerController:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Renvoie le premier caractère dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Renvoie le premier caractère dans le conteneur. Si ce n’est pas le premier conteneur dans l’enchaînement, cette valeur est mise à jour lorsque le texte est composé, c’est-à-dire lorsque les méthodes <codeph>compose()</codeph> ou <codeph>updateAllControllers()</codeph> de l’interface IFlowComposer sont appelées.
		 
	 	 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat : spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. Par exemple, si vous définissez <codeph>dominantBaseline</codeph> sur ASCENT, la définition de <codeph>alignmentBaseline</codeph> sur DESCENT aligne le haut du texte sur la ligne de base DESCENT ou sous la ligne. Le plus grand élément de la ligne détermine en général les lignes de base. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur USE_DOMINANT_BASELINE. </p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat : valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la cascade). La valeur 0 est complètement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où alpha est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat : couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade). Il peut s’agir de la valeur de la constante <codeph>BackgroundColor.TRANSPARENT</codeph> ou d’une valeur hexadécimale qui spécifie les trois valeurs RVB à 8 bits (rouge, vert, bleu), par exemple, 0xFF0000 est rouge et 0x00FF00 est vert.
		 <p>Les valeurs valides comme chaîne sont flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT et uints de 0x0 à 0xffffffff.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat : valeur de décalage de la ligne de base par rapport à la valeur dominantBaseline. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : valeur de décalage de la ligne de base par rapport à la valeur <codeph>dominantBaseline</codeph>. Les unités sont en pixels, ou un pourcentage de <codeph>fontSize</codeph> (dans ce cas, entrez une valeur de chaîne, comme 140 %). Les valeurs positives décalent la ligne vers le haut pour le texte horizontal (à droite pour le texte vertical) et les valeurs négatives décalent la ligne vers le bas pour le texte horizontal (à gauche pour le texte vertical).  
		 <p>Les valeurs valides sont flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000. </p>
		 <p>Les valeurs en pourcentage sont comprises entre -1000 et 1000. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 0.0. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat : spécifie la progression verticale ou horizontale du positionnement de la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la progression verticale ou horizontale du positionnement de la ligne. Les lignes sont placées de haut en bas (<codeph>BlockProgression.TB</codeph>, pour le texte horizontal) ou de droite à gauche (<codeph>BlockProgression.RL</codeph>, pour le texte vertical). 
		 <p>Les valeurs légales sont flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de TB. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat : contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes. Défini sur <codeph>BreakOpportunity.AUTO</codeph> pour diviser le texte normalement. Défini sur <codeph>BreakOpportunity.NONE</codeph> pour <i>ne pas</i> diviser le texte à moins que le texte ne dépasse la mesure et qu’il n’existe pas d’autres endroits auquel diviser la ligne. Défini sur <codeph>BreakOpportunity.tout</codeph> pour permettre le saut de ligne à n’importe quel endroit, plutôt qu’entre les mots. Défini sur <codeph>BreakOpportunity.ALL</codeph> pour placer chaque groupe typographique sur une ligne distincte (utile pour le texte d’un chemin). 
		 <p>Les valeurs valides sont flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat : type de repère CFF utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : type de repère CFF utilisé pour ce texte. Les repères CFF déterminent si l’exécution de Flash force les souches horizontales fortes à intégrer une grille de sous-pixels ou non. Cette propriété s’applique uniquement si la propriété <codeph>renderingMode</codeph> est définie sur <codeph>RenderingMode.CFF</codeph> et que la police est intégrée (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>). Sur des écrans de petite taille, les repères produisent un texte clair et lisible pour les lecteurs humains.
		 <p>Les valeurs valides sont flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur HORIZONTAL_STEM. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat : couleur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : couleur du texte. Un nombre hexadécimal qui spécifie trois valeurs 8 bits RVB (rouge, vert, bleu) ; par exemple, 0xFF0000 correspond au rouge et 0x00FF00 au vert.  
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat : nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). Le numéro de la colonne prévaut sur les autres paramètres de la colonne. La valeur est un nombre entier ou <codeph>FormatValue.AUTO</codeph> si elle n’est pas spécifiée. Si le compte <codeph>columnCount</codeph> n’est pas spécifié, la largeur <codeph>columnWidth</codeph> est utilisée pour créer autant de colonnes que le conteneur peut en contenir. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et ints de 1 à 50.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat : spécifie la quantité d’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). La valeur est un nombre 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnState:get"><apiName>columnState</apiName><shortdesc> 
		 Renvoie un objet ColumnState, qui décrit le nombre et les caractéristiques des colonnes dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ColumnState</apiValueClassifier></apiValueDef><apiDesc> 
		 Renvoie un objet ColumnState, qui décrit le nombre et les caractéristiques des colonnes dans le conteneur. Ces valeurs sont mises à jour lorsque le texte est recomposé, consécutivement à l’interface <codeph>IFlowComposer.compose()</codeph> ou <codeph>IFlowComposer.updateAllControllers()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ColumnState"><linktext>ColumnState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat : largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Si vous spécifiez la largeur des colonnes, mais pas le nombre, l’objet TextLayout va créer autant de colonnes de cette largeur que possible, à partir des paramètres <codeph>columnGap</codeph> et de la largeur du conteneur. Tout espace restant est laissé après la dernière colonne. La valeur est un nombre. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et des nombres de 0 à 8000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionHeight:get"><apiName>compositionHeight</apiName><shortdesc> 
		 Renvoie l’étendue verticale autorisée pour du texte à l’intérieur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Renvoie l’étendue verticale autorisée pour du texte à l’intérieur du conteneur. La valeur est spécifiée en pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize() </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:compositionWidth:get"><apiName>compositionWidth</apiName><shortdesc> 
		 Renvoie l’étendue horizontale autorisée pour le texte à l’intérieur du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Renvoie l’étendue horizontale autorisée pour le texte à l’intérieur du conteneur. La valeur est spécifiée en pixels.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/setCompositionSize()"><linktext>setCompositionSize()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Renvoie une occurrence de l’interface ITextLayoutFormat avec les attributs appliqués à ce conteneur, y compris les attributs hérités de son élément racine. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Renvoie une occurrence de l’interface ITextLayoutFormat avec les attributs appliqués à ce conteneur, y compris les attributs hérités de son élément racine. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/rootElement"><linktext>rootElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:container:get"><apiName>container</apiName><shortdesc> 
		 Renvoie l’objet d’affichage du conteneur qui contient les lignes de texte pour cette occurrence ContainerController. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc> 
		 Renvoie l’objet d’affichage du conteneur qui contient les lignes de texte pour cette occurrence de l’objet ContainerController.  
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController/ContainerController()"><linktext>ContainerController()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Renvoie les styles coreStyles sur cet objet ContainerController. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Renvoie les styles <codeph>coreStyles</codeph> sur cet objet ContainerController. Notez que le getter effectue une copie du dictionnaire de styles principaux. L’objet coreStyles encapsule ces formats qui sont définis par le paramètre TextLayoutFormat. L’objet <codeph>coreStyles</codeph> se compose d’un ensemble de paires <i>nom de style-valeur</i>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat : le type de casse de chiffres utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : le type de casse de chiffres utilisée pour ce texte. La définition de la valeur sur <codeph>DigitCase.OLD_STYLE</codeph> se rapproche de l’alphabet en minuscules avec différents jambages ascendants et descendants. Les chiffres sont espacés proportionnellement. Ce style n’est disponible que dans les caractères sélectionnés, le plus souvent dans une police supplémentaire ou spéciale. Le paramètre <codeph>DigitCase.LINING</codeph> a une hauteur en majuscules et est généralement à espacement fixe pour s’aligner dans les graphiques. <p><adobeimage alt="digitCase " href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat : type de largeur de chiffres utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : type de largeur de chiffres utilisée pour ce texte. La valeur peut être <codeph>DigitWidth.PROPORTIONAL</codeph>, ce qui est la meilleure approche pour les nombres individuels, ou <codeph>DigitWidth.TABULAR</codeph>, qui est recommandé pour les nombres inclus dans les tableaux, diagrammes et lignes verticales. <p><adobeimage alt="digitWidth " href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat : spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte. Ordre de lecture de gauche à droite, comme dans les scripts de style latin, ou de droite à gauche, comme en arabe ou en hébreu. Cette propriété affecte également le sens de la colonne lorsqu’elle est appliquée au niveau du conteneur. Les colonnes peuvent se lire de gauche à droite ou de droite à gauche, exactement comme du texte. Voici quelques exemples :<p><adobeimage alt="sens" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur LTR. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat : spécifie la ligne de base de l’élément s’alignant sur alignmentBaseline pour déterminer la position verticale de l’élément sur la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la ligne de base de l’élément s’alignant sur le <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. La valeur <codeph>TextBaseline.AUTO</codeph> sélectionne la ligne de base dominante en fonction de la propriété <codeph>locale</codeph> du paragraphe parent. Pour le chinois et le japonais, la valeur de ligne de base sélectionnée est <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph> ; pour tous les autres, il s’agit de <codeph>TextBaseline.ROMAN</codeph>. Ces choix de base sont déterminés par le choix de police et la taille de police. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat : spécifie la position de ligne de base de la première ligne du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la position de ligne de base de la première ligne du conteneur. La ligne de base à laquelle cette propriété fait référence dépend du niveau du conteneur local. Pour le chinois et le japonais, la valeur est <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph> et pour toutes les autres langues, la valeur est <codeph>TextBaseline.ROMAN</codeph> La valeur du décalage entre l’encart supérieur (ou l’encart droit si la valeur de <codeph>blockProgression</codeph> est RL) du conteneur et la ligne de base de la première ligne peut être <codeph>BaselineOffset.ASCENT</codeph>, c’est-à-dire égale à la hauteur de la ligne,<codeph>BaselineOffset.LINE_HEIGHT</codeph>, c’est-à-dire égale à la hauteur de cette première ligne, ou n’importe quel nombre de valeur fixe pour indiquer une distance absolue. <codeph>BaselineOffset.AUTO</codeph> aligne la hauteur de la ligne sur l’encart supérieur du conteneur.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT, et les nombres de 1 à 1000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> 
		 Renvoie l’objet de composition d’enchaînement qui compose et souligne le texte dans le conteneur qui est géré par le contrôleur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> 
		 Renvoie l’objet de composition d’enchaînement qui compose et souligne le texte dans le conteneur qui est géré par le contrôleur.  
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat : nom de la police à utiliser, ou liste de noms de police séparés par une virgule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nom de la police à utiliser, ou liste de noms de police séparés par une virgule. Pour le rendu de l’élément, le moteur d’exécution Flash sélectionne la première police disponible dans la liste. Par exemple Arial, Helvetica, _sans oblige le lecteur à rechercher Arial, puis Helvetica si Arial est introuvable, puis _sans lorsque ces deux polices sont introuvables.
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura pour valeur Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat : recherche de police à utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : recherche de police à utiliser. Si vous spécifiez <codeph>FontLookup.DEVICE</codeph>, les polices installées sur le système qui utilise le fichier SWF sont utilisées. Les polices de périphérique donnent la taille des fichiers d’animation, mais le texte n’est pas toujours restitué de la même façon selon les systèmes et plates-formes. Si vous spécifiez <codeph>FontLookup.EMBEDDED_CFF</codeph>, des polices vectorielles incorporées dans le fichier SWF publié sont utilisées. Les polices intégrées augmentent la taille du fichier SWF (parfois nettement), mais le texte est systématiquement affiché dans la police choisie. 
		 <p>Les valeurs valides sont flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEVICE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat : taille du texte en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : taille du texte en pixels. 
		 <p>Les valeurs valides sont des nombres compris entre 1 et 720 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 12. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat : style du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : style du texte. Peut être <codeph>FontPosture.NORMAL</codeph>, à utiliser en texte brut, ou <codeph>FontPosture.ITALIC</codeph> pour l’italique. Cette propriété s’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat : épaisseur du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : épaisseur du texte. Peut être <codeph>FontWeight.NORMAL</codeph> pour une utilisation en texte brut ou <codeph>FontWeight.BOLD</codeph>. S’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:format:get"><apiName>format</apiName><shortdesc> 
		 Stocke l’objet ITextLayoutFormat qui contient les attributs de ce conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Stocke l’objet ITextLayoutFormat qui contient les attributs de ce conteneur. Le contrôleur hérite les propriétés du conteneur du TextFlow dont il fait partie. Cette propriété permet aux différents contrôleurs dans le même enchaînement de texte d’avoir, par exemple, différents paramètres ou marges de colonne. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc> 
		 Spécifie les règles de défilement horizontal, que vous pouvez définir en affectant l’une des constantes de la classe ScrollPolicy : ON, OFF ou AUTO. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Spécifie les règles de défilement horizontal, que vous pouvez définir en affectant l’une des constantes de la classe ScrollPolicy : ON, OFF ou AUTO. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc> Spécifie l’emplacement de défilement horizontal actuel sur la scène. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Spécifie l’emplacement de défilement horizontal actuel sur la scène. La valeur spécifie le nombre de pixels à partir de la gauche. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:interactionManager:get"><apiName>interactionManager</apiName><shortdesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc conref="flashx.textLayout.elements.TextFlow#interactionManager"> 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/interactionManager"><linktext>flashx.textLayout.elements.TextFlow.interactionManager</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat : règle utilisée pour justifier le texte dans un paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : règle utilisée pour justifier le texte dans un paragraphe. La valeur par défaut, <codeph>FormatValue.AUTO</codeph>, justifie le texte en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour toutes les langues, sauf le japonais et le chinois, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustificationRule.SPACE</codeph>, qui ajoute un espace supplémentaire aux caractères d’espace. Pour le chinois et le japonais, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustficationRule.EAST_ASIAN</codeph>. La justification change partiellement l’espacement de la ponctuation. Dans un texte en caractères romains, la virgule et les points japonais prennent une largeur de caractère complète, mais seulement la moitié de cette largeur dans un texte en caractères asiatiques. Par ailleurs, dans le texte en caractères asiatiques, l’espacement entre les signes de ponctuation séquentielle se rapproche, obéissant ainsi aux conventions typographiques asiatiques traditionnelles. Notez également, dans l’exemple ci-après, l’interligne qui est appliqué à la deuxième ligne des paragraphes. Dans la version asiatique, les deux dernières lignes sont décalées à gauche. Dans la version en caractères romains, la deuxième ligne et les lignes suivantes sont décalées à gauche. <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat : style utilisé pour la justification du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : style utilisé pour la justification du paragraphe. Utilisé uniquement en combinaison avec <codeph>JustificationRule.EAST_ASIAN</codeph> comme paramètre <codeph>justificationRule</codeph>. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue sur <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> pour toutes les langues. Les constantes définies par la classe JustificationStyle spécifient les options de gestion des caractères kinsoku, c’est-à-dire des caractères japonais qui ne peuvent pas s’afficher au début ou à la fin d’une ligne. Pour obtenir un texte plus étiré, spécifiez <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Si vous souhaitez un comportement similaire à celui obtenu avec le paramètre <codeph>justificationRule</codeph> de la règle <codeph>JustificationRule.SPACE</codeph>, utilisez <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Les valeurs valides sont flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat : le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. Le crénage est pris en charge pour toutes les polices qui disposent de tables de crénage.
		 <p>Les valeurs valides sont flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat : spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. La base d’interlignage est la ligne de base à laquelle la propriété <codeph>lineHeight</codeph> fait référence. Le sens de l’interlignage détermine si la propriété <codeph>lineHeight</codeph> fait référence à la distance de la ligne de base d’une ligne par rapport à celle de la ligne précédente ou suivante. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour le chinois et le japonais, il s’agit de <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> et pour tous les autres, il s’agit de <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat : contrôle laquelle des ligatures qui sont définies dans la police peut être utilisée dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôle laquelle des ligatures qui sont définies dans la police peut être utilisée dans le texte. Les ligatures qui s’affichent pour chacun de ces paramètres dépendent de la police. Une ligature se produit lorsque plusieurs formes de lettres sont unies dans un seul glyphe. Les ligatures remplacent généralement des caractères consécutifs partageant des composants communs, par exemple les paires de lettres « fi », « fl » ou « ae ». Elles sont utilisées avec les jeux de caractères latins et non latins. Les ligatures activées par les valeurs de la classe LigatureLevel, <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, et <codeph>EXOTIC</codeph>, sont cumulables. Chaque valeur active un nouvel ensemble de ligatures, mais comprend également ceux des types précédents. <p><b>Remarque :</b> lorsque vous utilisez les polices Arabic ou Syriac, <codeph>ligatureLevel</codeph> doit être défini sur MINIMUM ou une valeur supérieure.</p><p><adobeimage alt="ligatureLevel " href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Les valeurs valides sont flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COMMON. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat : contrôle le retour à la ligne dans le conteneur (adopte la valeur par défaut si undefined pendant cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôle le retour à la ligne des mots dans le conteneur (adopte la valeur par défaut si undefined pendant la propagation en cascade). Le texte du conteneur peut être défini pour s’adapter à la largeur du conteneur (<codeph>LineBreak.TO_FIT</codeph>) ou pour aller à la ligne uniquement lors de caractères de retour chariot ou de saut de ligne (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Les valeurs valides sont flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat : contrôles d’interlignage pour le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôles d’interlignage pour le texte. La distance entre la ligne de base de la ligne précédente ou suivante (en fonction de <codeph>LeadingModel</codeph>) et la ligne de base de la ligne actuelle est égale à la quantité maximale de l’interlignage appliquée à n’importe quel caractère de la ligne. Il s’agit d’un nombre ou d’un pourcentage. Si vous spécifiez un pourcentage, entrez une valeur de chaîne, telle que 140 %. <p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Les valeurs numériques valides sont comprises entre -720 et 720.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 120 %. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat : si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : si la valeur est <codeph>true</codeph>, applique le style de formatage barré, une ligne au milieu du texte. 
		 <p>Les valeurs valides sont définies sur true, false et flashx.textLayout.formats.FormatValue.INHERIT. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur false. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat : paramètres régionaux du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : paramètres régionaux du texte. Contrôle les transformations de casse et de forme. Les identifiants de langue standard tels que décrits dans la norme technique Unicode #35 sont utilisés. Par exemple en, en_US et en-US correspondent à l’anglais, ja au japonais. 
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur en. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat : encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord inférieur du conteneur et le texte. La valeur est un nombre.  <p> Avec le texte horizontal, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace au bas du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge. </p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat : encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord gauche du conteneur et le texte. La valeur est un nombre. <p> Avec le texte vertical, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace à la fin du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge.</p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat : encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord droit du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat : encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord supérieur du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. Fait référence au bord droit dans un texte rédigé de gauche à droite et au bord gauche dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat : un nombre qui spécifie la quantité d’espace, en pixels, à laisser après le paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui spécifie la quantité d’espace, en pixels, à laisser après le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceBefore</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat : nombre qui spécifie la quantité d’espace, en pixels, à conserver avant le paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui spécifie la quantité d’espace, en pixels, à conserver avant le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceAfter</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord du début du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord du début du paragraphe. Fait référence au bord gauche dans un texte rédigé de gauche à droite et au bord droit dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat : mode de rendu utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : mode de rendu utilisé pour ce texte. S’applique uniquement aux polices incorporées (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Les valeurs valides sont flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur CFF. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Renvoie l’élément racine qui s’affiche dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Renvoie l’élément racine qui s’affiche dans le conteneur. L’élément racine peut être une occurrence DivElement ou TextFlow, par exemple. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>flashx.textLayout.elements.ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>flashx.textLayout.elements.DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat : spécifie les taquets de tabulation associés au paragraphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie les taquets de tabulation associés au paragraphe. Les accesseurs Set peuvent contenir un tableau de flashx.textLayout.formats.TabStopFormat, une représentation sous forme de chaîne condensée, une valeur undefined ou <codeph>FormatValue.INHERIT</codeph>. La représentation sous forme de chaîne condensée est toujours convertie en tableau d’objets flashx.textLayout.formats.TabStopFormat. <p>Le format basé sur une chaîne est une liste de taquets de tabulation, où chaque taquet de tabulation est délimité par un ou plusieurs espaces. </p><p>Un taquet de tabulation prend la forme suivante : &lt;type d’alignement>&lt;position d’alignement>|&lt;symbole d’alignement>.</p><p>Le type d’alignement est un caractère unique. Il peut s’agir des caractères S, E, C ou D (ou des équivalents minuscules). S ou s correspond à start, E ou e à end, C ou c à center, D ou d à decimal. Le type d’alignement est facultatif. S’il n’est pas spécifié, sa valeur est par défaut S. </p><p>La position d’alignement est un nombre qui est spécifié conformément aux spécifications FXG des nombres (notation décimale ou scientifique). La position d’alignement est obligatoire. </p><p>La barre verticale permet de séparer la position d’alignement du symbole d’alignement, et elle ne doit être présente que si le symbole d’alignement est présent. </p><p> Le symbole d’alignement est facultatif si l’alignement est de type D et ne doit pas être présent si le type d’alignement est autre que D. Le symbole d’alignement peut se composer de n’importe quelle séquence de caractères se terminant par l’espace qui met fin au taquet de tabulation (pour le dernier taquet de tabulation, l’espace de fin est facultatif ; la fin du symbole d’alignement étant implicite). Un espace peut faire partie du symbole d’alignement s’il s’accompagne d’une barre oblique inverse (\). Une barre oblique inverse peut faire partie du symbole d’alignement si elle est convertie avec une autre barre oblique inverse (\\). Si l’alignement est de type D et que le symbole d’alignement n’est pas spécifié, il prendra la valeur null par défaut. </p><p>Si aucun taquet de tabulation n’est spécifié, l’action par défaut de la tabulation est la fin de la ligne. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur null. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat : alignement de la dernière (ou unique ligne dans le paragraphe par rapport au conteneur dans un texte justifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : alignement de la dernière (ou de l’unique) ligne du paragraphe par rapport au conteneur dans un texte justifié. Si la propriété <codeph>textAlign</codeph> est définie sur <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> indique la façon dont la dernière ligne (ou la ligne unique s’il s’agit d’un seul bloc de lignes) est alignée. Les valeurs sont similaires à <codeph>textAlign</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat : alignement des lignes du paragraphe par rapport au conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : alignement des lignes du paragraphe par rapport au conteneur. <codeph>TextAlign.LEFT</codeph> aligne les lignes le long du bord gauche du conteneur. <codeph>TextAlign.RIGHT</codeph> les aligne sur le bord droit. <codeph>TextAlign.CENTER</codeph> positionne la ligne à distance égale entre les bords gauche et droit. <codeph>TextAlign.JUSTIFY</codeph> répartit les lignes afin qu’elles remplissent l’espace. <codeph>TextAlign.START</codeph> équivaut à définir gauche dans du texte de gauche à droite ou droite dans du texte de droite à gauche. <codeph>TextAlign.END</codeph> revient à spécifier la droite pour un texte écrit de gauche à droite, ou à spécifier la gauche pour un texte écrit de droite à gauche.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat : valeur alpha (transparence) du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : valeur alpha (transparence) du texte. La valeur 0 est entièrement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où <codeph>textAlpha</codeph> est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 1. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat : décoration du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : décoration du texte. Permet d’appliquer un soulignement. Par défaut, aucun soulignement n’est appliqué. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NONE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		 Renvoie l’objet TextFlow dont le contenu s’affiche dans le conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		 Renvoie l’objet TextFlow dont le contenu s’affiche dans le conteneur. Soit les valeurs <codeph>textFlow</codeph> et <codeph>rootElement</codeph> sont les mêmes, soit il s’agit de l’objet TextFlow de l’élément racine. Par exemple, si l’élément racine du conteneur est une classe DivElement, la valeur est l’objet TextFlow auquel appartient la classe DivElement. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat : nombre qui indique la quantité, en pixels, pour mettre en retrait la première ligne du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui indique la quantité, en pixels, pour mettre en retrait la première ligne du paragraphe. Une valeur de retrait négative pousse la ligne dans la marge, et probablement en dehors du conteneur. 
		 <p>Les valeurs valides sont des nombres compris entre -1000 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat : spécifie des options de justification de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie des options de justification de texte. La valeur par défaut est <codeph>TextJustify.INTER_WORD</codeph>, ce qui signifie qu’un espace supplémentaire est ajouté aux espaces. <codeph>TextJustify.DISTRIBUTE</codeph> ajoute un espace supplémentaire aux espaces et entre chaque lettre. A utiliser uniquement en combinaison avec une valeur <codeph>justificationRule</codeph> de <codeph>JustificationRule.SPACE</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur INTER_WORD. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textLength:get"><apiName>textLength</apiName><shortdesc> Renvoie le nombre total de caractères dans le conteneur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Renvoie le nombre total de caractères dans le conteneur. Il peut s’agir de texte qui n’est pas actuellement dans affiché, si le conteneur est déroulant. Cette valeur est mise à jour lorsque le texte est composé (lorsque les méthodes de composition <codeph>compose()</codeph> ou <codeph>updateAllControllers()</codeph> de l’interface IFlowComposer sont appelées).
		 
	 	 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat : détermine le nombre de degrés de rotation de ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : détermine le nombre de degrés de rotation de ce texte. 
		 <p>Les valeurs valides sont flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à gauche de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à gauche de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingLeft</codeph> est ajoutée aux valeurs dans la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingLeft</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à droite de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à droite de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingRight</codeph> est ajoutée aux valeurs dans la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingRight</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat : le type de casse typographique utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : le type de casse typographique utilisée pour ce texte. Voici quelques exemples :<p><adobeimage alt="typographicCase " href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:userStyles:get"><apiName>userStyles</apiName><shortdesc> 
		 L’objet userStyles pour une occurrence ContainerController. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> 
		 L’objet <codeph>userStyles</codeph> pour une occurrence ContainerController. Le getter effectue une copie de l’objet <codeph>userStyles</codeph>, qui est un ensemble de paires <i>nom de style-valeur</i>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat : alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). Indique la façon dont les éléments TextFlow s’alignent dans le conteneur.
		 <p>Les valeurs valides sont flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc> Spécifie les règles de défilement vertical que vous pouvez définir en affectant l’une des constantes de la classe ScrollPolicy : ON, OFF ou AUTO. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> Spécifie les règles de défilement vertical que vous pouvez définir en affectant l’une des constantes de la classe ScrollPolicy : ON, OFF ou AUTO. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ScrollPolicy"><linktext>ScrollPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc> Indique l’emplacement du défilement vertical sur la scène. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> Indique l’emplacement du défilement vertical sur la scène. La valeur spécifie le nombre de pixels à partir du haut. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.container:ContainerController:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat : réduit ou conserve les espaces lors de l’importation de texte dans un TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : réduit ou conserve les espaces lors de l’importation de texte dans un TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> conserve tous les espaces. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> supprime les nouvelles lignes, les tabulations et l’interlignage ou les espaces dans un bloc de texte importé. Les caractères de balise de saut de ligne () et de séparateur de ligne Unicode sont conservés. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COLLAPSE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.container:ContainerController:containerControllerInitialFormat:set"><apiName>containerControllerInitialFormat</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>