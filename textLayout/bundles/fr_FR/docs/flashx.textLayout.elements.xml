<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.elements"><apiName>flashx.textLayout.elements</apiName><apiDetail/><apiClassifier id="flashx.textLayout.elements:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> Classe de base pour les objets FlowElement qui s’affichent au plus bas niveau de la hiérarchie du flux. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> Classe de base pour les objets FlowElement qui s’affichent au plus bas niveau de la hiérarchie du flux. Les objets FlowLeafElement n’ont pas d’enfants et comportent des objets InlineGraphicElement et SpanElement. 
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowLeafElement:FlowLeafElement"><apiName>FlowLeafElement</apiName><shortdesc> 
		 Classe de base : appeler un nouvel objet FlowLeafElement() renvoie une erreur d’exception. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		 Classe de base : appeler un nouvel objet FlowLeafElement() renvoie une erreur d’exception.  
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getComputedFontMetrics"><apiName>getComputedFontMetrics</apiName><shortdesc> Renvoie l’objet FontMetrics pour la plage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>les mesures de police associées à la plage 
		 </apiDesc><apiType value="flash.text.engine:FontMetrics"/></apiReturn></apiOperationDef><apiDesc> Renvoie l’objet FontMetrics pour la plage. Les propriétés de l’objet FontMetrics décrivent la valeur emBox, la position et l’épaisseur du barré et la position et l’épaisseur du soulignement pour la police spécifiée.  
		 
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.FontMetrics.xml"><linktext>flash.text.engine.FontMetrics</linktext></link><link href="" invalidHref="flash.text.engine.xml#ElementFormat/getFontMetrics"><linktext>flash.text.engine.ElementFormat.getFontMetrics</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getNextLeaf"><apiName>getNextLeaf</apiName><shortdesc>
		 Renvoie le prochain objet FlowLeafElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>objet FlowLeafElement suivant ou null si à la fin 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Spécifie la classe FlowGroupElement sur la dernière feuille de laquelle cesser la recherche. Une valeur null (par défaut) induit que la recherche se poursuit jusqu’à ce que n’y ait plus d’autre élément. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Renvoie le prochain objet FlowLeafElement.   
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getNextLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowLeafElement:getPreviousLeaf"><apiName>getPreviousLeaf</apiName><shortdesc>
		 Renvoie l’objet FlowLeafElement précédent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>élément leafElement précédent ou null si à la fin 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>limitElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Spécifie la classe FlowGroupElement sur la première feuille de laquelle la recherche sera stoppée. null (par défaut) signifie que la recherche se poursuit jusqu’à ce qu’il n’y ait plus d’autre élément. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Renvoie l’objet FlowLeafElement précédent.   
		 
		 </apiDesc><example conref="examples\FlowLeafElement_getPreviousLeafExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowLeafElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Les attributs de format de caractère calculés qui sont appliqués à cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Les attributs de format de caractère calculés qui sont appliqués à cet élément. Prend en compte l’héritage des attributs. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowLeafElement:text:get"><apiName>text</apiName><shortdesc>
		 Le texte associé à l’objet FlowLeafElement : la valeur de la sous-classe SpanElement est un caractère inférieur à la valeur textLength s’il s’agit de la dernière plage d’un objet ParagraphElement. La valeur de la sous-classe BreakElement est U+2028. La valeur de la sous-classe TabElement est une tabulation. La valeur de la sous-classe InlineGraphicElement est U+FDEF 
		 
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 Le texte associé à l’objet FlowLeafElement : 
		 <p><ul>
		 <li>La valeur associée à la sous-classe SpanElement est un caractère inférieur à la valeur <codeph>textLength</codeph> s’il s’agit de la dernière plage d’un objet ParagraphELement.</li>
		 <li>La valeur de la sous-classe BreakElement est un U+2028</li>
		 <li>La valeur de la sous-classe TabElement est une tabulation </li>
		 <li>La valeur de la sous-classe InlineGraphicElement est U+FDEF</li>
		 </ul></p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#SpanElement/replaceText()"><linktext>flashx.textLayout.elements.SpanElement.replaceText()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc> La classe SpecialCharacterElement est une classe de base abstraite pour les éléments qui représentent des caractères spéciaux. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:SpanElement</apiBaseClassifier></apiClassifierDef><apiDesc> La classe SpecialCharacterElement est une classe de base abstraite pour les éléments qui représentent des caractères spéciaux. 
	 
	 <p>Vous ne pouvez pas créer un objet SpecialCharacterElement directement. Appeler une nouvelle classe <codeph>SpecialCharacterElement()</codeph> renvoie une exception d’erreur.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#BreakElement"><linktext>BreakElement</linktext></link><link href="flashx.textLayout.elements.xml#TabElement"><linktext>TabElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpecialCharacterElement:SpecialCharacterElement"><apiName>SpecialCharacterElement</apiName><shortdesc>  
		 Classe de base : appeler une nouvelle classe SpecialCharacterElement() renvoie une exception d’erreur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>  
		 Classe de base : appeler une nouvelle classe <codeph>SpecialCharacterElement()</codeph> renvoie une exception d’erreur.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElementStatus"><apiName>InlineGraphicElementStatus</apiName><shortdesc> La classe InlineGraphicElementStatus définit un ensemble de constantes permettant de vérifier la valeur de InLineGraphicElement.status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> La classe InlineGraphicElementStatus définit un ensemble de constantes permettant de vérifier la valeur de <codeph>InLineGraphicElement.status</codeph>.
     
     </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/status"><linktext>InlineGraphicElement.status</linktext></link></related-links><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:ERROR"><apiName>ERROR</apiName><shortdesc> Une erreur s’est produite pendant le chargement d’un graphique référencé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc> Une erreur s’est produite pendant le chargement d’un graphique référencé.  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOADING"><apiName>LOADING</apiName><shortdesc> La charge a été lancée (mais pas terminée) sur un élément graphique qui est une URL. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc> La charge a été lancée (mais pas terminée) sur un élément graphique qui est une URL.   
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:LOAD_PENDING"><apiName>LOAD_PENDING</apiName><shortdesc> L’élément graphique est une URL qui n’a pas été chargée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loadPending</apiData><apiType value="String"/></apiValueDef><apiDesc> L’élément graphique est une URL qui n’a pas été chargée.   
    	 
    	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:READY"><apiName>READY</apiName><shortdesc> Le graphique est entièrement chargé et correctement dimensionné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc> Le graphique est entièrement chargé et correctement dimensionné.  
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElementStatus:SIZE_PENDING"><apiName>SIZE_PENDING</apiName><shortdesc> 
         L’élément graphique avec des valeurs de largeur/hauteur automatique ou en pourcentage a terminé son chargement mais n’a pas été recomposé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sizePending</apiData><apiType value="String"/></apiValueDef><apiDesc> 
         L’élément graphique avec des valeurs de largeur/hauteur automatique ou en pourcentage a terminé son chargement mais n’a pas été recomposé. A la prochaine recomposition, la taille réelle de l’élément graphique est calculée.  
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextFlow"><apiName>TextFlow</apiName><shortdesc>
	 La classe TextFlow est chargée de gérer tout le contenu de texte d’un article. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc>
	 La classe TextFlow est chargée de gérer tout le contenu de texte d’un article. Dans la mise en forme TextLayout, le texte est stocké dans une arborescence hiérarchique d’éléments. L’objet TextFlow est l’objet racine de l’arborescence d’élément. Tous les éléments de l’arborescence dérivent de la classe de base, FlowElement.  
	 
	 <p>Un objet TextFLow peut avoir des objets ParagraphElement et DivElement comme enfants. Une balise div (objet DivElement) représente un groupe de paragraphes (objets ParagraphElement). Un paragraphe peut comprendre des objets SpanElement, InlineGraphicElement, LinkElement, and TCYElement comme enfants. </p>
	 
	 <p>Une plage (SpanElement) est une plage de texte dans un paragraphe qui possède les mêmes attributs. Une image (classe InlineGraphicElement) représente un graphique arbitraire qui s’affiche sous la forme d’un seul caractère dans une ligne de texte. Un objet LinkElement représente un hyperlien ou <codeph>une</codeph> balise HTML et peut contenir plusieurs plages. Un objet TCYElement est utilisé dans un texte japonais lorsqu’il existe un petit segment de texte qui s’affiche perpendiculairement à la ligne, comme dans un horizontale au sein d’une ligne verticale. Un objet TCYElement peut également contenir plusieurs plages. </p>
	 
	 <p>L’objet TextFlow dérive également de la classe ContainerFormattedElement, qui est la classe racine pour tous les éléments de bloc de niveau conteneur. </p>
 	 <p>L’illustration suivante présente la relation des autres éléments, tels que les plages et paragraphes, à l’objet TextFlow. </p>
 	 <p><adobeimage alt="exemple de hiérarchie d’objet TextFlow" href="../../../images/textLayout_textFlowHierarchy.gif"/></p>
 	 
 	 <p>Chaque objet TextFlow a un objet de configuration correspondant qui vous permet de spécifier le caractère initial et les formats de paragraphe et le format de conteneur initial. Il permet aussi de spécifier les attributs de la sélection, les liens, le focus, et le défilement. Lorsque vous fournissez un objet de configuration comme paramètre au constructeur de l’objet <codeph>TextFlow()</codeph> , il crée un instantané en lecture seule auquel vous pouvez accéder via la propriété <codeph>TextFlow.configuration</codeph>. Après sa création, vous ne pouvez pas changer la configuration de l’objet TextFlow. Si vous ne spécifiez pas une configuration, vous pouvez accéder à la configuration par défaut à l’aide de la propriété <codeph>TextFlow.defaultConfiguration</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextFlowExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#IConfiguration"><linktext>IConfiguration</linktext></link><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.UpdateCompleteEvent_updateComplete"><apiName>updateComplete</apiName><shortdesc> Distribué par un objet TextFlow chaque fois qu’un conteneur a reçu de nouvelles classes DisplayObject ou a été mis à jour suite à la composition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.UpdateCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué par un objet TextFlow à chaque fois qu’un conteneur a reçu de nouvelles classes DisplayObjets ou que ces classes ont été mises à jour consécutivement à la composition. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.DamageEvent_damage"><apiName>damage</apiName><shortdesc> Distribué par un objet TextFlow chaque fois qu’il est endommagé  Vous pouvez utiliser cet événement pour vérifier que l’objet TextFlow a changé, mais pas accéder à l’objet TextFlow lui-même lorsque cet événement est envoyé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.DamageEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué par un objet TextFlow chaque fois qu’il est endommagé. Cet événement peut vous aider à vérifier que l’objet TextFlow a changé, mais pas accéder à l’objet TextFlow lui-même lorsque cet événement est envoyé. Cet événement est envoyé lorsque les modifications de l’objet TextFlow sont partiellement terminées, il peut donc être dans un état inégal : certaines modifications ont déjà été effectuées et d’autres modifications sont toujours en attente. Obtenez les informations nécessaires à partir de l’événement, et effectuez les modifications requises après le retour du contrôle à votre application. 
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.TextLayoutEvent_scroll"><apiName>scroll</apiName><shortdesc> Distribué par un objet TextFlow après que le texte soit déroulé dans un conteneur contrôleur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.TextLayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué par un objet TextFlow après que le texte est déroulé dans un conteneur contrôleur.   
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.StatusChangeEvent_inlineGraphicStatusChanged"><apiName>inlineGraphicStatusChanged</apiName><shortdesc> Distribué lorsqu’une classe InlineGraphicElement est redimensionnée en raison de la largeur ou hauteur automatique ou en pourcentage et après chargement du graphique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.StatusChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsqu’une classe InlineGraphicElement est redimensionnée en raison de la largeur ou hauteur automatique ou en pourcentage et après chargement du graphique.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_click"><apiName>click</apiName><shortdesc> Distribué lorsqu’un lien est activé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsqu’un lien est activé.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOut"><apiName>rollOut</apiName><shortdesc> Distribué lorsque la souris sort de n’importe quel lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque la souris sort de n’importe quel lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_rollOver"><apiName>rollOver</apiName><shortdesc> Distribué lorsque la souris entre pour la première fois dans un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque la souris entre pour la première fois dans un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseMove"><apiName>mouseMove</apiName><shortdesc> Distribué lorsque la souris survole un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque la souris survole un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseUp"><apiName>mouseUp</apiName><shortdesc> Distribué lorsque le bouton de la souris est relâché au-dessus d’un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque le bouton de la souris est relâché au-dessus d’un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowElementMouseEvent_mouseDown"><apiName>mouseDown</apiName><shortdesc> Distribué lorsque l’utilisateur clique sur le bouton de la souris sur un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué lorsque l’utilisateur clique sur le bouton de la souris sur un lien.  
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.CompositionCompleteEvent_compositionComplete"><apiName>compositionComplete</apiName><shortdesc> Distribué à chaque recomposition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.CompositionCompleteEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué à chaque recomposition.  
	
	</apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.SelectionEvent_selectionChange"><apiName>selectionChange</apiName><shortdesc> Distribué chaque fois que la sélection est modifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flashx.textLayout.events.SelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Distribué chaque fois que la sélection est modifiée. Principalement utilisé pour mettre à jour l’interface utilisateur qui dépend de la sélection. Il peut également être utilisé pour modifier la sélection, mais pas pour modifier l’objet TextFlow lui-même.
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE_flowOperationComplete"><apiName>flowOperationComplete</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_COMPLETE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END_flowOperationEnd"><apiName>flowOperationEnd</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_END</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:TextFlow_flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN_flowOperationBegin"><apiName>flowOperationBegin</apiName><shortdesc>
	 
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowOperationEvent.FLOW_OPERATION_BEGIN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 
	  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:TextFlow:TextFlow"><apiName>TextFlow</apiName><shortdesc> 
		 Constructeur : crée une nouvelle occurrence TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>config</apiItemName><apiOperationClassifier>flashx.textLayout.elements:IConfiguration</apiOperationClassifier><apiData>null</apiData><apiDesc>Spécifie la configuration à utiliser pour cet objet TextFlow. Si c’est null, utilisez la configuration <codeph>TextFlow.defaultConfiguration</codeph> pour accéder aux valeurs de configuration. 
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Constructeur : crée une nouvelle occurrence TextFlow. 
		 
		 <p>Si vous fournissez un paramètre <codeph>config</codeph>, le contenu de l’objet de configuration est copié et vous ne pouvez y apporter aucune modification. Vous pouvez accéder aux paramètres de configuration, toutefois, via la propriété.<codeph>configuration</codeph>. Si le paramètre <codeph>config</codeph> est null, vous pouvez accéder aux paramètres de configuration par défaut via la propriété.<codeph>defaultConfiguration</codeph>.</p> 
		 
		 <p>L’objet de configuration fournit un mécanisme permettant de définir les attributs configurables par défaut sur un objet TextFlow. Alors que vous ne pouvez pas modifier l’objet de configuration, vous pouvez remplacer les attributs par défaut, si nécessaire, en définissant les attributs de l’objet TextFlow et ses enfants. </p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/configuration"><linktext>configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextFlow:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementByID"><apiName>getElementByID</apiName><shortdesc> Renvoie un élément dont la propriété de l’id correspond au paramètre idName. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’élément dont l’identifiant correspond au nom <codeph>idName</codeph>.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>idName</apiItemName><apiType value="String"/><apiDesc>La valeur de l’<codeph>id</codeph> de l’élément à chercher.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Renvoie un élément dont la propriété de l’<codeph>id</codeph> correspond au paramètre <codeph>idName</codeph>. Permet d’appliquer un style basé sur l’<codeph>id</codeph>. 
		 
		 <p>Par exemple, la ligne suivante définit le style « color » sur 0xFF0000 (rouge), pour l’élément dont l’<codeph>id</codeph> est span1.</p>
		 
		 <codeblock rev="3.0">
		 textFlow.getElementByID("span1").setStyle("color", 0xFF0000);
		 </codeblock>
		 
		 <p><b>Remarque :</b> dans le code suivant, la valeur <codeph>p.addChild(s)</codeph> <i>removes</i> <codeph>s</codeph> de son parent original et l’ajoute à <codeph>p</codeph>, le nouveau parent.</p>
		 
		 <codeblock rev="3.0">
		 var s:SpanElement = new SpanElement();
		 var p:ParagraphElement = new ParagraphElement();
		 ...
		 s = textFlow.getElementByID("span3") as SpanElement;
		 p.addChild(s);
		 textFlow.addChild(p);
		 </codeblock>
		 
		 </apiDesc><example conref="examples\TextFlow_getElementByIDExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/id"><linktext>FlowElement.id</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:getElementsByStyleName"><apiName>getElementsByStyleName</apiName><shortdesc> Renvoie tous les éléments qui possèdent également un nom de styleName défini sur styleNameValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Un tableau des éléments dont la valeur du <codeph>styleName</codeph> correspond à la valeur <codeph>styleNameValue</codeph>. Par exemple, tous les éléments ayant le nom de style « couleur ». 
		 
		 </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>styleNameValue</apiItemName><apiType value="String"/><apiDesc>Le nom d’identification id pour lequel chercher les éléments l’ayant défini.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Renvoie tous les éléments qui possèdent également un nom <codeph>styleName</codeph> défini sur la valeur <codeph>styleNameValue</codeph>.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/styleName"><linktext>FlowElement.styleName</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:invalidateAllFormats"><apiName>invalidateAllFormats</apiName><shortdesc> Annule toutes les informations de mise en forme pour le et impose un nouveau dessin à être recalculée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> Annule toutes les informations de mise en forme pour l’objet TextFlow et impose un nouveau calcul. Appelez cette méthode lorsque des styles ont été modifiés. 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver/invalidateAll"><linktext>IFormatResolver.invalidateAll</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:TextFlow:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextFlow:defaultConfiguration"><apiName>defaultConfiguration</apiName><shortdesc> Configuration par défaut pour tous les nouveaux objets TextFlow si la configuration n’est pas spécifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiValueClassifier>flashx.textLayout.elements:Configuration</apiValueClassifier></apiValueDef><apiDesc> Configuration par défaut à utiliser pour tous les nouveaux objets TextFlow si la configuration n’est pas spécifiée.  
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:configuration:get"><apiName>configuration</apiName><shortdesc> 
		L’objet Configuration pour cet objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:IConfiguration</apiValueClassifier></apiValueDef><apiDesc> 
		L’objet Configuration pour cet objet TextFlow. L’objet Configuration spécifie le caractère initial et les formats de paragraphe, le format de conteneur initial, et les attributs de mise en surbrillance de sélection, les liens, le focus, et le défilement. 
		
		<p>Si vous ne spécifiez pas d’objet Configuration, Text Layout Framework utilise un objet Configuration par défaut, qui est référencé par la propriété <codeph>defaultConfiguration</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#Configuration"><linktext>Configuration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow/defaultConfiguration"><linktext>defaultConfiguration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:flowComposer:get"><apiName>flowComposer</apiName><shortdesc> Gère les conteneurs pour cet élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:IFlowComposer</apiValueClassifier></apiValueDef><apiDesc> Gère les conteneurs pour cet élément. 
		 
		 <p>Les classes TextLine créées à partir de l’élément apparaissent comme des enfants du conteneur. Le composeur flowComposer gère les conteneurs, et à mesure que le texte est modifié, il ajoute et supprime les lignes depuis les conteneurs. Le composeur flowComposer conserve également la trace de certains attributs critiques, tels que les valeurs de largeur et de hauteur pour composer, si le défilement est activé, et ainsi de suite. </p>
		 
		 <p>Le conteneur et le composeur <codeph>flowComposer</codeph> sont étroitement liés. Si vous rétablissez le composeur <codeph>flowComposer</codeph>, le conteneur est réinitialisé sur le nouveau conteneur du composeur flowComposer. De même si le conteneur est réinitialisé, le composeur <codeph>flowComposer</codeph> est réinitialisé en fonction du nouveau composeur flowComposer du conteneur.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>FlowComposer</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:formatResolver:get"><apiName>formatResolver</apiName><shortdesc> Une fonction de rappel pour la résolution des styles d’éléments. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:IFormatResolver</apiValueClassifier></apiValueDef><apiDesc> Une fonction de rappel pour la résolution des styles d’éléments. Vous pouvez l’utiliser pour fournir le style à l’aide des styles CSS ou nommés, par exemple.  
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#IFormatResolver"><linktext>IFormatResolver</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:generation:get"><apiName>generation</apiName><shortdesc> 
		Le numéro de génération pour cet objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc> 
		Le numéro de génération pour cet objet TextFlow. Les fonctions Annuler et Rétablir des opérations utilisent le numéro de génération pour garantir qu’il est possible d’annuler ou de rétablir une opération. Les numéros de génération doivent correspondre. 
		
		<p>Chaque changement de modèle incrémente la <codeph>generation</codeph> par conséquent, si le numéro de génération change, vous savez quel modèle a changé</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:hostFormat:get"><apiName>hostFormat</apiName><shortdesc> L’objet TextLayoutFormat pour cet objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> L’objet TextLayoutFormat pour cet objet TextFlow. Cela active plusieurs optimisations pour la réutilisation de formats hôtes. Par exemple :
		
		<codeblock>
		textFlowA.hostFormat = textFlowB.hostFormat
		</codeblock>
		
		Vous devez définir les valeurs de format avant d’affecter l’objet TextLayoutFormat au format <codeph>hostFormat</codeph>. Par exemple, les lignes suivantes ne définiront <i>pas</i> la taille de la police sur 24 car la taille de police est définie <i>après</i> que l’objet TextLayoutFormat a été affecté au format <codeph>hostFormat</codeph>.
		
		<codeblock>
		format = new TextLayoutFormat()
		textFlow.hostFormat = format
		format.fontSize = 24;
		</codeblock>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:TextFlow:interactionManager:get"><apiName>interactionManager</apiName><shortdesc>
		 Le gestionnaire InteractionManager associé à cet objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:ISelectionManager</apiValueClassifier></apiValueDef><apiDesc>
		 Le gestionnaire InteractionManager associé à cet objet TextFlow. 
		 <p>Contrôle toutes les sélections et modifications sur le texte. Si l’objet TextFlow n’est pas sélectionnable, le gestionnaire interactionManager est null. Pour que l’objet TextFlow soit modifiable, affectez un gestionnaire interactionManager qui soit à la fois une interface ISelectionManager et une interface IEditManager. Pour qu’un objet TextFlow soit en lecture seule et autorise la sélection, affectez un gestionnaire interaction Manager qui ne soit qu’une interface ISelectionManager.  </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ISelectionManager"><linktext>ISelectionManager</linktext></link><link href="flashx.textLayout.edit.xml#IEditManager"><linktext>IEditManager</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ContainerFormattedElement"><apiName>ContainerFormattedElement</apiName><shortdesc> 
	La classe ContainerFormattedElement est la classe racine pour tous les éléments de blocs au niveau du conteneur, tels que les objets DivElement et TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	La classe ContainerFormattedElement est la classe racine pour tous les éléments de bloc au niveau du conteneur, tels que les objets DivElement et TextFlow. Les éléments de bloc de niveau conteneur sont des éléments de regroupement pour les autres objets FlowElement.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:IFormatResolver"><apiName>IFormatResolver</apiName><shortdesc> Interface pour un résolveur de format. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface pour un résolveur de format. Une implémentation vous permet d’associer un mécanisme de style de votre choix, tels que les styles Flex CSS et les styles nommés, vers un objet TextFlow. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/formatResolver"><linktext>TextFlow.formatResolver</linktext></link></related-links><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:getResolverForNewFlow"><apiName>getResolverForNewFlow</apiName><shortdesc> Renvoie le résolveur de format lorsqu’un objet TextFlow est copié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le résolveur de format pour la copie de l’objet TextFlow. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:IFormatResolver</apiOperationClassifier></apiReturn><apiParam><apiItemName>oldFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam><apiParam><apiItemName>newFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Renvoie le résolveur de format lorsqu’un objet TextFlow est copié. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidateAll"><apiName>invalidateAll</apiName><shortdesc> Invalide les informations de mise en forme mises en cache d’un objet TextFlow pour que le formatage soit recalculé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiParam></apiOperationDef><apiDesc> Invalide les informations de mise en forme mises en cache d’un objet TextFlow pour que le formatage soit recalculé. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:invalidate"><apiName>invalidate</apiName><shortdesc> Invalide les informations de mise en forme mises en cache sur cet élément car, par exemple, la valeur de parent, de l’id ou de styleName a été modifiée..</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Invalide les informations de mise en forme mises en cache sur cet élément car, par exemple, la valeur de <codeph>parent</codeph>, de l’<codeph>id</codeph> ou de <codeph>styleName</codeph> a été modifiée. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveFormat"><apiName>resolveFormat</apiName><shortdesc> Etant donné un objet FlowElement ou COntainerController, renvoyez les paramètres de format pour lui. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>paramètres de format pour l’objet spécifié. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiOperationClassifier></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> Etant donné un objet FlowElement ou COntainerController, renvoyez les paramètres de format pour lui. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:IFormatResolver:flashx.textLayout.elements:IFormatResolver:resolveUserFormat"><apiName>resolveUserFormat</apiName><shortdesc> Etant donné un objet FlowElement ou ContainerController et le nom d’une propriété de mise en forme, renvoyez la valeur du format ou undefined si la valeur est introuvable. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>la valeur du format spécifié pour l’objet spécifié. 
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>userFormat</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc> Etant donné un objet FlowElement ou ContainerController et le nom d’une propriété de mise en forme, renvoyez la valeur du format ou <codeph>undefined</codeph> si la valeur est introuvable.
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TabElement"><apiName>TabElement</apiName><shortdesc> 
	 La classe TabElement représente un &amp;lt;tab/&amp;gt; dans l’enchaînement de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe TabElement représente un &lt;tab/> dans l’enchaînement de texte. Vous affectez les taquets de tabulation sous la forme d’un tableau d’objets TabStopFormat à la propriété <codeph>ParagraphElement.tabStops</codeph>.
	 
	 <p><b>Remarque</b> : cette classe sert avant tout à prendre en charge &lt;tab/> dans une annotation MXML. Vous pouvez ajouter des caractères de tabulation (\t) directement dans le texte comme suit : </p>
	 
	 <codeblock rev="3.0">
	 spanElement1.text += '\t';
	 </codeblock>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#TabStopFormat"><linktext>flashx.textLayout.formats.TabStopFormat</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement/tabStops"><linktext>ParagraphElement.tabStops</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TabElement:TabElement"><apiName>TabElement</apiName><shortdesc> Constructeur : crée une nouvelle occurrence TabElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée une nouvelle occurrence TabElement.  
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:IConfiguration"><apiName>IConfiguration</apiName><shortdesc> Interface de lecture seule pour un objet de configuration. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> Interface de lecture seule pour un objet de configuration. Utilisé par l’objet TextFlow pour garantir qu’il a une configuration immuable une fois créé. 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc> 
		Spécifie les attributs du format de caractère actif qui s’appliquent initialement à tous les liens (objets LinkElement) dans l’enchaînement de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Spécifie les attributs du format de caractère actif qui s’appliquent initialement à tous les liens (objets LinkElement) dans l’enchaînement de texte. Ces valeurs sont les valeurs par défaut pour les nouveaux objets LinkElement qui ne spécifient pas les valeurs de ces attributs.  
		
		<p>La valeur par défaut est <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc> 
		Spécifie les attributs de format de caractère initial qui s’appliquent à un lien (LinkElement) dans l’enchaînement de texte lorsque le curseur le survole. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Spécifie les attributs de format de caractère initial qui s’appliquent à un lien (LinkElement) dans l’enchaînement de texte lorsque le curseur le survole. Ces valeurs sont les valeurs par défaut pour les nouveaux objets LinkElement qui ne spécifient pas les valeurs de ces attributs. 
		
		<p>La valeur par défaut est <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc> 
		Spécifie les attributs du lien initial qui s’appliquent à tous les objets LinkElement dans l’enchaînement de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Spécifie les attributs du lien initial qui s’appliquent à tous les objets LinkElement dans l’enchaînement de texte. Ces valeurs sont les valeurs par défaut pour les nouveaux objets LinkElement qui ne spécifient pas les valeurs de ces attributs. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc> 
		Spécifie si la prise en charge de l’accessibilité est activée ou non. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Spécifie si la prise en charge de l’accessibilité est activée ou non. Si la valeur est <codeph>true</codeph>, les lecteurs d’écran peuvent lire le contenu de l’objet TextFlow.
		
		<p>La valeur par défaut est <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc> Spécifie le type de composeur d’enchaînement à associer à un nouvel objet TextFlow par défaut. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc> Spécifie le type de composeur d’enchaînement à associer à un nouvel objet TextFlow par défaut. La valeur par défaut est StandardFlowComposer. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc> 
		Le format de sélection initial (SelectionFormat) pour un enchaînement de texte (TextFlow) lorsque la fenêtre a le focus. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Le format de sélection initial (SelectionFormat) pour un enchaînement de texte (TextFlow) lorsque la fenêtre a le focus. La structure de mise en forme de texte utilise le format <codeph>focusedSelectionFormat</codeph> pour tracer la sélection lorsque la fenêtre est active et que l’un des conteneurs dans l’objet TextFlow a le focus. Vous pouvez remplacer ce format à l’aide de <codeph>SelectionManager.focusedSelectionFormat</codeph>, si vous le souhaitez.
		
		<p>La classe SelectionFormat indique les valeurs par défaut, qui inversent la couleur du texte et de son arrière-plan. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc> 
		Le format de sélection initial (SelectionFormat) pour un enchaînement de texte (TextFlow) lorsque la fenêtre est inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Le format de sélection initial (SelectionFormat) pour un enchaînement de texte (TextFlow) lorsque la fenêtre est inactive. La structure de mise en forme de texte utilise le format <codeph>inactiveSelectionFormat</codeph> pour tracer la sélection lorsque la fenêtre est inactive. Vous pouvez remplacer ce format à l’aide de <codeph>SelectionManager.inactiveSelectionFormat</codeph>, si vous le souhaitez.
		
		<p>Si vous ne remplacez pas <codeph>unfocusedSelectionFormat</codeph>, les valeurs de la classe SelectionFormat utilisées sont les suivantes :</p> 
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (blanc)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>Le résultat est qu’aucune sélection n’est affichée. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc> Spécifie le rappel utilisé pour résoudre un élément graphique intégré.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc> Spécifie le rappel utilisé pour résoudre un élément graphique intégré. Le rappel prend un objet <codeph>flashx.textLayout.elements.InlineGraphicElement</codeph> et renvoie la valeur à utiliser en tant que source <codeph>flashx.textLayout.elements.InlineGraphicElement#source</codeph> de l’élément. Ce rappel fournit un mécanisme retardant la mise à disposition de la source de l’élément graphique intégré juste avant sa composition.
		<p><b>Remarque :</b> ce rappel n’est invoqué que si une source d’espace réservé de type String est déjà définie. En outre, il peut être invoqué plusieurs fois. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc> 
		Spécifie si la touche Entrée / Retour est entrée comme du texte par la structure de mise en forme de texte, pour diviser un paragraphe par exemple, ou le code client qui le gère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Spécifie si la touche Entrée / Retour est entrée comme du texte par la structure de mise en forme de texte, pour diviser un paragraphe par exemple, ou le code client qui le gère. Le code client peut gérer cela en enregistrant un formulaire qui a un bouton par défaut à cet effet, par exemple.  
		
		<p>La valeur par défaut est <codeph>true</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc> 
		Spécifie si la touche de tabulation est indiquée comme du texte par la structure de mise en forme du texte, ou Flash Player ou AIR le gère et le transforme en un événement de panneau à onglet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		Spécifie si la touche de tabulation est indiquée comme du texte par la structure de mise en forme du texte, ou Flash Player ou AIR le gère et le transforme en un événement de panneau à onglet.  
		
		<p>La valeur par défaut est <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc> 
		Stratégie utilisée pour déterminer si la dernière ligne d’un conteneur tient dans le conteneur, ou si elle déborde. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> 
		Stratégie utilisée pour déterminer si la dernière ligne d’un conteneur tient dans le conteneur, ou si elle déborde. Utilisez les valeurs constantes de la classe OverflowPolicy pour définir cette propriété.
		
		<p>La valeur par défaut est OverflowPolicy.FIT_DESCENDERS, qui s’adapte à la ligne dans la zone de composition si la zone à partir du haut de la ligne de base est adaptée. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc> Demande à ce que le processus de composition de texte émette les données de création de ligne après la composition de chaque paragraphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> Demande à ce que le processus de composition de texte émette les données de création de ligne après la composition de chaque paragraphe. Cette demande économise de la mémoire mais ralentit le processus de composition.
		
		<p>La valeur par défaut est <codeph>false</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData"><linktext>TextBlock.releaseLineCreationData</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc> 
		Spécifie un délai entre un défilement et le suivant pour empêcher que le défilement ne soit trop rapide.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		Spécifie un délai entre un défilement et le suivant pour empêcher que le défilement ne soit trop rapide. Cette valeur indique ce que le délai doit être en millisecondes. La valeur par défaut est 35.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc> Spécifie le nombre de pixels par défaut à faire défiler lorsque l’utilisateur initialise le défilement automatique en faisant glisser la sélection. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Spécifie le nombre de pixels par défaut à faire défiler lorsque l’utilisateur initialise le défilement automatique en faisant glisser la sélection. La valeur par défaut est 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc> Spécifie le nombre de pixels par défaut à faire défiler pour les événements de molette de la souris. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Spécifie le nombre de pixels par défaut à faire défiler pour les événements de molette de la souris. La valeur par défaut est 20.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc>
		Spécifie le pourcentage par défaut d’enchaînement de texte à faire défiler pour faire défiler les pages. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		Spécifie le pourcentage par défaut d’enchaînement de texte à faire défiler pour faire défiler les pages. La valeur par défaut est 7,0 / 8,0 ou ,875. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc> 
		Spécifie la configuration de format initial TextLayoutFormat pour un enchaînement de texte (objet TextFlow). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Spécifie la configuration de format initial TextLayoutFormat pour un enchaînement de texte (objet TextFlow). 
		
		<p>La valeur par défaut est <codeph>null</codeph>.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:IConfiguration:flashx.textLayout.elements:IConfiguration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc> 
		Le format de sélection initial utilisé par la structure de mise en forme de texte pour tracer la sélection lorsque la fenêtre est active, mais qu’aucun conteneur de l’objet TextFlow n’a le focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc> 
		Le format de sélection initial utilisé par la mise en forme de texte pour tracer la sélection lorsque la fenêtre est active, mais qu’aucun conteneur de l’objet TextFlow n’a le focus. Vous pouvez remplacer ce format à l’aide de <codeph>SelectionManager.unfocusedSelectionFormat</codeph>, si vous le souhaitez.
		
		<p>Si vous ne remplacez pas <codeph>unfocusedSelectionFormat</codeph>, les valeurs de la classe SelectionFormat utilisées sont les suivantes :</p>
		
		<ul>
		  <li><codeph>color = 0xffffff</codeph> (blanc)</li>
		  <li><codeph>alpha = 0</codeph></li>
		  <li><codeph>blendMode = flash.display.BlendMode.DIFFERENCE</codeph></li>
		</ul>
		<p>Le résultat est qu’aucune sélection n’est affichée. </p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkState"><apiName>LinkState</apiName><shortdesc>
	  La classe LinkState définit un ensemble de constantes pour la propriété linkState de la classe LinkElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  La classe LinkState définit un ensemble de constantes pour la propriété <codeph>linkState</codeph> de la classe LinkElement. 
	 
	 </apiDesc><example conref="examples\LinkStateExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement/linkState"><linktext>LinkElement.linkState</linktext></link></related-links><apiValue id="flashx.textLayout.elements:LinkState:ACTIVE"><apiName>ACTIVE</apiName><shortdesc> 
	 Valeur de l’état actif, qui se produit lorsque vous maintenez le bouton de la souris enfoncé sur un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>active</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Valeur de l’état actif, qui se produit lorsque vous maintenez le bouton de la souris enfoncé sur un lien.  
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:HOVER"><apiName>HOVER</apiName><shortdesc> 
	 Valeur de l’état suspendu, qui se produit lorsque vous maintenez le bouton de la souris enfoncé sur un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hover</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Valeur de l’état suspendu, qui se produit lorsque vous maintenez le bouton de la souris enfoncé sur un lien.  
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:LinkState:LINK"><apiName>LINK</apiName><shortdesc> 
	 Valeur pour l’état du lien par défaut normal. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Valeur pour l’état du lien par défaut normal.  
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> 
	 La classe ParagraphElement représente un paragraphe dans la hiérarchie de l’enchaînement de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ParagraphFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe ParagraphElement représente un paragraphe dans la hiérarchie de l’enchaînement de texte. Son parent est une classe ParagraphFormattedElement et ses enfants peuvent inclure des plages (SpanElement), des images (inLineGraphicElement), des liens (LinkElement) et des éléments TCY (Tatechuuyoko - ta-tae-chu-yo-ko) (TCYElement). Le texte du paragraphe est stocké dans un ou plusieurs objets SpanElement, qui définissent des plages de texte partageant les mêmes attributs. Un objet TCYElement définit un petit segment de texte japonais qui s’exécute perpendiculairement à la ligne, comme dans un segment de texte horizontal sur une ligne verticale. Un objet TCYElement peut également contenir plusieurs plages. 
	 
	 </apiDesc><example conref="examples\ParagraphElementExample.as"/><example conref="examples\ParagraphElementExample2.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:ParagraphElement:ParagraphElement"><apiName>ParagraphElement</apiName><shortdesc> Constructeur : représente un paragraphe dans un enchaînement de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : représente un paragraphe dans un enchaînement de texte.  
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc> 
		 Analyse vers l’avant à partir de la position fournie pour trouver l’emplacement dans le texte de l’atome suivant et renvoie l’index. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index dans le texte de l’atome suivant
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position de départ dans le texte, à partir de 0 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Analyse vers l’avant à partir de la position fournie pour trouver l’emplacement dans le texte de l’atome suivant et renvoie l’index. Le terme atome fait à la fois référence aux éléments graphiques et aux caractères (y compris aux groupes de combinaisons de caractère), entités indivisibles qui composent une ligne de texte. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc> 
		 Renvoie l’index de la prochaine limite de mot dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index dans le texte de la prochaine limite de mot 
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position de départ dans le texte, à partir de 0 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Renvoie l’index de la prochaine limite de mot dans le texte. 
		 
		 <p>Analyse vers l’avant à partir de la position fournie pour trouver l’emplacement suivant dans le texte qui commence ou termine un mot. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findNextWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc> 
		 Analyse en arrière à partir de la position fournie pour trouver l’emplacement dans le texte de l’atome précédent et renvoie l’index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index dans le texte du cluster précédent
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position de départ dans le texte, à partir de 0 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Analyse en arrière à partir de la position fournie pour trouver l’emplacement dans le texte de l’atome précédent et renvoie l’index. Le terme atome fait à la fois référence aux éléments graphiques et aux caractères (y compris aux groupes de combinaisons de caractère), entités indivisibles qui composent une ligne de texte. 
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousAtomBoundary.as"/></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine </linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc> 
		 Renvoie l’index de la limite de mot précédente dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index dans le texte de la limite de mot précédente
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc> position de départ dans le texte, à partir de 0 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Renvoie l’index de la limite de mot précédente dans le texte. 
		 
		 <p>Analyse en arrière à partir de la position fournie pour trouver l’emplacement précédent dans le texte qui commence ou termine un mot. </p>
		 
		 </apiDesc><example conref="examples\ParagraphElement_findPreviousWordBoundary.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getNextParagraph"><apiName>getNextParagraph</apiName><shortdesc> Renvoie le paragraphe suivant celui-ci, ou null s’il n’existe pas d’autre paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le paragraphe suivant ou null s’il n’existe aucun autre paragraphe. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie le paragraphe suivant celui-ci, ou null s’il n’existe pas d’autre paragraphe.  
		 
		 </apiDesc><example conref="examples\ParagraphElement_getNextParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getPreviousParagraph"><linktext>getPreviousParagraph</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:ParagraphElement:getPreviousParagraph"><apiName>getPreviousParagraph</apiName><shortdesc> Renvoie le paragraphe qui précède celui-ci, ou la valeur null s’il s’agit du premier paragraphe de l’objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie le paragraphe qui précède celui-ci, ou la valeur null s’il s’agit du premier paragraphe de l’objet TextFlow.  
		 
		 </apiDesc><example conref="examples\ParagraphElement_getPreviousParagraph.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement/getNextParagraph"><linktext>getNextParagraph</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.elements:TextRange"><apiName>TextRange</apiName><shortdesc>
	 Une classe en lecture seule qui décrit une plage de texte contigu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Une classe en lecture seule qui décrit une plage de texte contigu. Une telle gamme se produit lorsque vous sélectionnez une section de texte. La gamme constitue le point d’ancrage de la sélection, <codeph>anchorPosition</codeph>, et le point d’alignement, qui doit être modifié par les actions, <codeph>activePosition</codeph>. Puisque les sélections de blocs sont modifiée et étendues, la valeur <codeph>anchorPosition</codeph> reste fixée et la valeur <codeph>activePosition</codeph> est modifiée. La position du point d’’ancrage peut être placée dans le texte avant ou après la position active. 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>SelectionState</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TextRange:TextRange"><apiName>TextRange</apiName><shortdesc> Constructeur : crée une nouvelle occurrence TextRange. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>root</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiDesc>L’objet TextFlow associé à la sélection. 
		 </apiDesc></apiParam><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>la position d’index du point d’ancrage de la sélection. La première position du texte est la position 0. 
		 </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>la position d’index de l’emplacement actif de la sélection. La première position dans le texte est la position 0.  
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Constructeur : crée une nouvelle occurrence TextRange. Une classe TextRange peut être (-1,-1), ce qui signifie aucune plage ou une paire de valeurs comprises entre 0 et <codeph>TextFlow.textLength</codeph>.
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>FlowElement.textLength</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:TextRange:updateRange"><apiName>updateRange</apiName><shortdesc> Mettez à jour la plage avec les nouvelles valeurs de position d’ancrage ou active. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true si la sélection est modifiée.
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>newAnchorPosition</apiItemName><apiType value="int"/><apiDesc>l’index du point d’ancrage de la sélection. 
		  </apiDesc></apiParam><apiParam><apiItemName>newActivePosition</apiItemName><apiType value="int"/><apiDesc>l’index actif de la sélection. 
		  </apiDesc></apiParam></apiOperationDef><apiDesc> Mettez à jour la plage avec les nouvelles valeurs de position d’ancrage ou active. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:TextRange:absoluteEnd:get"><apiName>absoluteEnd</apiName><shortdesc> Fin de la sélection, comme une position absolue dans l’objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Fin de la sélection, comme une position absolue dans l’objet TextFlow. 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> Début de la sélection, comme une position absolue dans l’objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Début de la sélection, comme une position absolue dans l’objet TextFlow. 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:activePosition:get"><apiName>activePosition</apiName><shortdesc> Position active de la sélection, comme une position absolue dans l’objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Position active de la sélection, comme une position absolue dans l’objet TextFlow. 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:anchorPosition:get"><apiName>anchorPosition</apiName><shortdesc> Position d’ancrage de la sélection, comme une position absolue dans l’objet TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> Position d’ancrage de la sélection, comme une position absolue dans l’objet TextFlow. 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:TextRange:textFlow:get"><apiName>textFlow</apiName><shortdesc> Renvoie l’objet TextFlow associé à la sélection. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> Renvoie l’objet TextFlow associé à la sélection. 
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> 
	 La classe SubParagraphGroupElement regroupe les classes FlowLeafElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe SubParagraphGroupElement regroupe les classes FlowLeafElement. Une classe SubParagraphGroupElement est un enfant d’un objet ParagraphElement et il peut contenir un ou plusieurs objets en tant qu’enfants. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TCYElement"><linktext>TCYElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SubParagraphGroupElement:SubParagraphGroupElement"><apiName>SubParagraphGroupElement</apiName><shortdesc> Constructeur : crée une nouvelle occurrence SubParagraphGroupElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée une nouvelle occurrence SubParagraphGroupElement. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:SpanElement"><apiName>SpanElement</apiName><shortdesc> 
	La classe représente un segment de texte qui a un seul jeu d’attributs de mise en forme appliquée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	La classe représente un segment de texte qui a un seul jeu d’attributs de mise en forme appliquée.  Les objets SpanElement contiennent le texte dans un paragraphe. Un simple paragraphe (ParagraphElement) comprend un ou plusieurs objets SpanElement.  
	
	<p>Un objet ParagraphElement a un seul objet SpanElement si tout le texte du paragraphe partage la même jeu d’attributs. Il possède plusieurs objets SpanElement si le texte dans le paragraphe possède plusieurs formats. </p>
	
	</apiDesc><example conref="SpanElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>FlowElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:SpanElement:SpanElement"><apiName>SpanElement</apiName><shortdesc> Constructeur : crée un objet SpanElement pour contenir un segment de texte dans un paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée un objet SpanElement pour contenir un segment de texte dans un paragraphe. 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:SpanElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:SpanElement:tlf_internal:normalizeRange"><apiName>normalizeRange</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="tlf_internal"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>normalizeStart</apiItemName><apiType value="uint"/></apiParam><apiParam><apiItemName>normalizeEnd</apiItemName><apiType value="uint"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:SpanElement:replaceText"><apiName>replaceText</apiName><shortdesc> 
		 Met à jour le texte de la plage de texte en fonction des positions de début et de fin spécifiées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Les positions <codeph>relativeStartPosition</codeph> ou <codeph>relativeEndPosition</codeph> est hors limites ou une paire de remplacement est en cours de division en conséquence du remplacement.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>relativeStartPosition</apiItemName><apiType value="int"/><apiDesc>La position d’index du début du texte à remplacer, par rapport au début de la plage. Le premier caractère de la plage est à la position 0.
		  </apiDesc></apiParam><apiParam><apiItemName>relativeEndPosition</apiItemName><apiType value="int"/><apiDesc>La position une de l’index après le dernier caractère du texte à remplacer, par rapport au début de la plage. Définissez cette valeur égale à la valeur <codeph>relativeStartPos</codeph> pour une insertion. 
		  </apiDesc></apiParam><apiParam><apiItemName>textValue</apiItemName><apiType value="String"/><apiDesc>Le texte de remplacement ou le texte à ajouter, selon le cas. 
		 
		  </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Met à jour le texte de la plage de texte en fonction des positions de début et de fin spécifiées. Pour insérer du texte, définissez la position de fin égale à la position de départ. Pour ajouter du texte au texte existant dans la plage, définissez la position de début et la position de fin égales à la longueur du texte existant. 
		 
		 <p>Le texte remplacé contient le caractère de début et jusqu’au caractère de fin mais sans l’inclure.</p>
		 
		  </apiDesc><example conref="SpanElement_replaceTextExample.as"/></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:SpanElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Définit le texte en fonction du contenu dans les balises de plages ; supprime toujours les enfants existants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>si l’élément tableau n’est pas une classe SpecialCharacterElement ou une chaîne 
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Définit le texte en fonction du contenu dans les balises de plages ; supprime toujours les enfants existants. Cette propriété est conçue pour une utilisation pendant l’importation compilée de mxml. Lorsque les éléments d’annotation TLF contiennent d’autres éléments d’annotation TLF en tant qu’enfants, les enfants sont affectés à cette propriété. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:SpanElement:text:set"><apiName>text</apiName><shortdesc> 
		 Reçoit la chaîne de texte que cet objet SpanElement contient. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
		 Reçoit la chaîne de texte que cet objet SpanElement contient. 
		 
		 <p>Le texte d’une plage n’inclut pas le retour à la ligne (CR) à la fin du paragraphe mais il est inclus dans la valeur de <codeph>textLength</codeph>.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:ParagraphFormattedElement"><apiName>ParagraphFormattedElement</apiName><shortdesc> La classe ParagraphFormattedElement est une classe de base abstraite pour les classes FlowElement ayant des propriétés de paragraphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> La classe ParagraphFormattedElement est une classe de base abstraite pour les classes FlowElement ayant des propriétés de paragraphe.
	
	<p>Vous ne pouvez pas créer un objet ParagraphFormattedElement directement. Appeler un nouvel objet <codeph>ParagraphFormattedElement()</codeph> renvoie une exception d’erreur.</p> 
	
	</apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiClassifier><apiClassifier id="flashx.textLayout.elements:DivElement"><apiName>DivElement</apiName><shortdesc> 
	 La classe DivElement définit un élément pour regrouper les paragraphes (objets ParagraphElement). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe DivElement définit un élément pour regrouper les paragraphes (objets ParagraphElement). Si vous souhaitez qu’un groupe de paragraphes partage les mêmes attributs de mise en forme, vous pouvez les grouper dans un objet DivElement et leur appliquer les attributs. Les paragraphes contenus dans le groupe héritent des attributs de l’objet DivElement.
	 
	 </apiDesc><example conref="examples\DivElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:DivElement:DivElement"><apiName>DivElement</apiName><shortdesc> Constructeur : crée un nouvel objet DivElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée un nouvel objet DivElement. 
			
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:Configuration"><apiName>Configuration</apiName><shortdesc> 
	La classe Configuration est un point principal d’intégration entre Text Layout Framework et une application. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.elements:IConfiguration</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	La classe Configuration est un point principal d’intégration entre Text Layout Framework et une application. Vous pouvez inclure un objet Configuration en tant que paramètre du constructeur <codeph>TextFlow()</codeph> lorsque vous créez une nouvelle occurrence TextFlow. Cela permet à l’application de contrôler initialement la façon dont Text Layout Framework se comporte. 
	
	<p>La classe de configuration vous permet de spécifier les formats initiaux, de paragraphe et de conteneur pour l’enchaînement de texte via la propriété <codeph>textFlowInitialFormat</codeph>. Elle permet aussi de spécifier les attributs de mise en forme initiale pour les liens, la sélection, les propriétés pour le défilement et les paramètres de traitement des touches de tabulation et d’Entrée. </p>
	
	</apiDesc><example conref="examples\ConfigurationExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>TextDecoration</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:Configuration:Configuration"><apiName>Configuration</apiName><shortdesc> Constructeur : crée une configuration par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>initializeWithDefaults</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Spécifie s’il faut initialiser la configuration avec les valeurs par défaut. La valeur par défaut est <codeph>true</codeph>. Si définie sur <codeph>false</codeph>, s’initialise sans les valeurs par défaut, épargnant ainsi certains objets. La méthode <codeph>clone()</codeph> définit cette valeur sur <codeph>false</codeph> et copie les propriétés de l’objet d’origine.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc> Constructeur : crée une configuration par défaut. 
		
		</apiDesc></apiConstructorDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.elements:Configuration:clone"><apiName>clone</apiName><shortdesc> Crée un clone de l’objet Configuration.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.elements:Configuration</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Crée un clone de l’objet Configuration.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkActiveFormat:get"><apiName>defaultLinkActiveFormat</apiName><shortdesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkActiveFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkHoverFormat:get"><apiName>defaultLinkHoverFormat</apiName><shortdesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkHoverFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:defaultLinkNormalFormat:get"><apiName>defaultLinkNormalFormat</apiName><shortdesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#defaultLinkNormalFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:enableAccessibility:get"><apiName>enableAccessibility</apiName><shortdesc conref="IConfiguration#enableAccessibility"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#enableAccessibility"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:flowComposerClass:get"><apiName>flowComposerClass</apiName><shortdesc conref="IConfiguration#flowComposerClass"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc conref="IConfiguration#flowComposerClass"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:focusedSelectionFormat:get"><apiName>focusedSelectionFormat</apiName><shortdesc conref="IConfiguration#focusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#focusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/focusedSelectionFormat"><linktext>SelectionManager.focusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inactiveSelectionFormat:get"><apiName>inactiveSelectionFormat</apiName><shortdesc conref="IConfiguration#inactiveSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#inactiveSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/inactiveSelectionFormat"><linktext>SelectionManager.inactiveSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:inlineGraphicResolverFunction:get"><apiName>inlineGraphicResolverFunction</apiName><shortdesc conref="IConfiguration#inlineGraphicResolver"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="IConfiguration#inlineGraphicResolver"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageEnterKey:get"><apiName>manageEnterKey</apiName><shortdesc conref="IConfiguration#manageEnterKey"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageEnterKey"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:manageTabKey:get"><apiName>manageTabKey</apiName><shortdesc conref="IConfiguration#manageTabKey"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#manageTabKey"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:overflowPolicy:get"><apiName>overflowPolicy</apiName><shortdesc conref="IConfiguration#overflowPolicy"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="IConfiguration#overflowPolicy"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#OverflowPolicy"><linktext>OverflowPolicy</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:releaseLineCreationData:get"><apiName>releaseLineCreationData</apiName><shortdesc conref="IConfiguration#releaseLineCreationData"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="IConfiguration#releaseLineCreationData"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/releaseLineCreationData"><linktext>TextBlock.releaseLineCreationData</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragDelay:get"><apiName>scrollDragDelay</apiName><shortdesc conref="IConfiguration#scrollDragDelay"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragDelay"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollDragPixels:get"><apiName>scrollDragPixels</apiName><shortdesc conref="IConfiguration#scrollDragPixels"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollDragPixels"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollMouseWheelMultiplier:get"><apiName>scrollMouseWheelMultiplier</apiName><shortdesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollMouseWheelMultiplier"> 
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:scrollPagePercentage:get"><apiName>scrollPagePercentage</apiName><shortdesc conref="IConfiguration#scrollPagePercentage">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="IConfiguration#scrollPagePercentage">
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:Configuration:textFlowInitialFormat:get"><apiName>textFlowInitialFormat</apiName><shortdesc conref="IConfiguration#textFlowInitialFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#textFlowInitialFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:Configuration:unfocusedSelectionFormat:get"><apiName>unfocusedSelectionFormat</apiName><shortdesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionFormat</apiValueClassifier></apiValueDef><apiDesc conref="IConfiguration#unfocusedSelectionFormat"> 
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#SelectionFormat"><linktext>SelectionFormat</linktext></link><link href="flashx.textLayout.edit.xml#SelectionManager/unfocusedSelectionFormat"><linktext>SelectionManager.unfocusedSelectionFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowElement"><apiName>FlowElement</apiName><shortdesc>
 Le texte d’un enchaînement est stocké sous forme d’arborescence avec les éléments de l’arborescence représentant les divisions logiques dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.formats:ITextLayoutFormat</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Le texte d’un enchaînement est stocké sous forme d’arborescence avec les éléments de l’arborescence représentant les divisions logiques dans le texte. La classe FlowElement est la classe de base abstraite de tous les objets de cette arborescence. Les objets FlowElement représentent des paragraphes, plages de texte dans des paragraphes et des groupes de paragraphes. 
 
 <p>La racine d’une arborescence d’objet FlowElement composable est toujours un objet TextFlow. Les éléments feuille de l’arborescence sont toujours des sous-classes de la classe FlowLeafElement. Toutes les feuilles organisées dans un objet TextFlow composable ont un ancêtre ParagraphElement. 
 </p> 
 
 <p>Vous ne pouvez pas créer un objet FlowElement directement. Appeler un nouvel objet <codeph>FlowElement()</codeph> renvoie une exception d’erreur.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowLeafElement"><linktext>FlowLeafElement</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement"><linktext>InlineGraphicElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowElement:FlowElement"><apiName>FlowElement</apiName><shortdesc> Classe de base : appeler un nouvel objet FlowElement() renvoie une erreur d’exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Classe de base : appeler un nouvel objet <codeph>new FlowElement()</codeph> renvoie une exception d’erreur.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowElement:clearStyle"><apiName>clearStyle</apiName><shortdesc> Supprime le style spécifié par le paramètre styleProp à partir de cet objet FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Le nom du style à supprimer.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Supprime le style spécifié par le paramètre <codeph>styleProp</codeph> à partir de cet objet FlowElement. Définit la valeur sur <codeph>undefined</codeph>.
		 
		 </apiDesc><example conref="examples\FlowElement_clearStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:deepCopy"><apiName>deepCopy</apiName><shortdesc>
		 Effectue une copie en profondeur de cette objet FlowElement, y compris tout enfant, copiant le contenu entre les deux emplacements de caractère et renvoyant la copie en tant qu’objet FlowElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>l’objet créé par l’opération de copie en profondeur. 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>position du texte relative du premier caractère à copier. La première position est 0. 
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>position du texte relative du dernier caractère à copier. Une valeur -1 indique la copie à la fin. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Effectue une copie en profondeur de cette objet FlowElement, y compris tout enfant, copiant le contenu entre les deux emplacements de caractère et renvoyant la copie en tant qu’objet FlowElement. 
		 
		 <p>Sans arguments, par défaut, le paramètre <codeph>deepCopy()</codeph> copie l’élément entier par défaut.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_deepCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/shallowCopy()"><linktext>shallowCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:equalUserStyles"><apiName>equalUserStyles</apiName><shortdesc> Comparez le style userStyles de cela avec élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>true si les styles de l’utilisateur sont égaux, false dans le cas contraire. 
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>otherElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>L’objet FlowElement avec lequel comparer les styles de l’utilisateur
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Comparez le style userStyles de cela avec élément.  
		 
		 </apiDesc><example conref="examples\FlowElement_equalUserStylesExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc>
		 Renvoie l’emplacement de départ de l’élément dans l’enchaînement de texte avec un index absolu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’index du début de l’élément à partir du début de l’objet TextFlow. 
 		 
 		 </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
		 Renvoie l’emplacement de départ de l’élément dans l’enchaînement de texte avec un index absolu. Le premier caractère dans l’enchaînement est la position 0. 
		 
		 </apiDesc><example conref="examples\FlowElement_getAbsoluteStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/parentRelativeStart"><linktext>parentRelativeStart</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharAtPosition"><apiName>getCharAtPosition</apiName><shortdesc> 
		Renvoie le caractère à la position spécifiée, par rapport à cet objet FlowElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Chaîne contenant le caractère.
		
		</apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>La position relative du caractère dans cet objet FlowElement. 
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Renvoie le caractère à la position spécifiée, par rapport à cet objet FlowElement. Le premier caractère à la position relative 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharCodeAtPosition()"><linktext>getCharCodeAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getCharCodeAtPosition"><apiName>getCharCodeAtPosition</apiName><shortdesc> Renvoie le code de caractère à la position spécifiée, par rapport à cet objet FlowElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur Unicode pour le caractère à la position spécifiée.
		
		</apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	La position relative du caractère dans cet objet FlowElement. 
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Renvoie le code de caractère à la position spécifiée, par rapport à cet objet FlowElement. Le premier caractère à la position relative 0.
		
		</apiDesc><example conref="examples\FlowElement_getCharCodeAtPositionExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getCharAtPosition()"><linktext>getCharAtPosition()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getElementRelativeStart"><apiName>getElementRelativeStart</apiName><shortdesc>
		 Renvoie la valeur de début de cet élément par rapport à l’élément ancêtre. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le décalage de cet élément. 
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>ancestorElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>L’élément à partir duquel vous souhaitez connaître le début relatif de cet élément. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Renvoie la valeur de début de cet élément par rapport à l’élément ancêtre. Suppose que l’élément ancêtre est dans la chaîne parent. Si l’élément ancêtre est le parent, il s’agit du même que <codeph>this.parentRelativeStart</codeph>. Si l’élément ancêtre est le grand-parent, il s’agit du même que <codeph>parentRelativeStart</codeph> plus <codeph>parent.parentRelativeStart</codeph> et ainsi de suite.
		 
		 </apiDesc><example conref="examples\FlowElement_getElementRelativeStartExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getAbsoluteStart()"><linktext>getAbsoluteStart()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getNextSibling"><apiName>getNextSibling</apiName><shortdesc> Renvoie le prochain objet FlowElement frère dans la hiérarchie de l’enchaînement de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le prochain objet FlowElement du même type, ou null s’il n’existe aucun frère. 
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie le prochain objet FlowElement frère dans la hiérarchie de l’enchaînement de texte.  
		
		</apiDesc><example conref="examples\FlowElement_getNextSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getPreviousSibling()"><linktext>getPreviousSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getParagraph"><apiName>getParagraph</apiName><shortdesc>
		 Renvoie l’objet ParagraphElement associé à cet élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>l’objet ParagraphElement qui est associé à cet objet FlowElement. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Renvoie l’objet ParagraphElement associé à cet élément. Il recherche la hiérarchie de l’enchaînement de texte et renvoie le premier objet ParagraphElement. 
		 
		 </apiDesc><example conref="examples\FlowElement_getParagraphExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getTextFlow()"><linktext>getTextFlow()</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getPreviousSibling"><apiName>getPreviousSibling</apiName><shortdesc> Renvoie l’objet FlowElement frère précédent dans la hiérarchie de l’enchaînement de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le précédent objet FlowElement du même type, ou null s’il n’existe aucun frère précédent. 
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> Renvoie l’objet FlowElement frère précédent dans la hiérarchie de l’enchaînement de texte.  
		
		</apiDesc><example conref="examples\FlowElement_getPreviousSiblingExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/getNextSibling()"><linktext>getNextSibling()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getStyle"><apiName>getStyle</apiName><shortdesc> Renvoie la valeur du style spécifié par le paramètre styleProp, qui spécifie le nom du style et peut être n’importe quel nom de style d’utilisateur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur du style spécifié. Le type varie selon le type de style en cours d’accès. Renvoie <codeph>undefined</codeph> si le style n’est pas défini.
		 
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Le nom du style dont la valeur est à récupérer.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Renvoie la valeur du style spécifié par le paramètre <codeph>styleProp</codeph>, qui spécifie le nom du style et peut être n’importe quel nom de style d’utilisateur. Accède à une plage, un paragraphe, un enchaînement de texte, ou un style de conteneur existant. Recherche l’arborescence du parent si le style est <codeph>undefined</codeph> sur un élément spécifique.
		 
		 </apiDesc><example conref="examples\FlowElement_getStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/setStyle()"><linktext>setStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getTextFlow"><apiName>getTextFlow</apiName><shortdesc>
		 Gravit la hiérarchie de l’enchaînement de texte pour renvoyer l’objet TextFlow racine pour l’élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’objet TextFlow racine pour cet objet FlowElement. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gravit la hiérarchie de l’enchaînement de texte pour renvoyer l’objet TextFlow racine pour l’élément. 
		 
		 </apiDesc><example conref="examples\FlowElement_getTextFlowExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:getText"><apiName>getText</apiName><shortdesc> 
		 Récupère la plage de texte spécifiée à partir d’un élément d’enchaînement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le texte requis.
		 
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Position de départ de la plage de texte à récupérer par rapport au début de l’objet FlowElement.
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Position de fin de la plage de texte à récupérer par rapport au début de l’objet FlowElement, -1 jusqu’à la fin de l’élément.
		 </apiDesc></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData><apiDesc>Caractère à insérer entre les paragraphes.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Récupère la plage de texte spécifiée à partir d’un élément d’enchaînement.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:initialized"><apiName>initialized</apiName><shortdesc> </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>
		 </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Identificateur utilisé par le document pour faire référence à cet objet. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:setStyle"><apiName>setStyle</apiName><shortdesc> Définit le style spécifié par le paramètre styleProp à la valeur spécifiée par le paramètre newValue. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Le nom du style à définir.
		</apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="any"/><apiDesc>La valeur à définir pour ce style. 
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> Définit le style spécifié par le paramètre <codeph>styleProp</codeph> à la valeur spécifiée par le paramètre <codeph>newValue</codeph>. Vous pouvez définir une plage, un paragraphe, un enchaînement de texte ou un style de conteneur, y compris toute paire nom-valeur de l’utilisateur. 
		
		<p><b>Remarque :</b> si vous affectez un style personnalisé, la structure de mise en forme de texte peut l’importer et l’exporter, mais du MXML compilé ne peut pas le prendre en charge. </p>
		
		</apiDesc><example conref="examples\FlowElement_setStyleExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/clearStyle()"><linktext>clearStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/getStyle()"><linktext>getStyle()</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/userStyles"><linktext>userStyles</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:shallowCopy"><apiName>shallowCopy</apiName><shortdesc>
		 Effectue une copie de cet objet FlowElement, copie le contenu entre deux positions de caractères spécifiées. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>l’objet créé par l’opération de copie. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>La position du texte relative au premier caractère à copier. La première position est 0. 
		 </apiDesc></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>La position du texte relative au dernier caractère à copier. Une valeur -1 indique la copie à la fin. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Effectue une copie de cet objet FlowElement, copie le contenu entre deux positions de caractères spécifiées. Elle renvoie la copie du contenu sous la forme d’un nouvel objet FlowElement. Contrairement à la propriété<codeph>deepCopy()</codeph>, <codeph>shallowCopy()</codeph> ne copie aucun enfant de cet objet FlowElement. 
		 
		 <p>Sans arguments, la propriété <codeph>shallowCopy()</codeph> copie par défaut tout le contenu.</p>
		 
		 </apiDesc><example conref="examples\FlowElement_shallowCopyExample.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/deepCopy()"><linktext>deepCopy()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.elements:FlowElement:splitAtPosition"><apiName>splitAtPosition</apiName><shortdesc> 
		 Divise cet objet FlowElement à la position spécifiée par le paramètre relativePosition, qui est une position relative dans le texte pour cet élément. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si le paramètre <codeph>relativePosition</codeph> est supérieur à la valeur <codeph>textLength</codeph>, ou inférieur à 0.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>le nouvel objet, qui contient le contenu de l’objet d’origine, en commençant à la position spécifiée. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>la position à partir de laquelle diviser le contenu de l’objet d’origine, la première position étant 0. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Divise cet objet FlowElement à la position spécifiée par le paramètre<codeph>relativePosition</codeph> , qui est une position relative dans le texte pour cet élément. Cette méthode divise uniquement les objets SpanElement et FlowGroupElement. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowElement:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
		 TextLayoutFormat : spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la ligne de base sur laquelle la ligne de base dominante s’aligne. Par exemple, si vous définissez <codeph>dominantBaseline</codeph> sur ASCENT, la définition de <codeph>alignmentBaseline</codeph> sur DESCENT aligne le haut du texte sur la ligne de base DESCENT ou sous la ligne. Le plus grand élément de la ligne détermine en général les lignes de base. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur USE_DOMINANT_BASELINE. </p>
		 </apiDesc><example conref="examples\TextLayoutFormat_alignmentBaselineExample.as"/></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundAlpha:get"><apiName>backgroundAlpha</apiName><shortdesc>
		 TextLayoutFormat : valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : valeur alpha (transparence) pour l’arrière-plan (adopte la valeur par défaut si undefined pendant la cascade). La valeur 0 est complètement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où alpha est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 1.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc>
		 TextLayoutFormat : couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : couleur d’arrière-plan du texte (adopte la valeur par défaut si undefined pendant la propagation en cascade). Il peut s’agir de la valeur de la constante <codeph>BackgroundColor.TRANSPARENT</codeph> ou d’une valeur hexadécimale qui spécifie les trois valeurs RVB à 8 bits (rouge, vert, bleu), par exemple, 0xFF0000 est rouge et 0x00FF00 est vert.
		 <p>Les valeurs valides comme chaîne sont flashx.textLayout.formats.BackgroundColor.TRANSPARENT, flashx.textLayout.formats.FormatValue.INHERIT et uints de 0x0 à 0xffffffff.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TRANSPARENT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BackgroundColor"><linktext>flashx.textLayout.formats.BackgroundColor</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
		 TextLayoutFormat : valeur de décalage de la ligne de base par rapport à la valeur dominantBaseline. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : valeur de décalage de la ligne de base par rapport à la valeur <codeph>dominantBaseline</codeph>. Les unités sont en pixels, ou un pourcentage de <codeph>fontSize</codeph> (dans ce cas, entrez une valeur de chaîne, comme 140 %). Les valeurs positives décalent la ligne vers le haut pour le texte horizontal (à droite pour le texte vertical) et les valeurs négatives décalent la ligne vers le bas pour le texte horizontal (à gauche pour le texte vertical).  
		 <p>Les valeurs valides sont flashx.textLayout.formats.BaselineShift.SUPERSCRIPT, flashx.textLayout.formats.BaselineShift.SUBSCRIPT et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000. </p>
		 <p>Les valeurs en pourcentage sont comprises entre -1000 et 1000. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 0.0. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineShift"><linktext>flashx.textLayout.formats.BaselineShift</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:blockProgression:get"><apiName>blockProgression</apiName><shortdesc>
		 TextLayoutFormat : spécifie la progression verticale ou horizontale du positionnement de la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la progression verticale ou horizontale du positionnement de la ligne. Les lignes sont placées de haut en bas (<codeph>BlockProgression.TB</codeph>, pour le texte horizontal) ou de droite à gauche (<codeph>BlockProgression.RL</codeph>, pour le texte vertical). 
		 <p>Les valeurs légales sont flashx.textLayout.formats.BlockProgression.RL, flashx.textLayout.formats.BlockProgression.TB et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de TB. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BlockProgression"><linktext>flashx.textLayout.formats.BlockProgression</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
		 TextLayoutFormat : contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôle l’autorisation des sauts de ligne lors de la séparation de l’habillage du texte en plusieurs lignes. Défini sur <codeph>BreakOpportunity.AUTO</codeph> pour diviser le texte normalement. Défini sur <codeph>BreakOpportunity.NONE</codeph> pour <i>ne pas</i> diviser le texte à moins que le texte ne dépasse la mesure et qu’il n’existe pas d’autres endroits auquel diviser la ligne. Défini sur <codeph>BreakOpportunity.tout</codeph> pour permettre le saut de ligne à n’importe quel endroit, plutôt qu’entre les mots. Défini sur <codeph>BreakOpportunity.ALL</codeph> pour placer chaque groupe typographique sur une ligne distincte (utile pour le texte d’un chemin). 
		 <p>Les valeurs valides sont flash.text.engine.BreakOpportunity.ALL, flash.text.engine.BreakOpportunity.ANY, flash.text.engine.BreakOpportunity.AUTO, flash.text.engine.BreakOpportunity.NONE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.BreakOpportunity.xml"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
		 TextLayoutFormat : type de repère CFF utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : type de repère CFF utilisé pour ce texte. Les repères CFF déterminent si l’exécution de Flash force les souches horizontales fortes à intégrer une grille de sous-pixels ou non. Cette propriété s’applique uniquement si la propriété <codeph>renderingMode</codeph> est définie sur <codeph>RenderingMode.CFF</codeph> et que la police est intégrée (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>). Sur des écrans de petite taille, les repères produisent un texte clair et lisible pour les lecteurs humains.
		 <p>Les valeurs valides sont flash.text.engine.CFFHinting.NONE, flash.text.engine.CFFHinting.HORIZONTAL_STEM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur HORIZONTAL_STEM. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.CFFHinting.xml"><linktext>flash.text.engine.CFFHinting</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:color:get"><apiName>color</apiName><shortdesc>
		 TextLayoutFormat : couleur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : couleur du texte. Un nombre hexadécimal qui spécifie trois valeurs 8 bits RVB (rouge, vert, bleu) ; par exemple, 0xFF0000 correspond au rouge et 0x00FF00 au vert.  
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnCount:get"><apiName>columnCount</apiName><shortdesc>
		 TextLayoutFormat : nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre de colonnes de texte (adopte la valeur par défaut si la valeur est undefined pendant la propagation en cascade). Le numéro de la colonne prévaut sur les autres paramètres de la colonne. La valeur est un nombre entier ou <codeph>FormatValue.AUTO</codeph> si elle n’est pas spécifiée. Si le compte <codeph>columnCount</codeph> n’est pas spécifié, la largeur <codeph>columnWidth</codeph> est utilisée pour créer autant de colonnes que le conteneur peut en contenir. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et ints de 1 à 50.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnGap:get"><apiName>columnGap</apiName><shortdesc>
		 TextLayoutFormat : spécifie la quantité d’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la valeur de l’espace de gouttière, en pixels, à laisser entre les colonnes (adopte la valeur par défaut si undefined pendant la propagation en cascade). La valeur est un nombre 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 20.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
		 TextLayoutFormat : largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : largeur de colonne en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Si vous spécifiez la largeur des colonnes, mais pas le nombre, l’objet TextLayout va créer autant de colonnes de cette largeur que possible, à partir des paramètres <codeph>columnGap</codeph> et de la largeur du conteneur. Tout espace restant est laissé après la dernière colonne. La valeur est un nombre. 
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT et des nombres de 0 à 8000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur AUTO.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#FormatValue"><linktext>flashx.textLayout.formats.FormatValue</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:computedFormat:get"><apiName>computedFormat</apiName><shortdesc> 
		 Renvoie les attributs de format de caractère calculés qui sont appliqués à cet élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc> 
		 Renvoie les attributs de format de caractère calculés qui sont appliqués à cet élément. Prend en compte l’héritage des attributs d’éléments parent. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:coreStyles:get"><apiName>coreStyles</apiName><shortdesc> Renvoie les styles principaux pour une occurrence FlowElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc> Renvoie les styles principaux pour une occurrence FlowElement. Renvoie une copie des styles principaux.  
		  
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitCase:get"><apiName>digitCase</apiName><shortdesc>
		 TextLayoutFormat : le type de casse de chiffres utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : le type de casse de chiffres utilisée pour ce texte. La définition de la valeur sur <codeph>DigitCase.OLD_STYLE</codeph> se rapproche de l’alphabet en minuscules avec différents jambages ascendants et descendants. Les chiffres sont espacés proportionnellement. Ce style n’est disponible que dans les caractères sélectionnés, le plus souvent dans une police supplémentaire ou spéciale. Le paramètre <codeph>DigitCase.LINING</codeph> a une hauteur en majuscules et est généralement à espacement fixe pour s’aligner dans les graphiques. <p><adobeimage alt="digitCase " href="../../../images/textLayout_digitcase.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitCase.DEFAULT, flash.text.engine.DigitCase.LINING, flash.text.engine.DigitCase.OLD_STYLE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitCase.xml"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
		 TextLayoutFormat : type de largeur de chiffres utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : type de largeur de chiffres utilisée pour ce texte. La valeur peut être <codeph>DigitWidth.PROPORTIONAL</codeph>, ce qui est la meilleure approche pour les nombres individuels, ou <codeph>DigitWidth.TABULAR</codeph>, qui est recommandé pour les nombres inclus dans les tableaux, diagrammes et lignes verticales. <p><adobeimage alt="digitWidth " href="../../../images/textLayout_digitwidth.gif"/></p>
		 <p>Les valeurs valides sont flash.text.engine.DigitWidth.DEFAULT, flash.text.engine.DigitWidth.PROPORTIONAL, flash.text.engine.DigitWidth.TABULAR, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.DigitWidth.xml"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:direction:get"><apiName>direction</apiName><shortdesc>
		 TextLayoutFormat : spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie le niveau d’intégration bidirectionnelle par défaut du texte dans le bloc de texte. Ordre de lecture de gauche à droite, comme dans les scripts de style latin, ou de droite à gauche, comme en arabe ou en hébreu. Cette propriété affecte également le sens de la colonne lorsqu’elle est appliquée au niveau du conteneur. Les colonnes peuvent se lire de gauche à droite ou de droite à gauche, exactement comme du texte. Voici quelques exemples :<p><adobeimage alt="sens" href="../../../images/textLayout_direction.gif"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.Direction.LTR, flashx.textLayout.formats.Direction.RTL, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur LTR. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#Direction"><linktext>flashx.textLayout.formats.Direction</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
		 TextLayoutFormat : spécifie la ligne de base de l’élément s’alignant sur alignmentBaseline pour déterminer la position verticale de l’élément sur la ligne. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la ligne de base de l’élément s’alignant sur le <codeph>alignmentBaseline</codeph> pour déterminer la position verticale de l’élément sur la ligne. La valeur <codeph>TextBaseline.AUTO</codeph> sélectionne la ligne de base dominante en fonction de la propriété <codeph>locale</codeph> du paragraphe parent. Pour le chinois et le japonais, la valeur de ligne de base sélectionnée est <codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph> ; pour tous les autres, il s’agit de <codeph>TextBaseline.ROMAN</codeph>. Ces choix de base sont déterminés par le choix de police et la taille de police. <p><adobeimage alt="lignes de base" href="../../../images/textLayout_baselines.jpg"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.FormatValue.AUTO, flash.text.engine.TextBaseline.ROMAN, flash.text.engine.TextBaseline.ASCENT, flash.text.engine.TextBaseline.DESCENT, flash.text.engine.TextBaseline.IDEOGRAPHIC_TOP, flash.text.engine.TextBaseline.IDEOGRAPHIC_CENTER, flash.text.engine.TextBaseline.IDEOGRAPHIC_BOTTOM, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>flash.text.engine.TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:firstBaselineOffset:get"><apiName>firstBaselineOffset</apiName><shortdesc>
		 TextLayoutFormat : spécifie la position de ligne de base de la première ligne du conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie la position de ligne de base de la première ligne du conteneur. La ligne de base à laquelle cette propriété fait référence dépend du niveau du conteneur local. Pour le chinois et le japonais, la valeur est <codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph> et pour toutes les autres langues, la valeur est <codeph>TextBaseline.ROMAN</codeph> La valeur du décalage entre l’encart supérieur (ou l’encart droit si la valeur de <codeph>blockProgression</codeph> est RL) du conteneur et la ligne de base de la première ligne peut être <codeph>BaselineOffset.ASCENT</codeph>, c’est-à-dire égale à la hauteur de la ligne,<codeph>BaselineOffset.LINE_HEIGHT</codeph>, c’est-à-dire égale à la hauteur de cette première ligne, ou n’importe quel nombre de valeur fixe pour indiquer une distance absolue. <codeph>BaselineOffset.AUTO</codeph> aligne la hauteur de la ligne sur l’encart supérieur du conteneur.<p><adobeimage alt="firstBaselineOffset1" href="../../../images/textLayout_FBO1.png"/><adobeimage alt="firstBaselineOffset2" href="../../../images/textLayout_FBO2.png"/><adobeimage alt="firstBaselineOffset3" href="../../../images/textLayout_FBO3.png"/><adobeimage alt="firstBaselineOffset4" href="../../../images/textLayout_FBO4.png"/></p>
		 <p>Les valeurs valides en tant que chaîne sont flashx.textLayout.formats.BaselineOffset.AUTO, flashx.textLayout.formats.BaselineOffset.ASCENT, flashx.textLayout.formats.BaselineOffset.LINE_HEIGHT, flashx.textLayout.formats.FormatValue.INHERIT, et les nombres de 1 à 1000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#BaselineOffset"><linktext>flashx.textLayout.formats.BaselineOffset</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontFamily:get"><apiName>fontFamily</apiName><shortdesc>
		 TextLayoutFormat : nom de la police à utiliser, ou liste de noms de police séparés par une virgule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nom de la police à utiliser, ou liste de noms de police séparés par une virgule. Pour le rendu de l’élément, le moteur d’exécution Flash sélectionne la première police disponible dans la liste. Par exemple Arial, Helvetica, _sans oblige le lecteur à rechercher Arial, puis Helvetica si Arial est introuvable, puis _sans lorsque ces deux polices sont introuvables.
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura pour valeur Arial.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
		 TextLayoutFormat : recherche de police à utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : recherche de police à utiliser. Si vous spécifiez <codeph>FontLookup.DEVICE</codeph>, les polices installées sur le système qui utilise le fichier SWF sont utilisées. Les polices de périphérique donnent la taille des fichiers d’animation, mais le texte n’est pas toujours restitué de la même façon selon les systèmes et plates-formes. Si vous spécifiez <codeph>FontLookup.EMBEDDED_CFF</codeph>, des polices vectorielles incorporées dans le fichier SWF publié sont utilisées. Les polices intégrées augmentent la taille du fichier SWF (parfois nettement), mais le texte est systématiquement affiché dans la police choisie. 
		 <p>Les valeurs valides sont flash.text.engine.FontLookup.DEVICE, flash.text.engine.FontLookup.EMBEDDED_CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEVICE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontSize:get"><apiName>fontSize</apiName><shortdesc>
		 TextLayoutFormat : taille du texte en pixels. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : taille du texte en pixels. 
		 <p>Les valeurs valides sont des nombres compris entre 1 et 720 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 12. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontStyle:get"><apiName>fontStyle</apiName><shortdesc>
		 TextLayoutFormat : style du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : style du texte. Peut être <codeph>FontPosture.NORMAL</codeph>, à utiliser en texte brut, ou <codeph>FontPosture.ITALIC</codeph> pour l’italique. Cette propriété s’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontPosture.NORMAL, flash.text.engine.FontPosture.ITALIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontPosture.xml"><linktext>flash.text.engine.FontPosture</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
		 TextLayoutFormat : épaisseur du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : épaisseur du texte. Peut être <codeph>FontWeight.NORMAL</codeph> pour une utilisation en texte brut ou <codeph>FontWeight.BOLD</codeph>. S’applique uniquement aux polices de périphérique (<codeph>fontLookup</codeph> est définie sur flash.text.engine.FontLookup.DEVICE).
		 <p>Les valeurs valides sont flash.text.engine.FontWeight.NORMAL, flash.text.engine.FontWeight.BOLD, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NORMAL. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontWeight.xml"><linktext>flash.text.engine.FontWeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:format:get"><apiName>format</apiName><shortdesc>  Propriétés TextLayoutFormat appliquées directement à cet élément. </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.formats:ITextLayoutFormat</apiValueClassifier></apiValueDef><apiDesc>  Propriétés TextLayoutFormat appliquées directement à cet élément. 
		 <p>Chaque élément peut se voir appliquer des propriétés grâce à son format. Les propriétés appliquées à cet élément remplacent des propriétés héritées du parent. Les propriétés appliquées à cet élément seront à leur tour héritées par les enfants de l’élément si elles ne sont pas remplacées sur l’enfant. Si aucune propriété n’est appliquée à l’élément, cette propriété est null. </p>
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:id:get"><apiName>id</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationRule:get"><apiName>justificationRule</apiName><shortdesc>
		 TextLayoutFormat : règle utilisée pour justifier le texte dans un paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : règle utilisée pour justifier le texte dans un paragraphe. La valeur par défaut, <codeph>FormatValue.AUTO</codeph>, justifie le texte en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour toutes les langues, sauf le japonais et le chinois, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustificationRule.SPACE</codeph>, qui ajoute un espace supplémentaire aux caractères d’espace. Pour le chinois et le japonais, <codeph>FormatValue.AUTO</codeph> devient <codeph>JustficationRule.EAST_ASIAN</codeph>. La justification change partiellement l’espacement de la ponctuation. Dans un texte en caractères romains, la virgule et les points japonais prennent une largeur de caractère complète, mais seulement la moitié de cette largeur dans un texte en caractères asiatiques. Par ailleurs, dans le texte en caractères asiatiques, l’espacement entre les signes de ponctuation séquentielle se rapproche, obéissant ainsi aux conventions typographiques asiatiques traditionnelles. Notez également, dans l’exemple ci-après, l’interligne qui est appliqué à la deuxième ligne des paragraphes. Dans la version asiatique, les deux dernières lignes sont décalées à gauche. Dans la version en caractères romains, la deuxième ligne et les lignes suivantes sont décalées à gauche. <p><adobeimage alt="justificationRule" href="../../../images/textLayout_justificationrule.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.JustificationRule.EAST_ASIAN, flashx.textLayout.formats.JustificationRule.SPACE, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#JustificationRule"><linktext>flashx.textLayout.formats.JustificationRule</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
		 TextLayoutFormat : style utilisé pour la justification du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : style utilisé pour la justification du paragraphe. Utilisé uniquement en combinaison avec <codeph>JustificationRule.EAST_ASIAN</codeph> comme paramètre <codeph>justificationRule</codeph>. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue sur <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph> pour toutes les langues. Les constantes définies par la classe JustificationStyle spécifient les options de gestion des caractères kinsoku, c’est-à-dire des caractères japonais qui ne peuvent pas s’afficher au début ou à la fin d’une ligne. Pour obtenir un texte plus étiré, spécifiez <codeph>JustificationStyle.PUSH-OUT-ONLY</codeph>. Si vous souhaitez un comportement similaire à celui obtenu avec le paramètre <codeph>justificationRule</codeph> de la règle <codeph>JustificationRule.SPACE</codeph>, utilisez <codeph>JustificationStyle.PRIORITIZE-LEAST-ADJUSTMENT</codeph>.
		 <p>Les valeurs valides sont flash.text.engine.JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT, flash.text.engine.JustificationStyle.PUSH_IN_KINSOKU, flash.text.engine.JustificationStyle.PUSH_OUT_ONLY, flashx.textLayout.formats.FormatValue.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur flashx.textLayout.formats.FormatValue.AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.JustificationStyle.xml"><linktext>flash.text.engine.JustificationStyle </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:kerning:get"><apiName>kerning</apiName><shortdesc>
		 TextLayoutFormat : le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : le crénage ajuste les pixels entre certaines paires de caractères pour améliorer la lisibilité. Le crénage est pris en charge pour toutes les polices qui disposent de tables de crénage.
		 <p>Les valeurs valides sont flash.text.engine.Kerning.ON, flash.text.engine.Kerning.OFF, flash.text.engine.Kerning.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.Kerning.xml"><linktext>flash.text.engine.Kerning </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:leadingModel:get"><apiName>leadingModel</apiName><shortdesc>
		 TextLayoutFormat : spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie le modèle d’interlignage, qui est une combinaison de la base et de la direction de l’interlignage. La base d’interlignage est la ligne de base à laquelle la propriété <codeph>lineHeight</codeph> fait référence. Le sens de l’interlignage détermine si la propriété <codeph>lineHeight</codeph> fait référence à la distance de la ligne de base d’une ligne par rapport à celle de la ligne précédente ou suivante. La valeur par défaut <codeph>FormatValue.AUTO</codeph> est résolue en fonction de la propriété <codeph>locale</codeph> du paragraphe. Pour le chinois et le japonais, il s’agit de <codeph>LeadingModel.IDEOGRAPHIC_TOP_DOWN</codeph> et pour tous les autres, il s’agit de <codeph>LeadingModel.ROMAN_UP</codeph>.<p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LB1.png"/><adobeimage alt="" href="../../../images/textLayout_LB2.png"/><adobeimage alt="" href="../../../images/textLayout_LB3.png"/></p><p><b/></p><p><adobeimage alt="" href="../../../images/textLayout_LD1.png"/><adobeimage alt="" href="../../../images/textLayout_LD2.png"/><adobeimage alt="" href="../../../images/textLayout_LD3.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.LeadingModel.ROMAN_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_UP, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_TOP_DOWN, flashx.textLayout.formats.LeadingModel.IDEOGRAPHIC_CENTER_DOWN, flashx.textLayout.formats.LeadingModel.APPROXIMATE_TEXT_FIELD, flashx.textLayout.formats.LeadingModel.ASCENT_DESCENT_UP, flashx.textLayout.formats.LeadingModel.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LeadingModel"><linktext>flashx.textLayout.formats.LeadingModel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
		 TextLayoutFormat : contrôle laquelle des ligatures qui sont définies dans la police peut être utilisée dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôle laquelle des ligatures qui sont définies dans la police peut être utilisée dans le texte. Les ligatures qui s’affichent pour chacun de ces paramètres dépendent de la police. Une ligature se produit lorsque plusieurs formes de lettres sont unies dans un seul glyphe. Les ligatures remplacent généralement des caractères consécutifs partageant des composants communs, par exemple les paires de lettres « fi », « fl » ou « ae ». Elles sont utilisées avec les jeux de caractères latins et non latins. Les ligatures activées par les valeurs de la classe LigatureLevel, <codeph>MINIMUM</codeph>, <codeph>COMMON</codeph>, <codeph>UNCOMMON</codeph>, et <codeph>EXOTIC</codeph>, sont cumulables. Chaque valeur active un nouvel ensemble de ligatures, mais comprend également ceux des types précédents. <p><b>Remarque :</b> lorsque vous utilisez les polices Arabic ou Syriac, <codeph>ligatureLevel</codeph> doit être défini sur MINIMUM ou une valeur supérieure.</p><p><adobeimage alt="ligatureLevel " href="../../../images/textLayout_ligatures.png"/></p>
		 <p>Les valeurs valides sont flash.text.engine.LigatureLevel.MINIMUM, flash.text.engine.LigatureLevel.COMMON, flash.text.engine.LigatureLevel.UNCOMMON, flash.text.engine.LigatureLevel.EXOTIC, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COMMON. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.LigatureLevel.xml"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineBreak:get"><apiName>lineBreak</apiName><shortdesc>
		 TextLayoutFormat : contrôle le retour à la ligne dans le conteneur (adopte la valeur par défaut si undefined pendant cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôle le retour à la ligne des mots dans le conteneur (adopte la valeur par défaut si undefined pendant la propagation en cascade). Le texte du conteneur peut être défini pour s’adapter à la largeur du conteneur (<codeph>LineBreak.TO_FIT</codeph>) ou pour aller à la ligne uniquement lors de caractères de retour chariot ou de saut de ligne (<codeph>LineBreak.EXPLICIT</codeph>).
		 <p>Les valeurs valides sont flashx.textLayout.formats.LineBreak.EXPLICIT, flashx.textLayout.formats.LineBreak.TO_FIT, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TO_FIT.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#LineBreak"><linktext>flashx.textLayout.formats.LineBreak</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineHeight:get"><apiName>lineHeight</apiName><shortdesc>
		 TextLayoutFormat : contrôles d’interlignage pour le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : contrôles d’interlignage pour le texte. La distance entre la ligne de base de la ligne précédente ou suivante (en fonction de <codeph>LeadingModel</codeph>) et la ligne de base de la ligne actuelle est égale à la quantité maximale de l’interlignage appliquée à n’importe quel caractère de la ligne. Il s’agit d’un nombre ou d’un pourcentage. Si vous spécifiez un pourcentage, entrez une valeur de chaîne, telle que 140 %. <p><adobeimage alt="lineHeight1" href="../../../images/textLayout_lineHeight1.jpg"/><adobeimage alt="lineHeight2" href="../../../images/textLayout_lineHeight2.jpg"/></p>
		 <p>Les valeurs numériques valides sont comprises entre -720 et 720.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura une valeur de 120 %. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:lineThrough:get"><apiName>lineThrough</apiName><shortdesc>
		 TextLayoutFormat : si la valeur est true, applique le style de formatage barré, une ligne au milieu du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : si la valeur est <codeph>true</codeph>, applique le style de formatage barré, une ligne au milieu du texte. 
		 <p>Les valeurs valides sont définies sur true, false et flashx.textLayout.formats.FormatValue.INHERIT. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur false. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkActiveFormat:set"><apiName>linkActiveFormat</apiName><shortdesc> équivalent à setStyle(linkActiveFormat,value).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> équivalent à setStyle(linkActiveFormat,value). Attend un dictionnaire de propriétés. Convertit un tableau d’objets avec clé et la valeur en tant que membres dans un dictionnaire.  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkHoverFormat:set"><apiName>linkHoverFormat</apiName><shortdesc> équivalent à setStyle(linkHoverFormat,value).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> équivalent à setStyle(linkHoverFormat,value). Attend un dictionnaire de propriétés. Convertit un tableau d’objets avec clé et la valeur en tant que membres dans un dictionnaire.  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:linkNormalFormat:set"><apiName>linkNormalFormat</apiName><shortdesc> équivalent à setStyle(linkNormalFormat,value).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/></apiValueDef><apiDesc> équivalent à setStyle(linkNormalFormat,value). Attend un dictionnaire de propriétés. Convertit un tableau d’objets avec clé et la valeur en tant que membres dans un dictionnaire.  </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:locale:get"><apiName>locale</apiName><shortdesc>
		 TextLayoutFormat : paramètres régionaux du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : paramètres régionaux du texte. Contrôle les transformations de casse et de forme. Les identifiants de langue standard tels que décrits dans la norme technique Unicode #35 sont utilisés. Par exemple en, en_US et en-US correspondent à l’anglais, ja au japonais. 
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur en. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc>
		 TextLayoutFormat : encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart inférieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord inférieur du conteneur et le texte. La valeur est un nombre.  <p> Avec le texte horizontal, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace au bas du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge. </p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc>
		 TextLayoutFormat : encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart à gauche en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord gauche du conteneur et le texte. La valeur est un nombre. <p> Avec le texte vertical, dans les conteneurs défilants à plusieurs colonnes, la première colonne et les suivantes affichent la marge sous forme d’espace à la fin du conteneur ; mais pour la dernière colonne, si le texte ne tient pas entièrement, vous devrez éventuellement le faire défiler pour voir la marge.</p>
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingRight:get"><apiName>paddingRight</apiName><shortdesc>
		 TextLayoutFormat : encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart à droite en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord droit du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paddingTop:get"><apiName>paddingTop</apiName><shortdesc>
		 TextLayoutFormat : encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : encart supérieur en pixels (adopte la valeur par défaut si undefined pendant la propagation en cascade). Espace entre le bord supérieur du conteneur et le texte. La valeur est un nombre. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur 0.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphEndIndent:get"><apiName>paragraphEndIndent</apiName><shortdesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord de la fin du paragraphe. Fait référence au bord droit dans un texte rédigé de gauche à droite et au bord gauche dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceAfter:get"><apiName>paragraphSpaceAfter</apiName><shortdesc>
		 TextLayoutFormat : un nombre qui spécifie la quantité d’espace, en pixels, à laisser après le paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui spécifie la quantité d’espace, en pixels, à laisser après le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceBefore</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphSpaceBefore:get"><apiName>paragraphSpaceBefore</apiName><shortdesc>
		 TextLayoutFormat : nombre qui spécifie la quantité d’espace, en pixels, à conserver avant le paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui spécifie la quantité d’espace, en pixels, à conserver avant le paragraphe. Réduit en tandem avec <codeph>paragraphSpaceAfter</codeph>. 
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:paragraphStartIndent:get"><apiName>paragraphStartIndent</apiName><shortdesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord du début du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui indique, en pixels, la valeur de retrait du bord du début du paragraphe. Fait référence au bord gauche dans un texte rédigé de gauche à droite et au bord droit dans un texte rédigé de droite à gauche.  
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeEnd:get"><apiName>parentRelativeEnd</apiName><shortdesc> Renvoie la fin relative de cet objet FlowElement dans le parent. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Renvoie la fin relative de cet objet FlowElement dans le parent. Si le parent est null cette propriété est toujours égale à <codeph>textLength</codeph>. Si le parent n’est pas null, la valeur est la somme des longueurs du texte et de toutes ses frères, qui est en fait le premier caractère du prochain objet FlowElement. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement"><linktext>FlowGroupElement</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parentRelativeStart:get"><apiName>parentRelativeStart</apiName><shortdesc> Renvoie le début relatif de cet objet FlowElement dans le parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Renvoie le début relatif de cet objet FlowElement dans le parent. Si le parent est null, cette valeur est toujours zéro. Si le parent n’est pas null, la valeur est la somme des longueurs de texte de tous ses frères précédents. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:parent:get"><apiName>parent</apiName><shortdesc> Renvoie le parent de ce objet FlowElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:FlowGroupElement</apiValueClassifier></apiValueDef><apiDesc> Renvoie le parent de ce objet FlowElement. Chaque objet FlowElement a au plus un parent. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
		 TextLayoutFormat : mode de rendu utilisé pour ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : mode de rendu utilisé pour ce texte. S’applique uniquement aux polices incorporées (la propriété <codeph>fontLookup</codeph> est définie sur <codeph>FontLookup.EMBEDDED_CFF</codeph>).
		 <p>Les valeurs valides sont flash.text.engine.RenderingMode.NORMAL, flash.text.engine.RenderingMode.CFF, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur CFF. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.RenderingMode.xml"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:styleName:get"><apiName>styleName</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tabStops:get"><apiName>tabStops</apiName><shortdesc>
		 TextLayoutFormat : spécifie les taquets de tabulation associés au paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie les taquets de tabulation associés au paragraphe. Les accesseurs Set peuvent contenir un tableau de flashx.textLayout.formats.TabStopFormat, une représentation sous forme de chaîne condensée, une valeur undefined ou <codeph>FormatValue.INHERIT</codeph>. La représentation sous forme de chaîne condensée est toujours convertie en tableau d’objets flashx.textLayout.formats.TabStopFormat. <p>Le format basé sur une chaîne est une liste de taquets de tabulation, où chaque taquet de tabulation est délimité par un ou plusieurs espaces. </p><p>Un taquet de tabulation prend la forme suivante : &lt;type d’alignement>&lt;position d’alignement>|&lt;symbole d’alignement>.</p><p>Le type d’alignement est un caractère unique. Il peut s’agir des caractères S, E, C ou D (ou des équivalents minuscules). S ou s correspond à start, E ou e à end, C ou c à center, D ou d à decimal. Le type d’alignement est facultatif. S’il n’est pas spécifié, sa valeur est par défaut S. </p><p>La position d’alignement est un nombre qui est spécifié conformément aux spécifications FXG des nombres (notation décimale ou scientifique). La position d’alignement est obligatoire. </p><p>La barre verticale permet de séparer la position d’alignement du symbole d’alignement, et elle ne doit être présente que si le symbole d’alignement est présent. </p><p> Le symbole d’alignement est facultatif si l’alignement est de type D et ne doit pas être présent si le type d’alignement est autre que D. Le symbole d’alignement peut se composer de n’importe quelle séquence de caractères se terminant par l’espace qui met fin au taquet de tabulation (pour le dernier taquet de tabulation, l’espace de fin est facultatif ; la fin du symbole d’alignement étant implicite). Un espace peut faire partie du symbole d’alignement s’il s’accompagne d’une barre oblique inverse (\). Une barre oblique inverse peut faire partie du symbole d’alignement si elle est convertie avec une autre barre oblique inverse (\\). Si l’alignement est de type D et que le symbole d’alignement n’est pas spécifié, il prendra la valeur null par défaut. </p><p>Si aucun taquet de tabulation n’est spécifié, l’action par défaut de la tabulation est la fin de la ligne. </p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur null. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlignLast:get"><apiName>textAlignLast</apiName><shortdesc>
		 TextLayoutFormat : alignement de la dernière (ou unique ligne dans le paragraphe par rapport au conteneur dans un texte justifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : alignement de la dernière (ou de l’unique) ligne du paragraphe par rapport au conteneur dans un texte justifié. Si la propriété <codeph>textAlign</codeph> est définie sur <codeph>TextAlign.JUSTIFY</codeph>, <codeph>textAlignLast</codeph> indique la façon dont la dernière ligne (ou la ligne unique s’il s’agit d’un seul bloc de lignes) est alignée. Les valeurs sont similaires à <codeph>textAlign</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlign:get"><apiName>textAlign</apiName><shortdesc>
		 TextLayoutFormat : alignement des lignes du paragraphe par rapport au conteneur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : alignement des lignes du paragraphe par rapport au conteneur. <codeph>TextAlign.LEFT</codeph> aligne les lignes le long du bord gauche du conteneur. <codeph>TextAlign.RIGHT</codeph> les aligne sur le bord droit. <codeph>TextAlign.CENTER</codeph> positionne la ligne à distance égale entre les bords gauche et droit. <codeph>TextAlign.JUSTIFY</codeph> répartit les lignes afin qu’elles remplissent l’espace. <codeph>TextAlign.START</codeph> équivaut à définir gauche dans du texte de gauche à droite ou droite dans du texte de droite à gauche. <codeph>TextAlign.END</codeph> revient à spécifier la droite pour un texte écrit de gauche à droite, ou à spécifier la gauche pour un texte écrit de droite à gauche.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextAlign.LEFT, flashx.textLayout.formats.TextAlign.RIGHT, flashx.textLayout.formats.TextAlign.CENTER, flashx.textLayout.formats.TextAlign.JUSTIFY, flashx.textLayout.formats.TextAlign.START, flashx.textLayout.formats.TextAlign.END, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur START. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextAlign"><linktext>flashx.textLayout.formats.TextAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textAlpha:get"><apiName>textAlpha</apiName><shortdesc>
		 TextLayoutFormat : valeur alpha (transparence) du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : valeur alpha (transparence) du texte. La valeur 0 est entièrement transparente et la valeur 1 est complètement opaque. Les objets d’affichage où <codeph>textAlpha</codeph> est défini sur 0 sont actifs, même s’ils sont invisibles.
		 <p>Les valeurs valides sont des nombres compris entre 0 et 1 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 1. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textDecoration:get"><apiName>textDecoration</apiName><shortdesc>
		 TextLayoutFormat : décoration du texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : décoration du texte. Permet d’appliquer un soulignement. Par défaut, aucun soulignement n’est appliqué. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextDecoration.NONE, flashx.textLayout.formats.TextDecoration.UNDERLINE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur NONE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextDecoration"><linktext>flashx.textLayout.formats.TextDecoration</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textIndent:get"><apiName>textIndent</apiName><shortdesc>
		 TextLayoutFormat : nombre qui indique la quantité, en pixels, pour mettre en retrait la première ligne du paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre qui indique la quantité, en pixels, pour mettre en retrait la première ligne du paragraphe. Une valeur de retrait négative pousse la ligne dans la marge, et probablement en dehors du conteneur. 
		 <p>Les valeurs valides sont des nombres compris entre -1000 et 1000 et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textJustify:get"><apiName>textJustify</apiName><shortdesc>
		 TextLayoutFormat : spécifie des options de justification de texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : spécifie des options de justification de texte. La valeur par défaut est <codeph>TextJustify.INTER_WORD</codeph>, ce qui signifie qu’un espace supplémentaire est ajouté aux espaces. <codeph>TextJustify.DISTRIBUTE</codeph> ajoute un espace supplémentaire aux espaces et entre chaque lettre. A utiliser uniquement en combinaison avec une valeur <codeph>justificationRule</codeph> de <codeph>JustificationRule.SPACE</codeph>.
		 <p>Les valeurs valides sont flashx.textLayout.formats.TextJustify.INTER_WORD, flashx.textLayout.formats.TextJustify.DISTRIBUTE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur INTER_WORD. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextJustify"><linktext>flashx.textLayout.formats.TextJustify</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textLength:get"><apiName>textLength</apiName><shortdesc>
		 Renvoie la longueur totale de texte administrée par cet objet FlowElement et ses enfants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Renvoie la longueur totale de texte administrée par cet objet FlowElement et ses enfants. Si un élément n’a aucun texte, la valeur de <codeph>textLength</codeph> est généralement la valeur zéro. 
		 
		 <p>Les objets ParagraphElement ont une dernière plage avec un caractère terminateur de paragraphe pour le dernier objet SpanElement. Le terminateur de paragraphe est inclus dans la valeur de la propriété textLength <codeph>textLength</codeph> de cet objet SpanElement et de tous ses parents. Il n’est pas inclus dans la propriété <codeph>text</codeph> de l’objet SpanElement.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/textLength"><linktext>textLength</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
		 TextLayoutFormat : détermine le nombre de degrés de rotation de ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : détermine le nombre de degrés de rotation de ce texte. 
		 <p>Les valeurs valides sont flash.text.engine.TextRotation.ROTATE_0, flash.text.engine.TextRotation.ROTATE_180, flash.text.engine.TextRotation.ROTATE_270, flash.text.engine.TextRotation.ROTATE_90, flash.text.engine.TextRotation.AUTO, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur AUTO. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextRotation.xml"><linktext>flash.text.engine.TextRotation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à gauche de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à gauche de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingLeft</codeph> est ajoutée aux valeurs dans la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingLeft</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille fontSize, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à droite de chaque caractère.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : nombre de pixels (ou pourcentage de taille <codeph>fontSize</codeph>, comme 120 %) indiquant la quantité de l’approche (crénage manuel) à appliquer à droite de chaque caractère. Si le crénage est activé, la valeur <codeph>trackingRight</codeph> est ajoutée aux valeurs dans la table de crénage de la police. Si le crénage est désactivé, la valeur <codeph>trackingRight</codeph> est utilisée comme valeur de crénage manuel. Prend en charge tant les valeurs positives que négatives. 
		 <p>Les valeurs valides sous forme de nombre sont comprises entre -1000 et 1000.</p>
		 <p>Les valeurs en pourcentage valides sont comprises entre -1000 % à 1000 %. </p>
		 <p>Les valeurs valides comprennent flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur 0. </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
		 TextLayoutFormat : le type de casse typographique utilisée pour ce texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : le type de casse typographique utilisée pour ce texte. Voici quelques exemples :<p><adobeimage alt="typographicCase " href="../../../images/textLayout_typographiccase.png"/></p>
		 <p>Les valeurs valides sont flashx.textLayout.formats.TLFTypographicCase.DEFAULT, flashx.textLayout.formats.TLFTypographicCase.CAPS_TO_SMALL_CAPS, flashx.textLayout.formats.TLFTypographicCase.UPPERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE, flashx.textLayout.formats.TLFTypographicCase.LOWERCASE_TO_SMALL_CAPS, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur DEFAULT. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TLFTypographicCase"><linktext>flashx.textLayout.formats.TLFTypographicCase</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:userStyles:get"><apiName>userStyles</apiName><shortdesc> Permet de lire les styles d’écriture de l’utilisateur sur un objet FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Permet de lire les styles d’écriture de l’utilisateur sur un objet FlowElement. Notez que la lecture de cette propriété rend une copie du dictionnaire de styles de l’utilisateur. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc>
		 TextLayoutFormat : alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : alignement vertical ou justification (adopte la valeur par défaut si undefined pendant la propagation en cascade). Indique la façon dont les éléments TextFlow s’alignent dans le conteneur.
		 <p>Les valeurs valides sont flashx.textLayout.formats.VerticalAlign.TOP, flashx.textLayout.formats.VerticalAlign.MIDDLE, flashx.textLayout.formats.VerticalAlign.BOTTOM, flashx.textLayout.formats.VerticalAlign.JUSTIFY, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété aura la valeur TOP.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#VerticalAlign"><linktext>flashx.textLayout.formats.VerticalAlign</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:whiteSpaceCollapse:get"><apiName>whiteSpaceCollapse</apiName><shortdesc>
		 TextLayoutFormat : réduit ou conserve les espaces lors de l’importation de texte dans un TextFlow. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
		 TextLayoutFormat : réduit ou conserve les espaces lors de l’importation de texte dans un TextFlow. <codeph>WhiteSpaceCollapse.PRESERVE</codeph> conserve tous les espaces. <codeph>WhiteSpaceCollapse.COLLAPSE</codeph> supprime les nouvelles lignes, les tabulations et l’interlignage ou les espaces dans un bloc de texte importé. Les caractères de balise de saut de ligne () et de séparateur de ligne Unicode sont conservés. 
		 <p>Les valeurs valides sont flashx.textLayout.formats.WhiteSpaceCollapse.PRESERVE, flashx.textLayout.formats.WhiteSpaceCollapse.COLLAPSE, flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie. </p>
		 <p>Si lors de la propagation en cascade, la valeur est undefined, cette propriété héritera ses valeurs d’un ancêtre. Si aucun ancêtre n’a défini cette propriété, elle aura la valeur COLLAPSE. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#WhiteSpaceCollapse"><linktext>flashx.textLayout.formats.WhiteSpaceCollapse</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tlf_internal:impliedElement:set"><apiName>impliedElement</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:FlowElement:tracking:set"><apiName>tracking</apiName><shortdesc>
		 Définit le suivi et est synonyme de la propriété trackingRight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Object"/></apiValueDef><apiDesc>
		 Définit le suivi et est synonyme de la propriété <codeph>trackingRight</codeph>. Spécifié sous forme d’un nombre de pixels ou un pourcentage de valeur <codeph>fontSize</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement/trackingRight"><linktext>trackingRight</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:LinkElement"><apiName>LinkElement</apiName><shortdesc> La classe LinkElement définit un lien vers un URI, qui est exécuté lorsque l’utilisateur clique dessus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> La classe LinkElement définit un lien vers un URI, qui est exécuté lorsque l’utilisateur clique dessus. La classe LinkElement est une sous-classe de la classe SubParagraphGroupElement et peut contenir un ou plusieurs objets FlowElement, par exemple un objet SpanElement qui stocke le texte du lien. Un objet LinkElement vide, qui ne contient pas d’objet FlowElement, est ignoré. 
	 <p>Si vous spécifiez une cible, elle doit avoir l’une des valeurs suivantes : 
	 <adobetable class="innertable">
	 
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry>Valeur cible</entry><entry>description</entry></row></thead><tbody><row>
	   <entry>_self</entry>
	   <entry>Remplace la page HTML actuelle. Si elle est dans un cadre ou un jeu de cadres, elle doit se charger dans ce cadre. S’il s’agit de la base du navigateur, il s’ouvre pour remplacer la page à partir de laquelle il provient. </entry>
	 </row><row>
	   <entry>_blank</entry>
	   <entry>Ouvre un nouveau nom de navigateur sans nom. </entry>
	 </row><row>
	   <entry>_parent</entry>
	   <entry>Remplace la page HTML dont il provient. </entry>
	 </row><row>
	   <entry>_top</entry>
	   <entry>Se charge dans le navigateur ouvert, en remplaçant tout ce qu’il contient, par exemple, un jeu de cadres. </entry>
	 </row></tbody></tgroup></adobetable>
	 </p>
	 
	 </apiDesc><example conref="examples\LinkElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkActiveFormat"><linktext>FlowElement.linkActiveFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkHoverFormat"><linktext>FlowElement.linkHoverFormat</linktext></link><link href="flashx.textLayout.elements.xml#FlowElement/linkNormalFormat"><linktext>FlowElement.linkNormalFormat</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.CLICK_click"><apiName>click</apiName><shortdesc> 
	 Distribué lorsque le lien est activé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.CLICK</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Distribué lorsque le lien est activé. Les clients peuvent remplacer la façon dont le lien gère cet événement en le gérant eux-mêmes et en appelant par défaut preventDefault(). 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT_rollOut"><apiName>rollOut</apiName><shortdesc> 
	 Distribué lorsque la souris sort du lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OUT</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Distribué lorsque la souris sort du lien.  
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER_rollOver"><apiName>rollOver</apiName><shortdesc>
	 Distribué lorsque la souris entre pour la première fois dans le lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.ROLL_OVER</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Distribué lorsque la souris entre pour la première fois dans le lien.  
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><shortdesc> 
	 Distribué lorsque la souris survole le lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Distribué lorsque la souris survole le lien.  
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><shortdesc> 
	 Distribué lorsque le bouton de la souris est relâché au-dessus d’un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_UP</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Distribué lorsque le bouton de la souris est relâché au-dessus d’un lien.  
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flashx.textLayout.elements:LinkElement_flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><shortdesc> 
	 Distribué lorsque l’utilisateur clique sur le bouton de la souris sur un lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flashx.textLayout.events.FlowElementMouseEvent.MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flashx.textLayout.events.FlowElementMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
	 Distribué lorsque l’utilisateur clique sur le bouton de la souris sur un lien. 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flashx.textLayout.elements:LinkElement:LinkElement"><apiName>LinkElement</apiName><shortdesc> Constructeur : crée une nouvelle occurrence LinkElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée une nouvelle occurrence LinkElement. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:LinkElement:addEventListener"><apiName>addEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#addEventListener()">
		</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Type d’événement.
		</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Fonction d’écouteur qui traite l’événement. Cette fonction doit accepter un objet Event comme paramètre unique et ne rien renvoyer, comme dans l’exemple ci-dessous :
		<p><codeph>function(evt:Event):void</codeph></p>
		Le nom de cette fonction n’a aucune importance.
		</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si l’écouteur est actif pendant la phase de capture ou pendant les phases cible et de propagation vers le haut. Si la propriété <codeph>useCapture</codeph> est définie sur <codeph>true</codeph>, l’écouteur traite l’événement uniquement pendant la phase de capture et non pendant les phases cible et de propagation vers le haut. Si la propriété <codeph>useCapture</codeph> est définie sur <codeph>false</codeph>, l’écouteur traite l’événement uniquement pendant les phases cible et de propagation vers le haut. Pour écouter l’événement dans les trois phases, appelez <codeph>addEventListener()</codeph> à deux reprises, une première fois avec la propriété <codeph>useCapture</codeph> définie sur <codeph>true</codeph>, puis une nouvelle fois avec <codeph>useCapture</codeph> définie sur <codeph>false</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Niveau de priorité de l’écouteur d’événement. La priorité est désignée par un entier de 32 bits. Plus le nombre est élevé, plus la priorité est élevée. Tous les écouteurs de priorité <i>n</i> sont traités avant les écouteurs de priorité <i>n-1</i>. Les écouteurs dont la priorité est identique sont traités dans l’ordre où ils ont été ajoutés. La priorité par défaut est 0. 
		</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si la référence à l’écouteur est forte ou faible. Une référence forte (valeur par défaut) empêche le nettoyage de votre écouteur, Cela n’est pas le cas avec une référence faible. <p>Les fonctions de membres de niveau classe n’étant pas soumises au nettoyage, vous pouvez définir <codeph>useWeakReference</codeph> sur <codeph>true</codeph> pour ces fonctions. Si vous définissez <codeph>useWeakReference</codeph> sur <codeph>true</codeph> pour un écouteur correspondant à une fonction imbriquée interne, la fonction sera nettoyée et ne sera donc pas permanente. Si vous créez des références à la fonction interne (enregistrée dans une autre variable), celle-ci n’est pas nettoyée et reste permanente.</p>
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#addEventListener()">
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>evt</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#dispatchEvent()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:hasEventListener"><apiName>hasEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#hasEventListener()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:removeEventListener"><apiName>removeEventListener</apiName><shortdesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Type d’événement.
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>Objet écouteur à supprimer.
		 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si l’écouteur a été enregistré pendant la phase de capture ou pendant les phases cible et de propagation vers le haut. Si l’écouteur a été enregistré pendant la phase de capture et pendant les phases cible et de propagation vers le haut, il est nécessaire d’appeler <codeph>removeEventListener()</codeph> à deux reprises pour le supprimer : une première fois en définissant <codeph>useCapture</codeph> sur <codeph>true</codeph>, puis une seconde fois avec la propriété <codeph>useCapture</codeph> définie sur <codeph>false</codeph>. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#removeEventListener().">
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:LinkElement:willTrigger"><apiName>willTrigger</apiName><shortdesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.events.IEventDispatcher#willTrigger()">
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:LinkElement:href:get"><apiName>href</apiName><shortdesc>
		 URI (Uniform Resource Identifier) associée à l’objet LinkElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 URI (Uniform Resource Identifier) associée à l’objet LinkElement. L’URI peut être tout URI pris en charge par la méthode <codeph>flash.net.navigateToURL()</codeph>. Cette propriété est mappée au paramètre <codeph>request</codeph> pour cette méthode.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.xml#net/navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:linkState:get"><apiName>linkState</apiName><shortdesc>
		 L’état actuel du lien. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 L’état actuel du lien. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkState"><linktext>LinkState</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:LinkElement:target:get"><apiName>target</apiName><shortdesc>
		 La valeur cible associée à l’objet LinkElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 La valeur cible associée à l’objet LinkElement. Les valeurs possibles sont « _self », « _blank », « _parent » et « _top ». Cette valeur est mappée au paramètre <codeph>window</codeph> de la méthode <codeph>flash.net.navigateToURL()</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.xml#net/navigateToURL()"><linktext>flash.net.navigateToURL()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:TCYElement"><apiName>TCYElement</apiName><shortdesc> 
	 La classe TCYElement (Tatechuuyoko - ta-tae-chu-Yo-ko) est une sous-classe de l’objet SubParagraphGroupElement pour que le texte soit tracé horizontalement au sein d’une ligne verticale. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SubParagraphGroupElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe TCYElement (Tatechuuyoko - ta-tae-chu-Yo-ko) est une sous-classe de l’objet SubParagraphGroupElement pour que le texte soit tracé horizontalement au sein d’une ligne verticale. Elle est généralement utilisée pour rendre les petits blocs de texte non japonais ou les chiffres, comme la date, plus lisibles. TCY peut être appliqué à du texte horizontal, mais n’a aucun effet sur le style de tracé, sauf si et jusqu’à ce qu’il soit activé verticalement. Les blocs TCY ne contenant pas de texte sont supprimés de l’enchaînement de texte pendant le processus de normalisation. 
	 <p>
	 Dans l’exemple ci-dessous, l’image sur la droite indique TCY appliqué au nombre 57, tandis que l’image sur la gauche n’a aucun TCY mis en forme. </p>
	 <p><adobeimage alt="TCYElement" border="0" href="../../../images/textLayout_TCYElement.png"/>
	 </p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:TCYElement:TCYElement"><apiName>TCYElement</apiName><shortdesc> Constructeur : crée une nouvelle occurrence TCYElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée une nouvelle occurrence TCYElement. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:OverflowPolicy"><apiName>OverflowPolicy</apiName><shortdesc>
	  La classe OverFlowPolicy définit un ensemble de constantes pour la propriété overflowPolicy de la classe IConfiguration. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  La classe OverflowPolicy définit un ensemble de constantes pour la propriété <codeph>overflowPolicy</codeph> de la classe IConfiguration. Cette opération définit la façon dont le composeur va traiter les lignes à la fin de la zone de composition. 
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_ANY"><apiName>FIT_ANY</apiName><shortdesc> 
	 Ajustez la ligne dans la zone de composition si une partie de la ligne est ajustée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitAny</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Ajustez la ligne dans la zone de composition si une partie de la ligne est ajustée. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:OverflowPolicy:FIT_DESCENDERS"><apiName>FIT_DESCENDERS</apiName><shortdesc> 
	 Adaptez la ligne dans la zone de composition si la zone à partir du haut de la ligne de base est ajustée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fitDescenders</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	 Adaptez la ligne dans la zone de composition si la zone à partir du haut de la ligne de base est ajustée. 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:GlobalSettings"><apiName>GlobalSettings</apiName><shortdesc> Configuration qui s’applique à tous les objets TextFlow.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> Configuration qui s’applique à tous les objets TextFlow.
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.elements:GlobalSettings:tlf_internal:enableDefaultTabStops:get"><apiName>enableDefaultTabStops</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="tlf_internal"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:enableSearch:get"><apiName>enableSearch</apiName><shortdesc> Indique si le texte sera visible à l’indexeur d’un moteur de recherche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc> Indique si le texte sera visible à l’indexeur d’un moteur de recherche. Par défaut, cette valeur est définie sur <codeph>true</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:fontMapperFunction:get"><apiName>fontMapperFunction</apiName><shortdesc> 
		Spécifie le rappel utilisé pour la substitution de polices.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
		Spécifie le rappel utilisé pour la substitution de polices. Le rappel prend un objet <codeph>flash.text.engine.FontDescription</codeph> et, le cas échéant, le met à jour. Après la définition d’un nouveau rappel de substitution de polices ou la modification du comportement du rappel existant, le client doit appeler explicitement <codeph>flashx.textLayout.elements.TextFlow.invalidateAllFormats</codeph> pour chaque enchaînement concerné. Cela garantit que chaque fois qu’un élément de nœud terminal de l’enchaînement est recomposé, l’objet FontDescription qui lui est appliqué est recalculé et le rappel est invoqué. 
		
		</apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.FontDescription.xml"><linktext>FontDescription</linktext></link><link href="" invalidHref="flashx.textLayout.elements.TextFlow.invalidateAllFormats.xml"><linktext>Invalidateallformats </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resolveFontLookupFunction:get"><apiName>resolveFontLookupFunction</apiName><shortdesc> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
		     
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link><link href="flashx.textLayout.formats.xml#ITextLayoutFormat"><linktext>flashx.textLayout.formats.ITextLayoutFormat</linktext></link><link href="" invalidHref="flash.text.engine.ElementFormat.xml"><linktext/></link><link href="" invalidHref="flash.text.engine.FontLookup.xml"><linktext>flash.text.engine.FontLookup </linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:GlobalSettings:resourceStringFunction:get"><apiName>resourceStringFunction</apiName><shortdesc> Fonction qui prend deux paramètres, un ID de ressource et un tableau facultatif de paramètres à remplacer dans la chaîne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> Fonction qui prend deux paramètres, un ID de ressource et un tableau facultatif de paramètres à remplacer dans la chaîne. La chaîne est de forme "Contenu {0} plus de contenu {1}". Les paramètres sont lus depuis le tableau facultatif et remplacés par les sous-chaînes entre parenthèses. TLF fournit une implémentation par défaut avec des chaînes par défaut. Les clients peuvent remplacer cette fonction par leur propre implémentation en vue de la localisation.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:BreakElement"><apiName>BreakElement</apiName><shortdesc> 
	La classe BreakElement définit un saut de ligne, ce qui permet de créer un saut de ligne dans le texte sans créer un nouveau paragraphe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:SpecialCharacterElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	La classe BreakElement définit un saut de ligne, ce qui permet de créer un saut de ligne dans le texte sans créer un nouveau paragraphe. Il insère un caractère U+2028 dans le texte du paragraphe. 
	
	<p><b>Remarque</b> : cette classe sert avant tout à prendre en charge les éléments de saut de ligne dans la balise MXML. Pour créer des sauts de ligne, vous pouvez ajouter des caractères de nouvelle ligne (\n) directement dans le texte comme suit : </p>
	
	<codeblock rev="3.0">
	spanElement1.text += '\n';
	</codeblock>
	
	</apiDesc><example conref="examples\BreakElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#SpanElement"><linktext>SpanElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:BreakElement:BreakElement"><apiName>BreakElement</apiName><shortdesc> Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur. 
		
		</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="flashx.textLayout.elements:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> La classe InlineGraphicElement gère les objets graphiques qui s’affichent en ligne dans le texte. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flashx.textLayout.elements:FlowLeafElement</apiBaseClassifier></apiClassifierDef><apiDesc> La classe InlineGraphicElement gère les objets graphiques qui s’affichent en ligne dans le texte.  
	 
	 <p>Vous pouvez incorporer un graphique ou toute classe DisplayObject ou spécifier une URL pour l’emplacement de l’image. Les propriétés <codeph>hauteur</codeph> et <codeph>largeur</codeph> de la classe InlineGraphicElement contrôlent la taille réelle de l’image à afficher. Ces valeurs contrôlent également l’espace à allouer à l’élément graphique dans l’objet TextLine contenant l’image. Les propriétés <codeph>hauteur</codeph> et <codeph>largeur</codeph> peuvent être soit :</p>
	 <ol>
	 <li>un nombre de pixels</li>
	 <li>un pourcentage de la mesure la taille de l’image</li>
	 <li>la constante, « auto », qui calcule la taille (valeur par défaut) </li>
	 </ol>
	 Il existe trois propriétés, ou accesseurs, appartenant à la largeur et à la hauteur d’une image : 
	 <ul>
	 <li>Les propriétés de <codeph>largeur</codeph> et de <codeph>hauteur</codeph></li>
	 <li>Les propriétés <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph>, qui sont les valeurs de largeur et de hauteur de l’image au moment du chargement</li>
	 <li>Les propriétés <codeph>actualWidth</codeph> ou <codeph>actualHeight</codeph>, qui forment l’affichage en cours et composent la largeur et la hauteur de l’image telle que calculée à partir des valeurs de <codeph>largeur</codeph> ou <codeph>hauteur</codeph> et de <codeph>measuredWidth</codeph> ou <codeph>measuredHeight</codeph></li>
	 </ul>
	 <p>Les valeurs des propriétés <codeph>actualWidth</codeph> et <codeph>actualHeight</codeph> sont toujours zéro jusqu’à ce que l’image soit chargée.</p>
	 
	 <p>Si la <codeph>source</codeph> est spécifiée comme un URI, l’image est chargée de manière asynchrone. S’il s’agit d’une classe DisplayObject, l’objet TextLayout utilise les valeurs de <codeph>largeur</codeph> et de <codeph>hauteur</codeph> au moment où l’image est définie dans l’objet InlineGraphicElement en tant que <codeph>measuredHeight</codeph> et <codeph>measuredWidth</codeph> ; ses valeurs de largeur et de hauteur sont lues immédiatement.</p>
	 <p><b>Remarques</b> : pour les images qui sont chargées de manière asynchrone, l’utilisateur doit écouter un événement StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE sur l’objet TextFlow et appeler le contrôleur <codeph>IFlowComposer.updateAllControllers()</codeph> pour que l’image s’affiche. La valeur de <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph> pour les images en cours de chargement est de zéro.</p>
	 
	 <p>Certaines images en ligne sont des animations ou des vidéos qui possèdent éventuellement du son. Elles commencent à s’exécuter à leur première composition après avoir terminé leur chargement. Elles n’arrêtent pas de s’exécuter tant que le composeur flowComposer de l’objet TextFlow est défini sur null. A ce moment elles sont arrêtées et déchargées. </p>
	 
	 
	 <ol>
	 	<li> </li>.
	 <li>  </li>
	 	<li> </li>
	 </ol>
	 </apiDesc><example conref="examples\InlineGraphicElementExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="" invalidHref="flash.display.DisplayObject.xml"><linktext>Classe DisplayObject</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>flashx.textLayout.compose.IFlowComposer.updateAllControllers()</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>StatusChangeEvent</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:InlineGraphicElement:InlineGraphicElement"><apiName>InlineGraphicElement</apiName><shortdesc> Constructeur : crée un nouvel objet InlineGraphicElement
		 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Constructeur : crée un nouvel objet InlineGraphicElement
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualHeight:get"><apiName>actualHeight</apiName><shortdesc> La hauteur réelle en vigueur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> La hauteur réelle en vigueur. Il s’agit de l’affichage et de la hauteur de composition qui sont calculés à partir des propriétés <codeph>hauteur</codeph> et <codeph>measuredHeight</codeph>.
		
		<p>Les valeurs de la propriété <codeph>actualHeight</codeph> sont calculées en fonction de la table suivante :</p>
		<adobetable class="innertable">
		
		
		
		
		<tgroup cols="2"><thead><row><entry>propriété de hauteur</entry><entry>actualHeight</entry></row></thead><tbody><row>
		  <entry>auto</entry>
		  <entry>measuredheight</entry>
		</row><row>
		  <entry>h un pour cent </entry>
		  <entry>Pourcentage h de measuredheight</entry>
		</row><row>
		  <entry>h un nombre </entry>
		  <entry>h</entry>
		</row></tbody></tgroup></adobetable>
		<p><b>Remarques</b> : si l’image en ligne est un objet DisplayObject, sa largeur et sa hauteur sont lues immédiatement. Si les valeurs <codeph>measuredWidth</codeph> ou <codeph>measuredHeight</codeph> sont zéro, alors tous les claculs automatiques qui entraîneraient une division par zéro définissent le résultat sur zéro.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>height</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:actualWidth:get"><apiName>actualWidth</apiName><shortdesc> La largeur réelle en vigueur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> La largeur réelle en vigueur. Il s’agit de l’affichage et de la largeur de composition qui sont calculés à partir des propriétés de <codeph>largeur</codeph> et <codeph>measuredWidth</codeph>.
		
		<p>Les valeurs de la propriété <codeph>actualWidth</codeph> sont calculées en fonction de la table suivante :</p>
		<adobetable class="innertable">
		
		
		
		
		<tgroup cols="2"><thead><row><entry>propriété de largeur</entry><entry>actualWidth</entry></row></thead><tbody><row>
		  <entry>auto</entry>
		  <entry>measuredWidth</entry>
		</row><row>
		  <entry>w un pour cent </entry>
		  <entry>Pourcentage w de measuredWidth</entry>
		</row><row>
		  <entry>w un nombre </entry>
		  <entry>w</entry>
		</row></tbody></tgroup></adobetable>
		
		<p><b>Remarques</b> : si l’image en ligne est un objet DisplayObject, sa largeur et sa hauteur sont lues immédiatement. Si les valeurs <codeph>measuredWidth</codeph> ou <codeph>measuredHeight</codeph> sont zéro, alors tous les claculs automatiques qui entraîneraient une division par zéro définissent le résultat sur zéro.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>largeur</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc> L’image incorporée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc> L’image incorporée.  
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:height:get"><apiName>height</apiName><shortdesc> La hauteur de l’image. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		  </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> La hauteur de l’image. Peut être « auto » , un nombre de pixels ou un pourcentage de la hauteur mesurée.  
		 
		 <p>Les valeurs valides sont flashx.textLayout.formats.FormatValue.AUTO et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Les valeurs valides sous forme de nombre sont comprises entre 0 et 32000.</p>
		 <p>Les valeurs valides sous forme de pourcentage sont comprises entre 0 et 1000000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie.</p>
		 <p>Si la valeur est undefined ou "inherit", InlineGraphicElement utilise la valeur par défaut "auto".</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredHeight"><linktext>measuredHeight</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc> La hauteur naturelle de l’image. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> La hauteur naturelle de l’image. Il s’agit de la hauteur de l’image lors du chargement. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualHeight"><linktext>actualHeight</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/height"><linktext>hauteur</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc> La largeur naturelle de l’image. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> La largeur naturelle de l’image. Il s’agit de la largeur de l’image lors du chargement. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/width"><linktext>largeur</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:source:get"><apiName>source</apiName><shortdesc> Définit la source pour l’image. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc> Définit la source pour l’image. La valeur peut être une chaîne qui est interprétée comme un URI, une classe qui est interprétée comme la classe d’un DisplayObject incorporé, une occurrence DisplayObject ou un objet URLRequest. Crée un objet DisplayObject et, si l’objet InlineGraphicElement est ajouté dans une classe ParagraphElement d’un objet TextFlow, entraîne son affichage en ligne dans le texte. 
		 
		 </apiDesc><example conref="examples\InlineGraphicElement_sourceExample.as"/></apiValueDetail></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:status:get"><apiName>status</apiName><shortdesc> L’état actuel de l’image. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> L’état actuel de l’image. Sur chaque changement d’état, l’objet TextFlow propriétaire envoie un événement StatusChangeEvent. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link><link href="flashx.textLayout.events.xml#StatusChangeEvent"><linktext>flashx.textLayout.events.StatusChangeEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:InlineGraphicElement:width:get"><apiName>width</apiName><shortdesc> La largeur de l’image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiException><apiDesc>lorsque la valeur définie n’est pas située dans les limites de cette propriété
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> La largeur de l’image. La valeur peut être « auto » , un nombre de pixels ou un pourcentage de la largeur mesurée. 
		 
		 <p>Les valeurs valides sont flashx.textLayout.formats.FormatValue.AUTO et flashx.textLayout.formats.FormatValue.INHERIT.</p>
		 <p>Les valeurs valides sous forme de nombre sont comprises entre 0 et 32000.</p>
		 <p>Les valeurs valides sous forme de pourcentage sont comprises entre 0 et 1000000.</p>
		 <p>La valeur par défaut est undefined, ce qui indique qu’elle n’est pas définie.</p>
		 <p>Si la valeur est undefined ou "inherit", InlineGraphicElement utilise la valeur par défaut "auto".</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElement/actualWidth"><linktext>actualWidth</linktext></link><link href="flashx.textLayout.elements.xml#InlineGraphicElement/measuredWidth"><linktext>measuredWidth</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.elements:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc> 
	 La classe FlowGroupElement est la classe de base pour les objets FlowElement qui peuvent avoir un tableau d’enfants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><DefaultProperty name="mxmlChildren"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flashx.textLayout.elements:FlowElement</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 La classe FlowGroupElement est la classe de base pour les objets FlowElement qui peuvent avoir un tableau d’enfants. Ces classes comprennent des objets TextFlow, ParagraphElement, DivElement et LinkElement. 
	 
	 <p>Vous ne pouvez pas créer un objet FlowGroupElement directement. Appeler un nouvel objet <codeph>FlowGroupElement()</codeph> renvoie une exception d’erreur.</p>
 	 
 	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#DivElement"><linktext>DivElement</linktext></link><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>LinkElement</linktext></link><link href="flashx.textLayout.elements.xml#ParagraphElement"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.elements:FlowGroupElement:FlowGroupElement"><apiName>FlowGroupElement</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChildAt"><apiName>addChildAt</apiName><shortdesc> 
		 Ajoute un objet FlowElement enfant à la position d’index spécifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’<codeph>index</codeph> est hors limite.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>L’enfant FlowElement ajouté 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>L’index de la position à laquelle ajouter l’élément enfant, la première position étant 0. 
		 </apiDesc></apiParam><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>L’élément enfant à ajouter. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Ajoute un objet FlowElement enfant à la position d’index spécifiée. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:addChild"><apiName>addChild</apiName><shortdesc> 
		 Ajoute un objet FlowElement objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>L’enfant FlowElement ajouté 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>L’élément enfant à ajouter. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Ajoute un objet FlowElement enfant. Le nouvel enfant est ajouté à la fin de la liste des enfants. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_addChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findChildIndexAtPosition"><apiName>findChildIndexAtPosition</apiName><shortdesc>
		 En fonction d’une position de texte relative, recherchez l’index du premier objet FlowElement enfant qui contient la position relative. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>index du premier élément enfant contenant <codeph>relativePosition</codeph>
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>	la position relative à cet élément. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 En fonction d’une position de texte relative, recherchez l’index du premier objet FlowElement enfant qui contient la position relative. Plusieurs enfants peuvent contenir la position relative en raison de la longueur zéro des objets FlowElement. 
		  
		 <p>Examinez les enfants pour trouver l’objet FlowElement qui contient la position relative. La position relative fournie est relative à cet objet FlowElement. </p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findChildIndexAtPositionExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:findLeaf"><apiName>findLeaf</apiName><shortdesc>
		 En fonction d’une position du texte relative, recherchez l’élément feuille qui contient la position. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>l’élément feuille contenant la position relative. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>relativePosition</apiItemName><apiType value="int"/><apiDesc>index de texte relatif à rechercher. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 En fonction d’une position du texte relative, recherchez l’élément feuille qui contient la position.  
		 
		 <p>Recherche vers le bas dans la hiérarchie pour trouver la classe FlowLeafElement qui contient la position spécifiée. La position spécifiée est relative à cet objet FlowElement. </p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_findLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildAt"><apiName>getChildAt</apiName><shortdesc> 
		 Renvoie l’enfant de l’objet FlowElement à l’index spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>l’objet FlowElement enfant à la position spécifiée. 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>la position à laquelle rechercher l’objet FlowElement. 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Renvoie l’enfant de l’objet FlowElement à l’index spécifié. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getChildIndex"><apiName>getChildIndex</apiName><shortdesc> 
		 Recherche dans les enfants pour l’objet FLowElement et renvoie sa position d’index. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La position d’index de l’enfant spécifié. Si l’<codeph>enfant</codeph> est introuvable, renvoie -1.
		  
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>L’élément de l’objet FlowElement à localiser parmi les enfants. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Recherche dans les enfants pour l’objet FLowElement et renvoie sa position d’index. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getFirstLeaf"><apiName>getFirstLeaf</apiName><shortdesc>
		 Renvoie le premier objet FlowLeafElement descendant de ce groupe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le premier objet FlowLeafElement. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Renvoie le premier objet FlowLeafElement descendant de ce groupe. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getFirstLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getLastLeaf"><apiName>getLastLeaf</apiName><shortdesc>
		 Renvoie le dernier objet FlowLeafElement descendant de ce groupe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>le dernier objet FlowLeafElement. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowLeafElement</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Renvoie le dernier objet FlowLeafElement descendant de ce groupe. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_getLastLeafExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:getText"><apiName>getText</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>relativeStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>relativeEnd</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>paragraphSeparator</apiItemName><apiType value="String"/><apiData> </apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChildAt"><apiName>removeChildAt</apiName><shortdesc> 
		 Supprime l’objet FlowElement enfant de la position d’index spécifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’<codeph>index</codeph> est hors limite.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>l’objet FlowElement enfant supprimé de la position spécifiée. 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="uint"/><apiDesc>position à partir de laquelle supprimer l’élément enfant. 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Supprime l’objet FlowElement enfant de la position d’index spécifiée. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildAtExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:removeChild"><apiName>removeChild</apiName><shortdesc> 
		 Supprime l’objet FlowElement enfant spécifié du groupe. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’<codeph>enfant</codeph> est introuvable.
		 
		 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>L’objet FlowElement enfant supprimé 
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiDesc>L’élément enfant à supprimer
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Supprime l’objet FlowElementenfant spécifié du groupe. 
		 
		 </apiDesc><example conref="examples\FlowGroupElement_removeChildExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:replaceChildren"><apiName>replaceChildren</apiName><shortdesc>
		 Remplace les éléments enfant dans le groupe avec les nouveaux éléments spécifiés. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>L’index <codeph>beginChildIndex</codeph> ou <codeph>endChildIndex</codeph> spécifié est hors limite.
	     
	     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginChildIndex</apiItemName><apiType value="int"/><apiDesc>La valeur d’index pour la position de début de la plage de remplacement dans le tableau des enfants. 
		 </apiDesc></apiParam><apiParam><apiItemName>endChildIndex</apiItemName><apiType value="int"/><apiDesc>La valeur d’index pour la position de fin de la plage de remplacement dans le tableau des enfants. 
		 </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/><apiDesc>Les éléments à utiliser pour remplacer la plage d’éléments spécifiés. Peut être une séquence contenant des éléments d’enchaînement ou des tableaux ou des vecteurs qui y sont associés. 
		  
	     </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remplace les éléments enfant dans le groupe avec les nouveaux éléments spécifiés. Utilisez les paramètres <codeph>beginChildIndex</codeph> et <codeph>endChildIndex</codeph> pour diriger l’opération comme suit :
		 <p><ul>
		 <li>Pour supprimer des éléments, ne transmettez pas d’éléments de remplacement. </li>
		 <li>Pour insérer des éléments, transmettez les mêmes valeurs pour <codeph>beginChildIndex</codeph> et <codeph>endChildIndex</codeph>. Les nouveaux éléments sont insérés avant l’index spécifié.</li>
		 <li>Pour annexer des éléments, transmettez le paramètre <codeph>numChildren</codeph> pour les paramètres <codeph>beginChildIndex</codeph> et <codeph>endChildIndex</codeph>.</li>
		 </ul></p>
		 <p>Dans le cas contraire, cette méthode remplace les éléments spécifiés, en commençant par l’élément à <codeph>beginChildIndex</codeph> et jusqu’à <codeph>endChildIndex</codeph> mais sans l’inclure.</p>
		 
		 </apiDesc><example conref="examples\FlowGroupElement_replaceChildrenExample.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.elements:FlowGroupElement:splitAtIndex"><apiName>splitAtIndex</apiName><shortdesc> 
		 Divise cet objet à la position spécifiée par le paramètre childIndex. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>si <codeph>childIndex</codeph> est supérieur à la longueur des enfants.
		 
		 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>le nouvel objet FlowGroupElement. 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.elements:FlowGroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>childIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc> 
		 Divise cet objet à la position spécifiée par le paramètre <codeph>childIndex</codeph>. Si cet élément de groupe a un parent, il crée une copie simple de cet objet et remplace ses enfants par les éléments jusqu’à l’index. Déplace les éléments suivant le paramètre <codeph>childIndex</codeph> dans la copie.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.elements:FlowGroupElement:mxmlChildren:get"><apiName>mxmlChildren</apiName><shortdesc> 
		 Ajoute un tableau d’enfants à cet objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiException><apiDesc>si l’élément array n’est pas un objet FlowElement ou String 
		 </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException></apiValueDef><apiDesc> 
		 Ajoute un tableau d’enfants à cet objet. Utilise la méthode <codeph>replaceChildren()</codeph> pour ajouter chaque élément du tableau. Conçu pour être utilisé au cours d’une importation compilée mxml. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowGroupElement/replaceChildren()"><linktext>FlowGroupElement.replaceChildren()</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.elements:FlowGroupElement:numChildren:get"><apiName>numChildren</apiName><shortdesc> 
		Renvoie le nombre d’enfants FlowElement que possède cet objet FlowGroupElement. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		Renvoie le nombre d’enfants FlowElement que possède cet objet FlowGroupElement. 
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>