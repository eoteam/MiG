<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.compose"><apiName>flashx.textLayout.compose</apiName><apiDetail/><apiClassifier id="flashx.textLayout.compose:ITextLineCreator"><apiName>ITextLineCreator</apiName><shortdesc> 
	 ITextLineCreator definiert eine Schnittstelle zum Erstellen von TextLine-Objekten für eine IFlowComposer-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 ITextLineCreator definiert eine Schnittstelle zum Erstellen von TextLine-Objekten für eine IFlowComposer-Instanz.
	 
	 <p>Die ITextLineCreator-Schnittstelle bricht Methoden zur FTE-Zeilenerstellung um. Es gibt im Allgemeinen zwei Gründe, aus denen sich die Nutzung dieser Schnittstelle zur Steuerung der Zeilenerstellung in Anwendungen anbieten könnte. 1. Wenn zu der Anwendung eine SWF-Datei gehört, die eine Schriftart enthält, und Sie diese Schriftart aus einer anderen SWF-Datei verwenden möchten, können Sie die Schriftart wiederverwenden, wenn die TextLine aus derselben SWF-Datei erstellt wurde, aus der die Schriftart stammt. 2. Sie können eine kürzere Neuerstellungszeit erzielen, indem Sie vorhandene TextLines verwenden. TLF führt dies intern durch. Bei der Wiederverwendung wird „recreateTextLine“ statt „createTextLine“ aufgerufen. Ihre Anwendung hat unter Umständen zusätzliche bekannte TextLines, die wiederverwendet werden können. Falls dem so ist, können Sie in Ihrer Implementierung von „createTextLine“ „TextBlock.recreateTextLine“ mit der Zeile aufrufen, die statt „TextBlock.createTextLine“ wiederverwendet werden soll.</p>
	 
	 </apiDesc><example conref="examples\ITextLineCreator_ClassExample.as"/></apiClassifierDetail><related-links><link href="" invalidHref="flast.text.engine.TextLine.xml"><linktext>flast.text.engine.TextLine</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer"><linktext>flashx.textLayout.compose.IFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:ITextLineCreator:flashx.textLayout.compose:ITextLineCreator:createTextLine"><apiName>createTextLine</apiName><shortdesc> 
		 Erstellt ein TextLine-Objekt für einen Flow-Composer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLine - das erstellte TextLine-Objekt
		  
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>textBlock</apiItemName><apiType value="flash.text.engine:TextBlock"/><apiDesc>Das TextBlock-Objekt, für das die Zeile erstellt werden soll.
		 </apiDesc></apiParam><apiParam><apiItemName>previousLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiData>null</apiData><apiDesc>Die vorherige für den TextBlock erstellte Zeile, falls vorhanden.
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiData>1000000</apiData><apiDesc>Die maximale Breite der Zeile.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0.0</apiData><apiDesc>Ein optionaler Offsetwert.
		 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Im Fall von <codeph>true</codeph> muss zumindest ein Zeichen oder eine Inline-Grafik in die Zeile eingefügt werden, selbst wenn dieses Element zur Folge hat, dass die Zeile den Wert im <codeph>width</codeph>-Parameter überschreitet.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Erstellt ein TextLine-Objekt für einen Flow-Composer.
		 
		 <p>Aufgerufen von einem Flow-Composer, wenn eine Textzeile erstellt werden muss.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:ITextLineCreator:flashx.textLayout.compose:ITextLineCreator:recreateTextLine"><apiName>recreateTextLine</apiName><shortdesc> 
		 Erstellt ein TextLine-Objekt für einen Flow-Composer neu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLine - das neu erstellte TextLine-Objekt
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>textBlock</apiItemName><apiType value="flash.text.engine:TextBlock"/><apiDesc>Das TextBlock-Objekt, für das die Zeile erstellt werden soll.
		 </apiDesc></apiParam><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>Die vorherige für den TextBlock erstellte Zeile, falls vorhanden.
		 </apiDesc></apiParam><apiParam><apiItemName>previousLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiData>null</apiData><apiDesc>Die maximale Breite der Zeile.
		 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiData>1000000</apiData><apiDesc>Ein optionaler Offsetwert.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0.0</apiData><apiDesc>Im Fall von <codeph>true</codeph> muss zumindest ein Zeichen oder eine Inline-Grafik in die Zeile eingefügt werden, selbst wenn dieses Element zur Folge hat, dass die Zeile den Wert im <codeph>width</codeph>-Parameter überschreitet.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc> 
		 Erstellt ein TextLine-Objekt für einen Flow-Composer neu.
		 
		 <p>Aufgerufen von einem Flow-Composer, wenn eine Textzeile neu erstellt werden muss.</p>
		 
		 <p><b>Hinweis:</b> Die TextBlock <codeph>recreateTextLine()</codeph>-Methode ist ab Flash Player 10.1 und AIR 2.0 verfügbar. Wenn Sie diese Methode so implementieren möchten, dass sie mit früheren Laufzeitumgebungen kompatibel ist, testen Sie, ob die <codeph>recreateTextLine()</codeph>-Methode auf dem TextBlock-Objekt vorhanden ist, bevor Sie sie aufrufen.</p>
		  
		 </apiDesc><example conref="examples\ITextLineCreator_recreateTextLine.as"/></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> 
	 Die TextFlowLine-Klasse repräsentiert eine einzelne Textzeile in einem Textfluss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseInterface>flashx.textLayout.compose:IVerticalJustificationLine</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Die TextFlowLine-Klasse repräsentiert eine einzelne Textzeile in einem Textfluss.
	 
	 <p>Verwenden Sie diese Klasse, um auf Informationen über die Zusammenstellung einer Textzeile zuzugreifen: die Position, Höhe, Breite usw. Bei einer Änderung des Textflusses (TextFlow) werden die Zeilen unmittelbar vor und an der Position der Änderung als ungültig markiert, da sie neu zusammengestellt werden müssen. Die Zeilen nach der Änderung sind möglicherweise nicht direkt beschädigt, können aber bei der Zusammenstellung des Texts neu erzeugt werden. Sie können auf eine beschädigte TextFlowLine zugreifen. Die Werte, auf die Sie zugreifen, spiegeln jedoch den alten Status des TextFlows wider. Bei der neuen Zusammenstellung des TextFlows werden neue Zeilen erzeugt und Sie erhalten die neue Zeile für eine gegebene Position durch den Aufruf von <codeph>TextFlow.flowComposer.findLineAtPosition()</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:TextFlowLine:TextFlowLine"><apiName>TextFlowLine</apiName><shortdesc> Konstruktor - erstellt eine neue TextFlowLine-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/><apiDesc>Das für diese Zeile zu verwendende TextLine-Anzeigeobjekt.
		 </apiDesc></apiParam><apiParam><apiItemName>paragraph</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ParagraphElement</apiOperationClassifier><apiDesc>Der Absatz (ParagraphElement), in dem die Zeile platziert wird.
		 </apiDesc></apiParam><apiParam><apiItemName>outerTargetWidth</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Die Breite, mit der die Zeile zusammengestellt wird, ohne Einzüge.
		 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Der Offset der Zeile in Pixeln gemäß dem entsprechenden Containereinzug (durch die Absatzausrichtung und den Durchlauf des Container-Blocks bestimmt). Dies wird vor der Zeilenausrichtung im Absatz festgelegt. 
		 </apiDesc></apiParam><apiParam><apiItemName>absoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Die Zeichenposition im Textfluss, an der die Zeile beginnt.
		 </apiDesc></apiParam><apiParam><apiItemName>numChars</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Die Anzahl der Zeichen in der Zeile.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Konstruktor - erstellt eine neue TextFlowLine-Instanz. 
		  <p><b>Hinweis</b>: Dies sollte nicht von Clients aufgerufen werden. Es wird zum Schreiben eines eigenen Composers bereitgestellt.</p>
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>flash.text.engine.TextLine</linktext></link><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/absoluteStart"><linktext>absoluteStart</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/numChars"><linktext>numChars</linktext></link></related-links></apiConstructor><apiOperation id="flashx.textLayout.compose:TextFlowLine:getBounds"><apiName>getBounds</apiName><shortdesc> 
		 Gibt die Zeilenbegrenzungen als Rechteck zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Rechteck, das die Abgrenzungen der Zeile repräsentiert.
		 
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn></apiOperationDef><apiDesc> 
		 Gibt die Zeilenbegrenzungen als Rechteck zurück.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextFlowLine:getTextLine"><apiName>getTextLine</apiName><shortdesc> 
		 Gibt das flash.text.engine.TextLine-Objekt für diese Zeile zurück. Ist dieses wegen des Garbagekollektors nicht mehr vorhanden, wird es eventuell neu erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objekt für diese Zeile oder <codeph>null</codeph>, wenn das TextLine-Objekt nicht neu erstellt werden kann.
		 
		 </apiDesc><apiType value="flash.text.engine:TextLine"/></apiReturn><apiParam><apiItemName>forceValid</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>wenn „true“, wird die TextLine neu erstellt, falls sie vorhanden, aber ungültig ist.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt das <codeph>flash.text.engine.TextLine</codeph>-Objekt für diese Zeile zurück. Ist dieses wegen des Garbagekollektors nicht mehr vorhanden, wird es eventuell neu erstellt. Legen Sie <codeph>forceValid</codeph> als <codeph>true</codeph> fest, damit die TextLine neu erstellt wird. Gibt „null“ zurück, wenn die TextLine nicht neu erstellt werden kann.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flashx.textLayout.compose:TextFlowLine:absoluteStart:get"><apiName>absoluteStart</apiName><shortdesc> 
		 Die Position der Zeile als absolute Zeichenposition im TextFlow-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die Position der Zeile als absolute Zeichenposition im TextFlow-Objekt.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:ascent:get"><apiName>ascent</apiName><shortdesc conref="flash.text.engine.TextLine#ascent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#ascent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:columnIndex:get"><apiName>columnIndex</apiName><shortdesc> Die Nummer der Spalte, in die die Zeile platziert wurde, wobei die erste Spalte 0 ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> Die Nummer der Spalte, in die die Zeile platziert wurde, wobei die erste Spalte 0 ist.
		 	
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:controller:get"><apiName>controller</apiName><shortdesc> 
		 Die Steuerung (ContainerController-Objekt) für den Container, in dem die Zeile platziert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 Die Steuerung (ContainerController-Objekt) für den Container, in dem die Zeile platziert wurde.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>flashx.textLayout.container.ContainerController</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:descent:get"><apiName>descent</apiName><shortdesc conref="flash.text.engine.TextLine#descent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#descent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:height:get"><apiName>height</apiName><shortdesc> Die Zeilenhöhe in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Die Zeilenhöhe in Pixeln.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:lineOffset:get"><apiName>lineOffset</apiName><shortdesc> 
		 Der Offset der Zeile in Pixeln gemäß dem entsprechenden Containereinzug (durch die Absatzausrichtung und den Durchlauf des Container-Blocks bestimmt). Dies wird vor der Zeilenausrichtung im Absatz festgelegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Der Offset der Zeile in Pixeln gemäß dem entsprechenden Containereinzug (durch die Absatzausrichtung und den Durchlauf des Container-Blocks bestimmt). Dies wird vor der Zeilenausrichtung im Absatz festgelegt.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:location:get"><apiName>location</apiName><shortdesc> 
		 Einer der Werte der TextFlowLineLocation zum Festlegen einer Zeilenposition innerhalb eines Absatzes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Einer der Werte der TextFlowLineLocation zum Festlegen einer Zeilenposition innerhalb eines Absatzes.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLineLocation"><linktext>TextFlowLineLocation</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:paragraph:get"><apiName>paragraph</apiName><shortdesc> 
		 Der Absatz (ParagraphElement), in dem sich die Zeile befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ParagraphElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Der Absatz (ParagraphElement), in dem sich die Zeile befindet.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceAfter:get"><apiName>spaceAfter</apiName><shortdesc> 
		 Der Leerraum, der nach der Zeile verbleiben soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Der Leerraum, der nach der Zeile verbleiben soll.
		 <p>Wenn die Zeile die letzte Zeile eines Absatzes ist, die über einen anschließenden Leerraum verfügt, erhält die Zeile einen <codeph>spaceAfter</codeph>-Wert. Befindet sich die Zeile am unteren Ende einer Spalte, wird <codeph>spaceAfter</codeph> ignoriert. Andernfalls befindet sich die Zeile vor einer anderen Zeile in der Spalte und die folgende Zeile muss vertikal platziert werden, um sicherzustellen, dass mindestens der angegebene Leeraum zwischen dieser letzten Absatzzeile und der ersten Zeile des nächsten Absatzes vorhanden ist.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceAfter"><linktext>TextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:spaceBefore:get"><apiName>spaceBefore</apiName><shortdesc> 
		 Der Leerraum, der vor der Zeile stehen soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Der Leerraum, der vor der Zeile stehen soll.
		 <p>Wenn die Zeile die erste Zeile eines Absatzes ist, die über einen vorhergehenden Leerraum verfügt, erhält die Zeile einen <codeph>spaceBefore</codeph>-Wert. Befindet sich die Zeile am oberen Ende einer Spalte, wird <codeph>spaceBefore</codeph> ignoriert. Anderenfalls folgt die Zeile einer anderen Zeile in der Spalte und wird vertikal platziert, um sicherzustellen, dass mindestens der angegebene Leeraum zwischen dieser Zeile und der letzten Zeile des vorherigen Absatzes vorhanden ist.</p> 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.formats.xml#TextLayoutFormat/paragraphSpaceBefore"><linktext>TextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
		 Die Höhe der Textzeile, die der Oberlänge plus der Unterlänge entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 Die Höhe der Textzeile, die der <codeph>Oberlänge</codeph> plus der <codeph>Unterlänge</codeph> entspricht. Der Wert wird anhand der Differenz zwischen den Grundlinien berechnet, die die Zeile begrenzen. Dies ist entweder die Ober- und Unterseite von Ideogrammen oder die Oberlänge und Unterlänge, wobei dies davon abhängt, ob die Grundlinie bei y=0 ideografisch ist (z. B. TextBaseline.IDEOGRAPHIC_TOP). 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextBaseline.xml"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLength:get"><apiName>textLength</apiName><shortdesc> 
		 Die Anzahl der Zeichen bis zur nächsten Zeile, einschließlich nachgestellter Leerstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die Anzahl der Zeichen bis zur nächsten Zeile, einschließlich nachgestellter Leerstellen. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:textLineExists:get"><apiName>textLineExists</apiName><shortdesc> 
		 Zeigt an, ob das flash.text.engine.TextLine-Objekt für diese TextFlowLine vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 Zeigt an, ob das <codeph>flash.text.engine.TextLine</codeph>-Objekt für diese TextFlowLine vorhanden ist. Der Wert ist <codeph>true</codeph>, wenn das TextLine-Objekt <i>nicht</i> vom Garbagekollektor bereinigt wurde, andernfalls ist der Wert <codeph>false</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.engine.TextLine.xml"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc> 
		 Die Breite der Zeile, wenn kein Blocksatz angewendet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Die Breite der Zeile, wenn kein Blocksatz angewendet wurde. Bei Text ohne Blocksatz ist dieser Wert gleich dem Wert von <codeph>textLength</codeph>. Bei Text mit Blocksatz entspricht dieser Wert der Länge ohne Blocksatz und <codeph>textLength</codeph> repräsentiert die tatsächliche Zeilenbreite. Beispiel: Wenn der folgende String im Blocksatz ausgerichtet ist und eine Breite von 500 zugewiesen wurde, beträgt die tatsächliche Breite 500, die Breite ohne Blocksatz jedoch 268.9921875. 
		 
		 <p>TBD: Grafik der Zeile im Blocksatz hinzufügen </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:validity:get"><apiName>validity</apiName><shortdesc> Die Gültigkeit der Zeile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc> Die Gültigkeit der Zeile. 
		 <p>Eine Zeile kann ungültig sein, wenn der Text, die angewendeten Attribute oder die Steuerungseinstellungen seit der Erstellung der Zeile geändert wurden. Eine ungültige Zeile kann weiterhin angezeigt und verwendet werden, wobei jedoch die Werte verwendet werden, die bei der Erstellung aktuell waren. Die durch <codeph>textLine</codeph> repräsentierte Zeile hat ebenfalls den Status „ungültig“. </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/textLine"><linktext>textLine</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flashx.textLayout.compose.xml#TextFlowLine/GEOMETRY_DAMAGED"><linktext>GEOMETRY_DAMAGED</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:x:get"><apiName>x</apiName><shortdesc> 
		 Die horizontale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom linken Rand des Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Die horizontale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom linken Rand des Containers.
		 <p><b>Hinweis: </b>Auch wenn diese Eigenschaft technisch die Einstellung <codeph>read-write</codeph> aufweist, sollten Sie sie wie eine Eigenschaft des Typs <codeph>read-only</codeph> behandeln. Diese Set-Funktion ist nur vorhanden, um die Anforderungen der IVerticalJustificationLine-Schnittstelle zu erfüllen, die für diese Eigenschaft eine Set- und eine Get-Funktion definiert. Die Verwendung der Set-Funktion ist zwar möglich, führt jedoch zu nicht vorhersehbaren Ergebnissen.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLine:y:get"><apiName>y</apiName><shortdesc> 
		 Die vertikale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom oberen Rand des Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Die vertikale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom oberen Rand des Containers.
		 <p><b>Hinweis: </b>Auch wenn diese Eigenschaft technisch die Einstellung <codeph>read-write</codeph> aufweist, sollten Sie sie wie eine Eigenschaft des Typs <codeph>read-only</codeph> behandeln. Diese Set-Funktion ist nur vorhanden, um die Anforderungen der IVerticalJustificationLine-Schnittstelle zu erfüllen, die für diese Eigenschaft eine Set- und eine Get-Funktion definiert. Die Verwendung der Set-Funktion ist zwar möglich, führt jedoch zu nicht vorhersehbaren Ergebnissen.
		 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> 
	 Die FlowComposerBase-Klasse ist die Basisklasse für Text Layout Framework-Flow-Composer-Klassen, die das Erstellen von Textzeilen in ContainerController-Objekten steuern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="checkFirstDamage"/><Exclude kind="method" name="debugCheckTextFlowLines"/><Exclude kind="property" name="lines"/><Exclude kind="method" name="addLine"/><Exclude kind="method" name="initializeLines"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Die FlowComposerBase-Klasse ist die Basisklasse für Text Layout Framework-Flow-Composer-Klassen, die das Erstellen von Textzeilen in ContainerController-Objekten steuern.
	 
	 <p>FlowComposerBase ist eine Utility-Klasse, die Methoden und Eigenschaften implementiert, die für mehrere Flow-Composer-Typen gelten. Anwendungscode instanziiert oder verwendet im Allgemeinen diese Klasse nicht (es sei denn, sie wird erweitert, um einen benutzerdefinierten Flow-Composer zu erstellen).</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/flowComposer"><linktext>flashx.textLayout.elements.TextFlow.flowComposer</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:FlowComposerBase:FlowComposerBase"><apiName>FlowComposerBase</apiName><shortdesc> Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> Konstruktor. 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.compose:FlowComposerBase:damage"><apiName>damage</apiName><shortdesc conref="IFlowComposer#damage()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>Beginn des beschädigten Bereichs
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>Anzahl der beschädigten Zeichen
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>Typ der Beschädigung. Entspricht einem Typ von flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#damage()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc conref="IFlowComposer#findLineAtPosition()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>Die TextFlowLine, die den Inhalt an der angegebenen Position enthält, oder „null“, falls nicht gefunden.
		
		</apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Die Position des Inhalts, für den Sie das TextFlowLine-Objekt benötigen.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, welche Zeile zurückgegeben werden soll, wenn sich die Position zwischen dem letzten Element einer Zeile und dem ersten Element der nächsten befindet.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#findLineAtPosition()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc conref="IFlowComposer#findLineIndexAtPosition()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Die Indexposition der Textzeile an der angegebenen Position. Falls nicht gefunden, wird sie wie nach dem Ende behandelt und gibt die Anzahl der Zeilen zurück.
		 	 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Die Position des Inhalts, für den Sie die Textzeile möchten.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, welche Containerindexposition zurückgegeben werden soll, wenn sich die Position zwischen der letzten Zeile in einem Container und der ersten Zeile im nächsten Container befindet.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#findLineIndexAtPosition()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:getLineAt"><apiName>getLineAt</apiName><shortdesc conref="IFlowComposer#getLineAt()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier><apiDesc>TextFlowLine mit der angegebenen Zeilennummer oder <codeph>null</codeph>, falls nicht gefunden.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	Die Zeilennummer des TextFlowLine-Objekts, das zurückgegeben werden soll.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getLineAt()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:isDamaged"><apiName>isDamaged</apiName><shortdesc conref="IFlowComposer#isDamaged()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>„true“, wenn TextFlowLine-Objekte vom Beginn des Textflusses bis zur Zeile, die den Inhalt an <codeph>absolutePosition</codeph> enthält, als beschädigt markiert sind.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>die letzte Position im relevanten Bereich
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#isDamaged()">
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:FlowComposerBase:updateLengths"><apiName>updateLengths</apiName><shortdesc conref="IFlowComposer#updateLengths()"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>Beginn der Längenänderung
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>Änderung in Zeichenanzahl
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#updateLengths()"> 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:FlowComposerBase:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 Die absolute Position unmittelbar vor dem ersten Element im Textfluss, für das eine Erstellung und Aktualisierung erforderlich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Die absolute Position unmittelbar vor dem ersten Element im Textfluss, für das eine Erstellung und Aktualisierung erforderlich ist.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:numLines:get"><apiName>numLines</apiName><shortdesc conref="IFlowComposer#numLines"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="IFlowComposer#numLines"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		Die ISWFContext-Instanz für ggf. notwendige FTE-Aufrufe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		Die ISWFContext-Instanz für ggf. notwendige FTE-Aufrufe. 
		
		<p>Standardmäßig ist die ISWFContext-Implementierung dieses FlowComposerBase-Objekt. Anwendungen können eine benutzerdefinierte Implementierung bereitstellen, um in eine andere SWF-Datei eingebettete Schriftarten zu verwenden oder Textzeilen zwischenzuspeichern und erneut zu verwenden.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#ISWFContext"><linktext>flashx.textLayout.compose.ISWFContext</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowComposerBase:textFlow:get"><apiName>textFlow</apiName><shortdesc> 
		Das TextFlow-Objekt, an das dieser Flow-Composer angehängt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc> 
		Das TextFlow-Objekt, an das dieser Flow-Composer angehängt wird. 
		
		</apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:ISWFContext"><apiName>ISWFContext</apiName><shortdesc> 
	 Die ISWFContext-Schnittstelle ermöglicht es einer SWF-Datei, ihren Inhalt für andere SWF-Dateien, die sie laden, freizugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 Die ISWFContext-Schnittstelle ermöglicht es einer SWF-Datei, ihren Inhalt für andere SWF-Dateien, die sie laden, freizugeben. Eine Anwendung, die eine SWF-Datei des Typs „ISWContext“ lädt, kann Methoden im Kontext der geladenen SWF-Datei aufrufen. Sie wird hauptsächlich zum Aufrufen der FTE-TextLine-Erstellungsmethoden verwendet.
	 
	 <p>Eine Anwendung verwendet diese Schnittstelle aus zwei Gründen zur Steuerung der TextLine-Erstellung: </p>
	 <ul>
	   <li><b>Wiederverwendung einer eingebetteten Schriftart:</b> wenn eine Anwendung eine Schriftart verwenden möchte, die in eine geladene SWF-Datei eingebettet ist, kann die Anwendung auf die Schriftart zugreifen, wenn im Kontext der geladenen SWF-Datei eine TextLine erstellt wird.</li>
	   <li><b>Wiederverwendung vorhandener TextLine-Instanzen</b>: die Wiederverwendung von vorhandenen TextLine-Instanzen kann zur schnelleren Wiederzusammensetzung führen. TLF nutzt die interne Wiederverwendung vorhandener TextLine-Instanzen. TLF kann eine TextLine wiederverwenden, indem <codeph>TextBlock.recreateTextLine()</codeph> statt <codeph>TextBlock.createTextLine()</codeph> aufgerufen wird, wenn TLF erkennt, dass eine TextLine vorhanden ist.</li>
	 </ul>
	 
	 
	 <p>Ihre Anwendung hat möglicherweise weitere TextLine-Instanzen, die wiederverwendet werden können. So können Sie vorhandene TextLine-Instanzen wiederverwenden:</p>
	 <ol>
	   <li>Fangen Sie Aufrufe von <codeph>TextBlock.createTextLine()</codeph> ab und</li>
	   <li>rufen Sie <codeph>TextBlock.recreateTextLine()</codeph> mit der vorhandenen TextLine-Instanz auf anstatt <codeph>TextBlock.createTextLine()</codeph>.</li>
	 </ol>
	 <p>Beachten Sie jedoch, dass <codeph>TextBlock.recreateTextLine()</codeph> nur in Flash Player 10.1 und höher verfügbar ist.</p>
	 
	 </apiDesc><example conref="examples\EmbeddedFontLineCreator.as"/><example conref="examples\FontConsumer.as"/></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>flash.text.engine.TextBlock.createTextLine()</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextBlock/recreateTextLine()"><linktext>flash.text.engine.TextBlock.recreateTextLine()</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:ISWFContext:flashx.textLayout.compose:ISWFContext:callInContext"><apiName>callInContext</apiName><shortdesc>
	      Eine Möglichkeit zum Aufrufen einer Methode in einem vom Client gesteuerten Kontext.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Von der Funktion zurückgegebenes Ergebnis, falls vorhanden.
	     
	      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>Die aufzurufende Funktion oder Methode.
	      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>Dies ist der Zeiger für die Funktion.
	      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>Die Argumente für die Funktion.
	      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Falls „true“, gibt die Funktion einen Wert zurück.
	     
	      </apiDesc></apiParam></apiOperationDef><apiDesc>
	      Eine Möglichkeit zum Aufrufen einer Methode in einem vom Client gesteuerten Kontext.
	     
	      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.xml#Function/apply()"><linktext>Function.apply()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="flashx.textLayout.compose:IFlowComposer"><apiName>IFlowComposer</apiName><shortdesc>
	 IFlowComposer definiert die Schnittstelle für die Verwaltung des Layouts und der Anzeige eines Textflusses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 IFlowComposer definiert die Schnittstelle für die Verwaltung des Layouts und der Anzeige eines Textflusses.
	 
	 <p>Textflüsse, die mit der Implementierung eines Flow-Composers angezeigt werden, können dynamisch und interaktiv sein. Ein Flow-Composer verwaltet einen oder mehrere Anzeigecontroller. Jeder Controller ist mit einem Anzeigeobjektcontainer (beispielsweise einem Sprite) verknüpft, über den die für den Textfluss erstellten Zeilen endgültig angezeigt werden. Das folgende Diagramm veranschaulicht die Beziehung zwischen TextFlow-, IFlowComposer-, ContainerController- und DisplayObjectContainer-Objekten:</p>
	 
	 <p><adobeimage alt="IFlowComposer" href="../../../images/textLayout_singleController.gif"/></p>
	 
	 <p>Ein Flow-Composer berechnet, welcher Teil eines Textflusses in jeden Container passt, und fügt die entsprechenden Textzeilen dem Anzeigeobjekt des Containers hinzu. Die IFlowComposer-Schnittstelle definiert separate Methoden für Layoutberechnungen und das Aktualisieren der Anzeige. IFlowComposer definiert auch Methoden, um einen Textfluss inkrementell zu erstellen und zu aktualisieren. Diese Methoden können verwendet werden, um das Blockieren der Benutzeroberfläche beim Aktualisieren langer Textflüsse zu vermeiden.</p>
	 
	 <p>Zusätzlich zum Verwalten der Texterstellung und -anzeige steuert ein Flow-Composer, welcher Container den Fokus hat, verwaltet die Anzeige der Auswahlhervorhebung (die Containergrenzen überschreiten kann) und bietet Direktzugriff auf alle TextLine-Objekte im Textfluss.</p>
	 
	 <p>Um eine IFlowComposer-Implementierung zu verwenden, weisen Sie eine Instanz dieser Implementierung der <codeph>flowComposer</codeph>-Eigenschaft eines TextFlow-Objekts zu. Rufen Sie die <codeph>updateAllControllers()</codeph>-Methode auf, um den Text in den Containern, die an den Flow-Composer angehängt sind, anzuordnen und anzuzeigen.</p>
	 
	 <p><b>Hinweis:</b> Für einen einfachen, statischen Textfluss können Sie auch den der Factory-Klassen für die Textzeile verwenden. Diese Factory-Klassen erstellen im Allgemeinen Zeilen mit weniger Aufwand als ein Flow-Composer, aber unterstützen keine Bearbeitung, dynamischen Änderungen oder Benutzerinteraktion.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flashx.textLayout.container.xml#ContainerController"><linktext>ContainerController</linktext></link><link href="flashx.textLayout.compose.xml#FlowComposerBase"><linktext>FlowComposerBase</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer"><linktext>StandardFlowComposer</linktext></link><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>TextFlow</linktext></link><link href="flashx.textLayout.factory.xml#StringTextLineFactory"><linktext>StringTextLineFactory</linktext></link><link href="flashx.textLayout.factory.xml#TextFlowTextLineFactory"><linktext>TextFlowTextLineFactory</linktext></link></related-links><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc> 
		 Fügt dieser IFlowComposer-Instanz an der angegebenen Indexposition einen Controller hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Das ContainerController-Objekt, das hinzugefügt werden soll.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Eine numerische Indexposition, die die Position in der Controller-Liste angibt, an der das ContainerController-Objekt eingefügt wird.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Fügt dieser IFlowComposer-Instanz an der angegebenen Indexposition einen Controller hinzu.
		 
		 <p>Die Liste der Controller ist 0-basiert (der erste Controller weist die Indexposition 0 auf).</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:addController"><apiName>addController</apiName><shortdesc> 
		 Fügt dieser IFlowComposer-Instanz einen Controller hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Das ContainerController-Objekt, das hinzugefügt werden soll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Fügt dieser IFlowComposer-Instanz einen Controller hinzu.
		 
		 <p>Der Container wird am Ende der Containerliste hinzugefügt.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc> 
		 Erstellt den Inhalt des Stammelements bis zum und einschließlich des Containers an der angegebenen Indexposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Erstellen Sie zumindest bis zu diesem Container im TextFlow. Wenn controllerIndex größer als die Anzahl der Controller ist, wird der Textfluss bis zum Ende des letzten Containers erstellt.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Erstellt den Inhalt des Stammelements bis zum und einschließlich des Containers an der angegebenen Indexposition.
		 
		 <p>Wenn der Inhalt von Containern bis zum und einschließlich des Containers an der angegebenen Indexposition geändert wurde, gibt die Methode <codeph>true</codeph> zurück. Wenn <codeph>index</codeph> größer als die Anzahl der Controller (oder nicht angegeben) ist, werden alle Container erstellt.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc> 
		 Erstellt den Inhalt des Stammelements bis zur angegebenen Position.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Erstellen Sie zumindest bis zu dieser Position im TextFlow. Standardmäßig oder wenn absolutePosition nach dem Ende des Textflusses liegt, wird der Textfluss bis zum Ende des Flusses erstellt.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Erstellt den Inhalt des Stammelements bis zur angegebenen Position.
		 
		 <p>Wenn der Inhalt von Containern bis zum und einschließlich des Containers mit dem Inhalt an der angegebenen Position geändert wurde, gibt die Methode <codeph>true</codeph> zurück. Wenn <codeph>absolutePosition</codeph> größer als die Länge von TextFlow (oder nicht angegeben) ist, dann wird der gesamte Fluss erstellt.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Berechnet, wie viele Zeilen erforderlich sind, um den Inhalt im Stammelement des Textflusses und die Positionen dieser Zeilen in den Anzeigecontainern des Textflusses anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Berechnet, wie viele Zeilen erforderlich sind, um den Inhalt im Stammelement des Textflusses und die Positionen dieser Zeilen in den Anzeigecontainern des Textflusses anzuzeigen.
		 
		 <p>Implementierungen dieser Methode sollten die Anzeige nicht aktualisieren, sondern die Ergebnisse speichern, sodass spätere Aufrufe von <codeph>compose()</codeph> oder <codeph>updateAllControllers()</codeph> keine zusätzliche Neuerstellung durchführen, wenn der Inhalt des Textflusses nicht geändert wurde.</p>
		 
		 <p>Wenn der Inhalt von Containern geändert wurde, muss die Methode <codeph>true</codeph> zurückgeben.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#IFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#IFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damage"><apiName>damage</apiName><shortdesc> Markiert Zeilen, die beschädigt sind und neu erstellt werden müssen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>Beginn des beschädigten Bereichs
		 </apiDesc></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiDesc>Anzahl der beschädigten Zeichen
		 </apiDesc></apiParam><apiParam><apiItemName>damageType</apiItemName><apiType value="String"/><apiDesc>Typ der Beschädigung. Entspricht einem Typ von flashx.textLayout.compose.FlowDamageType
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Markieren Sie die Zeilen als beschädigt. Dadurch geben Sie an, dass sie neu erstellt werden müssen.
		 </apiDesc></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#FlowDamageType"><linktext>flashx.textLayout.compose.FlowDamageType</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Gibt die Indexposition des Controllers zurück, der den Inhalt an der angegebenen Position enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition des Container-Controllers oder -1, falls nicht gefunden.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Die Position des Inhalts, für den die Containerindexposition gesucht wird.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, welche Containerindexposition zurückgegeben werden soll, wenn sich die Position zwischen dem letzten Element in einem Container und dem ersten Element im nächsten Container befindet.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt die Indexposition des Controllers zurück, der den Inhalt an der angegebenen Position enthält. 
		 
		 <p>Eine Position kann als Trennelement zwischen zwei Zeichen oder anderen Elementen eines Textflusses angesehen werden. Wenn der Wert in <codeph>absolutePosition</codeph> eine Position zwischen dem letzten Zeichen eines Containers und dem ersten Zeichen des nächsten ist, wird der vorhergehende Container anschließend zurückgegeben, wenn für den <codeph>preferPrevious</codeph>-Parameter <codeph>true</codeph> festgelegt wurde, der letzte Container wird zurückgegeben, falls für den <codeph>preferPrevious</codeph>-Parameter <codeph>false</codeph> festgelegt wurde.</p>
		 
		 <p>Die Methode muss -1 zurückgeben, wenn der Inhalt an der angegebenen Position nicht in einem Container oder außerhalb des Bereichs der Positionen im Textfluss ist.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineAtPosition"><apiName>findLineAtPosition</apiName><shortdesc> 
		Gibt das TextFlowLine-Objekt mit dem Inhalt an der angegebenen Position zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die TextFlowLine, die den Inhalt an der angegebenen Position enthält, oder „null“, falls nicht gefunden.
		
		</apiDesc><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Die Position des Inhalts, für den Sie das TextFlowLine-Objekt benötigen.
		</apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, welche Zeile zurückgegeben werden soll, wenn sich die Position zwischen dem letzten Element einer Zeile und dem ersten Element der nächsten befindet.
		
		</apiDesc></apiParam></apiOperationDef><apiDesc> 
		Gibt das TextFlowLine-Objekt mit dem Inhalt an der angegebenen Position zurück.
		
		<p>Eine Position kann als Trennelement zwischen zwei Zeichen oder anderen Elementen eines Textflusses angesehen werden. Wenn der Wert in <codeph>absolutePosition</codeph> eine Position zwischen dem letzten Element einer Zeile und dem ersten Element der nächsten ist, wird die vorhergehende Zeile anschließend zurückgegeben, wenn für den <codeph>preferPrevious</codeph>-Parameter <codeph>true</codeph> festgelegt wird, die folgende Zeile wird zurückgegeben, falls für den <codeph>preferPrevious</codeph>-Parameter <codeph>false</codeph> festgelegt wird.</p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:findLineIndexAtPosition"><apiName>findLineIndexAtPosition</apiName><shortdesc> 
		 Gibt die sequenzielle Zeilennummer des TextFlowLine-Objekts zurück, das den Inhalt an der angegebenen Position enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition der Textzeile an der angegebenen Position. Falls nicht gefunden, wird sie wie nach dem Ende behandelt und gibt die Anzahl der Zeilen zurück.
		 	 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Die Position des Inhalts, für den Sie die Textzeile möchten.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, welche Containerindexposition zurückgegeben werden soll, wenn sich die Position zwischen der letzten Zeile in einem Container und der ersten Zeile im nächsten Container befindet.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt die sequenzielle Zeilennummer des TextFlowLine-Objekts zurück, das den Inhalt an der angegebenen Position enthält. 
		 
		 <p>Die Nummer der ersten Zeile ist 0 und die Nummer der letzten Zeile ist mit der Anzahl der Zeilen -1 identisch. Wenn die in <codeph>absolutePosition</codeph> angegebene Position nach dem Ende des Textflusses ist, muss diese Methode die Nummer zurückgeben, die der nächsten dem Textfluss hinzugefügten neuen Zeile zugewiesen wird. (Dieser Wert stimmt mit der Anzahl der aktuell vorhandenen Zeilen überein.)</p>
		 
		 <p>Eine Position kann als Trennelement zwischen zwei Zeichen oder anderen Elementen eines Textflusses angesehen werden. Wenn der Wert in <codeph>absolutePosition</codeph> eine Position zwischen der letzten Zeile eines Containers und der ersten Zeile des nächsten ist, wird der vorhergehende Container zurückgegeben, wenn für den <codeph>preferPrevious</codeph>-Parameter <codeph>true</codeph> festgelegt wird, und der folgende Container wird zurückgegeben, wenn für den <codeph>preferPrevious</codeph>-Parameter <codeph>false</codeph> festgelegt wird.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc> 
		 Gibt das ContainerController-Objekt an der angegebenen Indexposition zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das ContainerController-Objekt an der angegebenen Position.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des ContainerController-Objekts, das zurückgegeben werden soll.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt das ContainerController-Objekt an der angegebenen Indexposition zurück. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc> 
		 Gibt die Indexposition des angegebenen ContainerController-Objekts zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition des angegebenen ContainerController-Objekts oder -1, wenn der Controller nicht an diesen Flow-Composer angehängt wird.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Ein Verweis auf das ContainerController-Objekt, nach dem gesucht werden soll.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt die Indexposition des angegebenen ContainerController-Objekts zurück. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:getLineAt"><apiName>getLineAt</apiName><shortdesc> 
		 Gibt die Zeile mit der angegebenen Zeilennummer zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFlowLine mit der angegebenen Zeilennummer oder <codeph>null</codeph>, falls nicht gefunden.
		 
		 </apiDesc><apiOperationClassifier>flashx.textLayout.compose:TextFlowLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>	Die Zeilennummer des TextFlowLine-Objekts, das zurückgegeben werden soll.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt die Zeile mit der angegebenen Zeilennummer zurück. 
		 
		 <p>Die Liste der Zeilen ist von null bis zur Anzahl der Zeilen -1 nummeriert. Wenn der Wert in <codeph>index</codeph> außerhalb des Bereichs der Liste der Zeilen liegt, gibt diese Funktion <codeph>null</codeph> zurück.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Wird von TextFlow aufgerufen, wenn der Interaktionsmanager sich ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>Die neue ISelectionManager-Instanz.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Wird von TextFlow aufgerufen, wenn der Interaktionsmanager sich ändert. 
		 
		 <p>Implementierungen von IFlowComposer sollten Ereignis-Listener und Eigenschaften, die auf den Interaktionsmanager verweisen, aktualisieren.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:isDamaged"><apiName>isDamaged</apiName><shortdesc> 
		 Gibt an, ob TextFlowLine-Objekte zwischen dem Beginn des Textflusses und der Zeile mit dem Inhalt an der angegebenen Position als beschädigt markiert sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn TextFlowLine-Objekte vom Beginn des Textflusses bis zur Zeile, die den Inhalt an <codeph>absolutePosition</codeph> enthält, als beschädigt markiert sind.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>die letzte Position im relevanten Bereich
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt an, ob TextFlowLine-Objekte zwischen dem Beginn des Textflusses und der Zeile mit dem Inhalt an der angegebenen Position als beschädigt markiert sind. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc> 
		 Entfernt alle Controller aus dieser IFlowComposer-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
		 Entfernt alle Controller aus dieser IFlowComposer-Instanz. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc> 
		 Entfernt den Controller an der angegebenen Indexposition aus dieser IFlowComposer-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des ContainerController-Objekts, das entfernt werden soll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Entfernt den Controller an der angegebenen Indexposition aus dieser IFlowComposer-Instanz.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:removeController"><apiName>removeController</apiName><shortdesc> 
		 Entfernt einen Controller aus dieser IFlowComposer-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Die ContainerController-Instanz, die entfernt werden soll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Entfernt einen Controller aus dieser IFlowComposer-Instanz. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Legt den Fokus auf den Container, der die vom absolutePosition-Parameter angegebene Position enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Gibt die Position im Textfluss des Containers an, der den Fokus erhalten soll.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Im Fall von „true“ und wenn die Position vor dem ersten Zeichen in einem Container ist, wird der Fokus auf das Ende des vorherigen Containers gelegt.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Legt den Fokus auf den Container, der die vom <codeph>absolutePosition</codeph>-Parameter angegebene Position enthält. 
		 
		 <p>Die Bedeutung der Einstellung des Fokus wird in der jeweiligen Implementierung definiert. Beispielsweise könnte eine Implementierung die integrierte <codeph>focus</codeph>-Eigenschaft des Stage-Objekts verwenden (solange es sich bei den Containern um „InteractiveObjects“ handelte) oder die Implementierung könnte den Fokus auf andere Weise verwalten.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Erstellt den Inhalt des Stammelements und aktualisiert die Anzeige.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Erstellt den Inhalt des Stammelements und aktualisiert die Anzeige.  
		 
		 <p>Das Textlayout besteht im Allgemeinen aus zwei Phasen: Erstellung und Anzeige. In der Erstellungsphase berechnet der Flow-Composer die Anzahl der für die Anzeige des Inhalts erforderlichen Zeilen sowie deren Position in den Anzeigecontainern des Textflusses. In der Anzeigephase aktualisiert der Flow-Composer die untergeordneten Anzeigeobjektelemente seiner Container. Die <codeph>updateAllControllers()</codeph>-Methode führt voraussichtlich beide Phasen aus. Eine effiziente Implementierung überwacht Änderungen am Inhalt, sodass ein vollständiger Erstellungs- und Anzeigezyklus nur durchgeführt wird, falls erforderlich.</p>
		 
		 <p>Diese Methode aktualisiert alle Textzeilen und die Anzeigeliste sofort und synchron.</p>
		 
		 <p>Wenn der Inhalt von Containern geändert wurde, muss die Methode <codeph>true</codeph> zurückgeben.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateLengths"><apiName>updateLengths</apiName><shortdesc> Aktualisieren Sie die Längen in den Zeilen, um das Mapping zu TextFlow beizubehalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startPosition</apiItemName><apiType value="int"/><apiDesc>Beginn der Längenänderung
		 </apiDesc></apiParam><apiParam><apiItemName>deltaLength</apiItemName><apiType value="int"/><apiDesc>Änderung in Zeichenanzahl
		 </apiDesc></apiParam></apiOperationDef><apiDesc> Aktualisieren Sie die Längen in den Zeilen, um das Mapping zu TextFlow beizubehalten. 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Erstellt und aktualisiert die Anzeige bis zum und einschließlich des Containers an der angegebenen Indexposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Indexposition des letzten Containers, der aktualisiert werden soll. Standardmäßig werden alle Container aktualisiert.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Erstellt und aktualisiert die Anzeige bis zum und einschließlich des Containers an der angegebenen Indexposition.
		 
		 <p>Die <codeph>updateToController()</codeph>-Methode erstellt voraussichtlich den Inhalt und aktualisiert die Anzeige, sodass alle Container bis zum und einschließlich des Containers an der angegebenen Indexposition aktuell sind. Beispiel: Wenn Sie in einer Kette von 20 Containern die Indexposition 10 angeben, stellt <codeph>updateToController()</codeph> sicher, dass die ersten zehn Container (Indizes 0-9) erstellt und angezeigt werden. Die Erstellung kann an diesem Punkt beendet werden. Wenn <codeph>controllerIndex</codeph> -1 ist (oder nicht angegeben), müssen alle Container aktualisiert werden.</p>
		 
		 <p>Diese Methode aktualisiert alle Textzeilen und die Anzeigeliste sofort und synchron.</p>
		 
		 <p>Wenn der Inhalt von Containern geändert wurde, muss die Methode <codeph>true</codeph> zurückgeben.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 „true“, falls der Flow-Composer derzeit einen Erstellungsvorgang durchführt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 „true“, falls der Flow-Composer derzeit einen Erstellungsvorgang durchführt.
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc> 
		 Die erste ungültige Position im Stammelement als absolute Position ab Beginn des Textflusses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die erste ungültige Position im Stammelement als absolute Position ab Beginn des Textflusses.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc> 
		 Die Anzahl der dieser IFlowComposer-Instanz zugewiesenen Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die Anzahl der dieser IFlowComposer-Instanz zugewiesenen Container. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:numLines:get"><apiName>numLines</apiName><shortdesc> 
		 Die Gesamtzahl der Zeilen im Textfluss.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die Gesamtzahl der Zeilen im Textfluss. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc> 
		 Das mit dieser IFlowComposer-Instanz verknüpfte Stammelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Das mit dieser IFlowComposer-Instanz verknüpfte Stammelement. 
		 
		 <p>Nur ein TextFlow-Objekt kann ein Stammobjekt sein.</p>
		  
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#ContainerFormattedElement"><linktext>ContainerFormattedElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IFlowComposer:flashx.textLayout.compose:IFlowComposer:swfContext:get"><apiName>swfContext</apiName><shortdesc> 
		 Die ISWFContext-Instanz, die für Aufrufe, die in einem speziellen SWF-Kontext erfolgen müssen, verwendet wird. In Implementierungen von IFlowComposer sollte diese Eigenschaft so festgelegt werden können, dass Benutzer der Schnittstelle Zeilen in einem anderen SWF-Kontext als dem mit der Implementierung erstellen können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.compose:ISWFContext</apiValueClassifier></apiValueDef><apiDesc> 
		 Die ISWFContext-Instanz, die für Aufrufe, die in einem speziellen SWF-Kontext erfolgen müssen, verwendet wird.  
		 
		 <p>In Implementierungen von IFlowComposer sollte diese Eigenschaft so festgelegt werden können, dass Benutzer der Schnittstelle Zeilen in einem anderen SWF-Kontext als dem mit der Implementierung erstellen können. Eine Standardimplementierung von ISWFContext sollte auch bereitgestellt werden.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flashx.elements.ISWFContext.xml"><linktext>ISWFContext</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
	Die StandardFlowComposer-Klasse stellt einen Standardcomposer und Containermanager zur Verfügung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion><Exclude kind="method" name="createBackgroundManager"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flashx.textLayout.compose:IFlowComposer</apiBaseInterface><apiBaseClassifier>flashx.textLayout.compose:FlowComposerBase</apiBaseClassifier></apiClassifierDef><apiDesc> 
	Die StandardFlowComposer-Klasse stellt einen Standardcomposer und Containermanager zur Verfügung. 
	
	<p>Jedes Aufrufen von <codeph>compose()</codeph> oder <codeph>updateAllControllers()</codeph> normalisiert den Textfluss als ersten Schritt. Der Normalisierungsprozess prüft Teile des TextFlow-Objekts, die geändert wurden, und führt die folgenden Schritte aus:
	<ol>
	<li> Löscht leere FlowLeafElement- und SubParagraphGroupElement-Objekte.</li>
	<li> Führt gleichgeordnete Bereiche zusammen, die identische Attribute aufweisen.</li>
	<li> Fügt einen leeren Absatz hinzu, wenn ein Textfluss leer ist.</li>
 	</ol>
 	</p>
	
	<p>Um einen StandardFlowComposer zu verwenden, weisen Sie ihn der <codeph>flowComposer</codeph>-Eigenschaft eines TextFlow-Objekts zu. Rufen Sie die <codeph>updateAllControllers()</codeph>-Methode auf, um den Text in den Containern, die an den Flow-Composer angehängt sind, anzuordnen und anzuzeigen.</p>
	
	<p><b>Hinweis:</b> Für einen einfachen, statischen Textfluss können Sie auch den der Factory-Klassen für die Textzeile verwenden. Diese Factory-Klassen erstellen im Allgemeinen Zeilen mit weniger Aufwand als ein Flow-Composer, aber unterstützen keine Bearbeitung, dynamischen Änderungen oder Benutzerinteraktion.</p>
	
	</apiDesc><example conref="examples\StandardFlowComposer_ClassExample.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow/flowComposer"><linktext>flashx.textLayout.elements.TextFlow.flowComposer</linktext></link></related-links><apiConstructor id="flashx.textLayout.compose:StandardFlowComposer:StandardFlowComposer"><apiName>StandardFlowComposer</apiName><shortdesc> 
		Erstellt ein StandardFlowComposer-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc> 
		Erstellt ein StandardFlowComposer-Objekt. 
		
		<p>Um ein StandardFlowComposer-Objekt zu verwenden, weisen Sie es der <codeph>flowComposer</codeph>-Eigenschaft eines TextFlow-Objekts zu. Rufen Sie die <codeph>updateAllControllers()</codeph>-Methode auf, um den Text in den Containern, die an den Flow-Composer angehängt sind, anzuordnen und anzuzeigen.</p>
		
		</apiDesc><example conref="examples\StandardFlowComposer_constructor.as"/></apiConstructorDetail></apiConstructor><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addControllerAt"><apiName>addControllerAt</apiName><shortdesc conref="IFlowComposer#addControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Das ContainerController-Objekt, das hinzugefügt werden soll.
		 </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Eine numerische Indexposition, die die Position in der Controller-Liste angibt, an der das ContainerController-Objekt eingefügt wird.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#addControllerAt()"> </apiDesc><example conref="examples\StandardFlowComposer_addControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:addController"><apiName>addController</apiName><shortdesc conref="IFlowComposer#addController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Das ContainerController-Objekt, das hinzugefügt werden soll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#addController()"> </apiDesc><example conref="examples\StandardFlowComposer_addController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToController"><apiName>composeToController</apiName><shortdesc conref="IFlowComposer#composeToController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Erstellen Sie zumindest bis zu diesem Container im TextFlow. Wenn controllerIndex größer als die Anzahl der Controller ist, wird der Textfluss bis zum Ende des letzten Containers erstellt.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#composeToController()"> </apiDesc><example conref="examples\StandardFlowComposer_composeToController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:composeToPosition"><apiName>composeToPosition</apiName><shortdesc conref="IFlowComposer#composeToPosition()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Erstellen Sie zumindest bis zu dieser Position im TextFlow. Standardmäßig oder wenn absolutePosition nach dem Ende des Textflusses liegt, wird der Textfluss bis zum Ende des Flusses erstellt.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#composeToPosition()"> </apiDesc><example conref="examples\StandardFlowComposer_composeToPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:compose"><apiName>compose</apiName><shortdesc> 
		 Berechnet, wie viele Zeilen erforderlich sind, um den Inhalt im Stammelement des Textflusses und die Positionen dieser Zeilen in den Anzeigecontainern des Textflusses anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Berechnet, wie viele Zeilen erforderlich sind, um den Inhalt im Stammelement des Textflusses und die Positionen dieser Zeilen in den Anzeigecontainern des Textflusses anzuzeigen.
		 
		 <p>Die <codeph>compose()</codeph>-Methode erstellt nur Inhalt, wenn er seit dem letzten Erstellungsvorgang geändert wurde. Ergebnisse werden entsprechend gespeichert, sodass folgende Aufrufe von <codeph>compose()</codeph> oder <codeph>updateAllControllers()</codeph> keine zusätzliche Neuerstellung durchführen, wenn der Inhalt des Textflusses nicht geändert wurde.</p>
		 
		 <p>Wenn der Inhalt von Containern geändert wurde, gibt die Methode <codeph>true</codeph> zurück.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_compose.as"/></apiOperationDetail><related-links><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateAllControllers()"><linktext>updateAllControllers()</linktext></link><link href="flashx.textLayout.compose.xml#StandardFlowComposer/updateToController()"><linktext>updateToController()</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:findControllerIndexAtPosition"><apiName>findControllerIndexAtPosition</apiName><shortdesc> 
		 Gibt die Indexposition des Controllers zurück, der den Inhalt an der angegebenen Position enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition des Container-Controllers oder -1, falls nicht gefunden.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Die Position des Inhalts, für den die Containerindexposition gesucht wird.
		 </apiDesc></apiParam><apiParam><apiItemName>preferPrevious</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, welche Containerindexposition zurückgegeben werden soll, wenn sich die Position zwischen dem letzten Element in einem Container und dem ersten Element im nächsten Container befindet.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt die Indexposition des Controllers zurück, der den Inhalt an der angegebenen Position enthält. 
		 
		 <p>Eine Position kann als Trennelement zwischen zwei Zeichen oder anderen Elementen eines Textflusses angesehen werden. Wenn der Wert in <codeph>absolutePosition</codeph> eine Position zwischen dem letzten Zeichen eines Containers und dem ersten Zeichen des nächsten ist, wird der vorhergehende Container anschließend zurückgegeben, wenn für den <codeph>preferPrevious</codeph>-Parameter <codeph>true</codeph> festgelegt wurde, der letzte Container wird zurückgegeben, falls für den <codeph>preferPrevious</codeph>-Parameter <codeph>false</codeph> festgelegt wurde.</p>
		 
		 <p>Die Methode gibt -1 zurück, wenn der Inhalt an der angegebenen Position nicht in einem Container oder außerhalb des Bereichs der Positionen im Textfluss ist.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_findControllerIndexAtPosition.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getAbsoluteStart"><apiName>getAbsoluteStart</apiName><shortdesc> 
		 Gibt die absolute Position des ersten Inhaltselements im angegebenen ContainerController-Objekt zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Position vor dem ersten Zeichen oder der ersten Grafik im ContainerController.
		 
		 </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Ein mit diesem Flow-Composer verknüpftes ContainerController-Objekt.
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Gibt die absolute Position des ersten Inhaltselements im angegebenen ContainerController-Objekt zurück.
		 
		 <p>Eine Position wird durch Zählen der Lücken zwischen zwei Zeichen oder anderen Elementen eines Textflusses berechnet. Die Position vor dem ersten Element eines Textflusses ist null. Eine absolute Position ist die Position, die ab Beginn des Textflusses gezählt wird.</p>
		 
		 </apiDesc><example conref="examples\StandardFlowComposer_getAbsoluteStart.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerAt"><apiName>getControllerAt</apiName><shortdesc conref="IFlowComposer#getControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Das ContainerController-Objekt an der angegebenen Position.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des ContainerController-Objekts, das zurückgegeben werden soll.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getControllerAt()"> </apiDesc><example conref="examples\StandardFlowComposer_getControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:getControllerIndex"><apiName>getControllerIndex</apiName><shortdesc conref="IFlowComposer#getControllerIndex()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><player>version AIR 1.5
	 	 </player></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Die Indexposition des angegebenen ContainerController-Objekts oder -1, wenn der Controller nicht an diesen Flow-Composer angehängt wird.
		 
		 </apiDesc></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Ein Verweis auf das ContainerController-Objekt, nach dem gesucht werden soll.
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#getControllerIndex()"> </apiDesc><example conref="examples\StandardFlowComposer_getControllerIndex.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:interactionManagerChanged"><apiName>interactionManagerChanged</apiName><shortdesc>
		 Wird von TextFlow aufgerufen, wenn der Interaktionsmanager sich ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newInteractionManager</apiItemName><apiOperationClassifier>flashx.textLayout.edit:ISelectionManager</apiOperationClassifier><apiDesc>Die neue ISelectionManager-Instanz.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Wird von TextFlow aufgerufen, wenn der Interaktionsmanager sich ändert. 
		 
		 <p>Diese Funktion wird automatisch aufgerufen. Ihr Code ruft diese Methode normalerweise nicht auf. Klassen, durch die der StandardFlowComposer erweitert wird, können diese Methode überschreiben, um Ereignis-Listener und andere Eigenschaften, die vom Interaktionsmanager abhängen, zu aktualisieren.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:protected:preCompose"><apiName>preCompose</apiName><shortdesc> Gibt „true“ zurück, wenn die Erstellung erforderlich ist, ansonsten „false“. </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> Gibt „true“ zurück, wenn die Erstellung erforderlich ist, ansonsten „false“. </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeAllControllers"><apiName>removeAllControllers</apiName><shortdesc conref="IFlowComposer#removeAllControllers()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="IFlowComposer#removeAllControllers()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeControllerAt"><apiName>removeControllerAt</apiName><shortdesc conref="IFlowComposer#removeControllerAt()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition des ContainerController-Objekts, das entfernt werden soll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#removeControllerAt()"> </apiDesc><example conref="examples\StandardFlowController_removeControllerAt.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:removeController"><apiName>removeController</apiName><shortdesc conref="IFlowComposer#removeController()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiDesc>Die ContainerController-Instanz, die entfernt werden soll.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#removeController()"> </apiDesc><example conref="examples\StandardFlowController_removeController.as"/></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setFocus"><apiName>setFocus</apiName><shortdesc> 
		 Legt den Fokus auf den Container, der die vom absolutePosition-Parameter angegebene Position enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>absolutePosition</apiItemName><apiType value="int"/><apiDesc>Gibt die Position im Textfluss des Containers an, der den Fokus erhalten soll.
		 </apiDesc></apiParam><apiParam><apiItemName>leanLeft</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Im Fall von „true“ und wenn die Position vor dem ersten Zeichen in einem Container ist, wird der Fokus auf das Ende des vorherigen Containers gelegt.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Legt den Fokus auf den Container, der die vom <codeph>absolutePosition</codeph>-Parameter angegebene Position enthält. 
		 
		 <p>Der StandardFlowComposer ruft die <codeph>setFocus()</codeph>-Methode des ContainerController-Objekts auf, das die angegebene Textflussposition enthält.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Stage/focus"><linktext>flash.display.Stage.focus</linktext></link></related-links></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:setRootElement"><apiName>setRootElement</apiName><shortdesc conref="IFlowComposer#setRootElement()"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newRootElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiOperationClassifier></apiParam></apiOperationDef><apiDesc conref="IFlowComposer#setRootElement()"> </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateAllControllers"><apiName>updateAllControllers</apiName><shortdesc> 
		 Erstellt den Inhalt des Stammelements und aktualisiert die Anzeige.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>„true“, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc> 
		 Erstellt den Inhalt des Stammelements und aktualisiert die Anzeige.  
		 
		 <p>Das Textlayout besteht aus zwei Phasen: Erstellung und Anzeige. In der Erstellungsphase berechnet der Flow-Composer die Anzahl der für die Anzeige des Inhalts erforderlichen Zeilen sowie deren Position in den Anzeigecontainern des Textflusses. In der Anzeigephase aktualisiert der Flow-Composer die untergeordneten Anzeigeobjektelemente seiner Container. Die <codeph>updateAllControllers()</codeph>-Methode initiiert beide Phasen der Reihe nach. Der StandardFlowComposer überwacht Änderungen am Inhalt, sodass ein vollständiger Erstellungs- und Anzeigezyklus nur durchgeführt wird, wenn Bedarf besteht.</p>
		 
		 <p>Diese Methode aktualisiert alle Textzeilen und die Anzeigeliste sofort und synchron.</p>
		 
		 <p>Wenn der Inhalt von Containern geändert wurde, gibt die Methode <codeph>true</codeph> zurück.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:StandardFlowComposer:updateToController"><apiName>updateToController</apiName><shortdesc> 
		 Erstellt und aktualisiert die Anzeige bis zum und einschließlich des Containers an der angegebenen Indexposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wert <codeph>true</codeph>, wenn etwas geändert wurde.
		 
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>unknown</apiData><apiDesc>Indexposition des letzten Containers, der aktualisiert werden soll (standardmäßig werden alle Container aktualisiert).
		 </apiDesc></apiParam></apiOperationDef><apiDesc> 
		 Erstellt und aktualisiert die Anzeige bis zum und einschließlich des Containers an der angegebenen Indexposition.
		 
		 <p>Die <codeph>updateToController()</codeph>-Methode erstellt den Inhalt und aktualisiert die Anzeige aller Container bis zum und einschließlich des Containers an der angegebenen Indexposition. Beispiel: Wenn Sie in einer Kette von 20 Containern die Indexposition 10 angeben, stellt <codeph>updateToController()</codeph> sicher, dass die ersten zehn Container (Indexpositionen 0-9) erstellt und angezeigt werden. Die Erstellung wird an diesem Punkt beendet. Wenn <codeph>controllerIndex</codeph> -1 ist (oder nicht angegeben), werden alle Container aktualisiert.</p>
		 
		 <p>Diese Methode aktualisiert alle Textzeilen und die Anzeigeliste sofort und synchron.</p>
		 
		 <p>Wenn der Inhalt von Containern geändert wurde, gibt die Methode <codeph>true</codeph> zurück.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:StandardFlowComposer:composing:get"><apiName>composing</apiName><shortdesc> 
		 „true“, falls der Flow-Composer derzeit einen Erstellungsvorgang durchführt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc> 
		 „true“, falls der Flow-Composer derzeit einen Erstellungsvorgang durchführt. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:numControllers:get"><apiName>numControllers</apiName><shortdesc conref="IFlowComposer#numControllers"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="IFlowComposer#numControllers"> </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:StandardFlowComposer:rootElement:get"><apiName>rootElement</apiName><shortdesc conref="IFlowComposer#rootElement"> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:ContainerFormattedElement</apiValueClassifier></apiValueDef><apiDesc conref="IFlowComposer#rootElement"> </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:IVerticalJustificationLine"><apiName>IVerticalJustificationLine</apiName><shortdesc> 
	 Die IVerticalJustificationLine-Schnittstelle definiert Methoden und Eigenschaften, die für die vertikale Ausrichtung von Textzeilen erforderlich sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc> 
	 Die IVerticalJustificationLine-Schnittstelle definiert Methoden und Eigenschaften, die für die vertikale Ausrichtung von Textzeilen erforderlich sind.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:ascent:get"><apiName>ascent</apiName><shortdesc conref="flash.text.engine.TextLine#ascent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#ascent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:descent:get"><apiName>descent</apiName><shortdesc conref="flash.text.engine.TextLine#descent"> 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.engine.TextLine#descent"> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:height:get"><apiName>height</apiName><shortdesc> Die Zeilenhöhe in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc> Die Zeilenhöhe in Pixeln.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:x:get"><apiName>x</apiName><shortdesc> 
		 Die horizontale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom linken Rand des Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Die horizontale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom linken Rand des Containers.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/y"><linktext>y</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:IVerticalJustificationLine:flashx.textLayout.compose:IVerticalJustificationLine:y:get"><apiName>y</apiName><shortdesc> 
		 Die vertikale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom oberen Rand des Containers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc> 
		 Die vertikale Position der Zeile relativ zu ihrem Container, ausgedrückt in Pixeln als Offset vom oberen Rand des Containers.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#IVerticalJustificationLine/x"><linktext>x</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextFlowLineLocation"><apiName>TextFlowLineLocation</apiName><shortdesc> 
	 Die TextFlowLineLocation-Klasse ist eine Aufzählungsklasse, die Konstanten zum Festlegen der Position einer Zeile innerhalb eines Absatzes festlegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Die TextFlowLineLocation-Klasse ist eine Aufzählungsklasse, die Konstanten zum Festlegen der Position einer Zeile innerhalb eines Absatzes festlegt.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flashx.textLayout.compose.ParagraphElement.xml"><linktext>ParagraphElement</linktext></link><link href="" invalidHref="flashx.textLayout.compose.TextFlow.xml"><linktext>TextFlow</linktext></link></related-links><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:FIRST"><apiName>FIRST</apiName><shortdesc> Legt die erste Zeile in einem Absatz fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiType value="uint"/></apiValueDef><apiDesc> Legt die erste Zeile in einem Absatz fest. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:LAST"><apiName>LAST</apiName><shortdesc> Legt die letzte Zeile in einem Absatz fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>4</apiData><apiType value="uint"/></apiValueDef><apiDesc> Legt die letzte Zeile in einem Absatz fest.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:MIDDLE"><apiName>MIDDLE</apiName><shortdesc> Legt eine Zeile innerhalb eines Absatzes fest, die weder die erste noch die letzte Zeile ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiType value="uint"/></apiValueDef><apiDesc> Legt eine Zeile innerhalb eines Absatzes fest, die weder die erste noch die letzte Zeile ist. 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.compose:TextFlowLineLocation:ONLY"><apiName>ONLY</apiName><shortdesc> Legt sowohl die erste als auch die letzte Zeile in einem Absatz fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>5</apiData><apiType value="uint"/></apiValueDef><apiDesc> Legt sowohl die erste als auch die letzte Zeile in einem Absatz fest.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:TextLineRecycler"><apiName>TextLineRecycler</apiName><shortdesc> 
	 Die TextLineRecycler-Klasse bietet Unterstützung für das Recycling von TextLines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Die TextLineRecycler-Klasse bietet Unterstützung für das Recycling von TextLines. Einige Player-Versionen unterstützen eine „recreateTextLine“. Das Übergeben von TextLines an den Recycler stellt sie zur Wiederverwendung zur Verfügung. Dadurch wird die Player-Leistung verbessert.
	 
	 </apiDesc></apiClassifierDetail><apiOperation id="flashx.textLayout.compose:TextLineRecycler:addLineForReuse"><apiName>addLineForReuse</apiName><shortdesc>
		 Fügt dem Pool eine TextLine zur Wiederverwendung hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>textLine</apiItemName><apiType value="flash.text.engine:TextLine"/></apiParam></apiOperationDef><apiDesc>
		 Fügt dem Pool eine TextLine zur Wiederverwendung hinzu. TextLines zur Wiederverwendung sollten null-userData und übergeordnete null-Elemente haben. 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flashx.textLayout.compose:TextLineRecycler:getLineForReuse"><apiName>getLineForReuse</apiName><shortdesc>
		 Gibt eine TextLine zur Wiederverwendung aus dem Pool zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="flash.text.engine:TextLine"/></apiReturn></apiOperationDef><apiDesc>
		 Gibt eine TextLine zur Wiederverwendung aus dem Pool zurück. 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flashx.textLayout.compose:TextLineRecycler:textLineRecyclerEnabled:get"><apiName>textLineRecyclerEnabled</apiName><shortdesc> </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.compose:FlowDamageType"><apiName>FlowDamageType</apiName><shortdesc>
	  Die Aufzählungsklasse FlowDamageType-Klasse definiert die Beschädigungstypen für Beschädigungsmethoden und -ereignisse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	  Die Aufzählungsklasse FlowDamageType-Klasse definiert die Beschädigungstypen für Beschädigungsmethoden und -ereignisse.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="flashx.textLayout.compose:FlowDamageType:GEOMETRY"><apiName>GEOMETRY</apiName><shortdesc>
		 Dieser Wert wird verwendet, um die validity-Eigenschaft festzulegen, wenn die Zeile durch die Verschiebung anderer Zeilen entwertet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>geometry</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 Dieser Wert wird verwendet, um die <codeph>validity</codeph>-Eigenschaft festzulegen, wenn die Zeile durch die Verschiebung anderer Zeilen entwertet wurde. Die Textzeile muss möglicherweise beim nächsten Zusammenstellungsvorgang neu erstellt werden. 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.compose:FlowDamageType:INVALID"><apiName>INVALID</apiName><shortdesc> 
		 Gibt den ungültigen Beschädigungstyp an, der von IFlowComposer zur Behandlung von Beschädigungen verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Gibt den ungültigen Beschädigungstyp an, der von IFlowComposer zur Behandlung von Beschädigungen verwendet wird.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.compose.xml#TextFlowLine/validity"><linktext>flashx.textLayout.compose.TextFlowLine.validity</linktext></link></related-links></apiValue></apiClassifier></apiPackage>