<?xml version="1.0"?>
<apiPackage id="flashx.textLayout.events"><apiName>flashx.textLayout.events</apiName><apiDetail/><apiClassifier id="flashx.textLayout.events:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> Dieses Ereignis wird von einem LinkElement ausgelöst, wenn es Mausaktivität feststellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> Dieses Ereignis wird von einem LinkElement ausgelöst, wenn es Mausaktivität feststellt. Das Text Layout Framework enthält diese besondere Version eines Mausereignisses, denn Mausereignisse sind im Allgemeinen unerwünscht, wenn ein Linkelement in einem editierbaren Textfluss eingebettet ist. 
	 <p>Sie können einem LinkElement einen Ereignis-Listener hinzufügen, um auf diese Art von Ereignis zu warten. Wenn Sie sich entscheiden, das Ereignis abzubrechen, indem Sie <codeph>Event.preventDefault()</codeph> aufrufen, tritt das standardmäßige Verhalten, welches mit diesem Ereignis verknüpft ist, nicht auf.
	 </p>
	 <p>Wenn Sie sich entscheiden, dem LinkElement keinen Ereignis-Listener hinzuzufügen, oder Ihre Ereignis-Listener-Funktion das Verhalten nicht beendet, wird das Ereignis erneut ausgelöst, diesmal jedoch nicht vom LinkElement selbst, sondern von der dazugehörigen TextFlow-Instanz. Dies bietet eine zweite Möglichkeit, mit einem Ereignis-Listener, der dem TextFlow angefügt ist, auf dieses Ereignis zu warten. 
	 </p>
	 <p>FlowElementMouseEvents werden nur ausgelöst, wenn der Text nicht editiert werden kann oder wenn gleichzeitig mit der Mausaktivität auch die Strg-Taste gedrückt wird.</p>
	 <p>
	 Die folgenden sechs Ereignistypen werden nur ausgelöst, wenn der Text nicht editiert werden kann oder die Strg-Taste gedrückt wird.
	 <ul>
	   <li><codeph>MouseEvent.CLICK</codeph></li>
	   <li><codeph>MouseEvent.MOUSE_DOWN</codeph></li>
	   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
	   <li><codeph>MouseEvent.MOUSE_UP</codeph></li>
	   <li><codeph>MouseEvent.ROLL_OVER</codeph></li>
	   <li><codeph>MouseEvent.ROLL_OUT</codeph></li>
	 </ul>
	 </p>
	 
	 </apiDesc><example conref="examples\FlowElementMouseEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:FlowElementMouseEvent:FlowElementMouseEvent"><apiName>FlowElementMouseEvent</apiName><shortdesc> 
		 Erstellt ein Ereignisobjekt, das Informationen über Mauseaktivität enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene <codeph>type</codeph>-Eigenschaft auf diese Informationen zugreifen. Es gibt sechs Typen: <codeph>MouseEvent.CLICK</codeph>; <codeph>MouseEvent.MOUSE_DOWN</codeph>; <codeph>MouseEvent.MOUSE_OUT</codeph>; <codeph>MouseEvent.MOUSE_UP</codeph>; <codeph>MouseEvent.ROLL_OVER</codeph>; and <codeph>MouseEvent.ROLL_OUT</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Bestimmt, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. FlowElementMouseEvent-Objekte propagieren nicht.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Bestimmt, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene <codeph>cancelable</codeph>-Eigenschaft auf diese Informationen zugreifen. FlowElementMouseEvent-Objekte können abgebrochen werden. Sie können das mit diesem Ereignis verknüpfte Standardverhalten abbrechen, indem Sie die <codeph>preventDefault()</codeph>-Methode in Ihrem Ereignis-Listener aufrufen.
		 </apiDesc></apiParam><apiParam><apiItemName>flowElement</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Die Instanz des FlowElements, normalerweise ein LinkElement, ist mit diesem Ereignis verknüpft. Ereignis-Listener können über die <codeph>flowElement</codeph>-Eigenschaft auf diese Informationen zugreifen.
		 </apiDesc></apiParam><apiParam><apiItemName>originalEvent</apiItemName><apiType value="flash.events:MouseEvent"/><apiData>null</apiData><apiDesc>Das ursprüngliche Mausereignis, das für das FlowElement auftrat. Ereignis-Listener können über die <codeph>originalEvent</codeph>-Eigenschaft auf diese Informationen zugreifen.

		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Erstellt ein Ereignisobjekt, das Informationen über Mauseaktivität enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben. Verwenden Sie den Konstruktor, wenn Sie vorhaben, ein Ereignis manuell auszulösen. Um auf FlowElementMouseEvent-Objekte zu warten, die von einem LinkElement generiert wurden, benötigen Sie den Konstruktor nicht.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:flowElement:get"><apiName>flowElement</apiName><shortdesc> 
		 Das LinkElement, das das Ereignis auslöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Das LinkElement, das das Ereignis auslöst.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#LinkElement"><linktext>flashx.textLayout.elements.LinkElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:FlowElementMouseEvent:originalEvent:get"><apiName>originalEvent</apiName><shortdesc> 
		 Das ursprüngliche Mausereignis, das durch die Mausaktivität generiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:MouseEvent"/></apiValueDef><apiDesc> 
		 Das ursprüngliche Mausereignis, das durch die Mausaktivität generiert wurde. Diese Eigenschaft kann einen der folgenden Werte enthalten:
		 <ul>
		   <li><codeph>MouseEvent.CLICK</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_DOWN</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_UP</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OVER</codeph></li>
		   <li><codeph>MouseEvent.MOUSE_OUT</codeph></li>
		 </ul>
		 <p>
		 In den meisten Fällen stimmt das ursprüngliche Ereignis mit dem vom LinkElement ausgelösten Ereignis überein. Die Ereignisse stimmen für <codeph>click</codeph>-, <codeph>mouseDown</codeph>-, <codeph>mouseOut</codeph>- und <codeph>mouseOver</codeph>-Ereignisse überein. Es gibt jedoch zwei Fälle, in denen das ursprüngliche Ereignis vom LinkElement in ein verwandtes Ereignis konvertiert wird. Wenn ein LinkElement ein <codeph>mouseOver</codeph>-Ereignis erkennt, löst es ein<codeph>rollOver</codeph>-Ereignis aus. Wenn ein LinkElement ein <codeph>mouseOut</codeph>-Ereignis erkennt, löst es ein<codeph>rollOut</codeph>-Ereignis aus.
		 </p>
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.MouseEvent.xml"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis aus, nachdem ein compose-Vorgang abgeschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis aus, nachdem ein compose-Vorgang abgeschlossen wurde. Jeder Textcontainer besitzt zwei Status: Zusammenstellung und Anzeige. Dieses Ereignis benachrichtigt Sie, wenn die Zusammenstellungsphase beendet ist. Dies bietet die Möglichkeit, notwendige und geeignete Änderungen am Container vorzunehmen, bevor Sie den Text anzeigen. Beispielsweise können Sie mit diesem Ereignis Markierungen von bestimmten Wörtern oder Zeichen im Textfluss hinzufügen, bevor der Text angezeigt wird.
	 
	 <p>Die drei wichtigsten Methoden, die dieses Ereignis auslösen, sind <codeph>compose()</codeph>, <codeph>updateToController()</codeph> und <codeph>updateAllControllers()</codeph>. Alle diese drei Methoden sind in der StandardFlowComposer-Klasse enthalten.</p>
	 
	 <p><b>Hinweis:</b> Wenn das Ereignis von der <codeph>updateAllControllers()</codeph>-Methode ausgelöst wird, rufen Sie die <codeph>updateAllControllers()</codeph>-Methode in der Ereignisprozedurfunktion nicht erneut auf. Dies wäre ein rekursiver Aufruf, da die <codeph>updateAllControllers()</codeph>-Methode sowohl die Zusammenstellungs- als auch die Anzeigeschritte ausführt. Durch <codeph>updateAllControllers()</codeph> wird dieses Ereignis ausgelöst, nachdem die Zusammenstellung abgeschlossen ist, aber bevor der Anzeigeschritt ausgeführt wird. Die gleiche Logik gilt für die <codeph>updateToController()</codeph>-Methode.
	 </p>
	 
	 </apiDesc><example conref="examples\CompositionCompleteEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:CompositionCompleteEvent:CompositionCompleteEvent"><apiName>CompositionCompleteEvent</apiName><shortdesc> Konstruktor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Ereignistyp - verwenden Sie die statische COMPOSITION_COMPLETE-Eigenschaft.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob das Ereignis propagiert werden kann. Dieses Ereignis propagiert nicht.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann. Dieses Ereignis kann nicht abgebrochen werden.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>Der zusammengestellte TextFlow. 
		 </apiDesc></apiParam><apiParam><apiItemName>compositionStart</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Begin der Zusammenstellung als Indexposition im Textfluss.
		 </apiDesc></apiParam><apiParam><apiItemName>compositionLength</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Länge - die Anzahl der zusammengesetzten Zeichen
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Konstruktor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:COMPOSITION_COMPLETE"><apiName>COMPOSITION_COMPLETE</apiName><shortdesc> 
	     Definiert den Wert der type-Eigenschaft eines compositionComplete-Ereignisobjekts 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compositionComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>compositionComplete</codeph>-Ereignisobjekts 
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionLength:get"><apiName>compositionLength</apiName><shortdesc> 
		 Die Anzahl der zusammengestellten Zeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die Anzahl der zusammengestellten Zeichen.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:compositionStart:get"><apiName>compositionStart</apiName><shortdesc> 
		 Die Startposition des Textbereichs, der von der Zusammenstellung betroffen ist, ausgedrückt als Indexposition innerhalb des Textflusses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Die Startposition des Textbereichs, der von der Zusammenstellung betroffen ist, ausgedrückt als Indexposition innerhalb des Textflusses.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:CompositionCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow, in dem die Zusammenstellung abgeschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow, in dem die Zusammenstellung abgeschlossen wurde. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis jedes Mal aus, wenn es als beschädigt markiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis jedes Mal aus, wenn es als beschädigt markiert wird. Schäden können durch Änderungen am Modell oder am Layout verursacht werden.
	 
	 </apiDesc><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:DamageEvent:DamageEvent"><apiName>DamageEvent</apiName><shortdesc> Konstruktor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Textindexposition am Beginn des Schadens
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Länge des Textes, der beschädigt wurde
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>damageAbsoluteStart</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>damageLength</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam></apiConstructorDef><apiDesc> Konstruktor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:DamageEvent:DAMAGE"><apiName>DAMAGE</apiName><shortdesc> Ereignis-Typ für DamageEvent </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>damage</apiData><apiType value="String"/></apiValueDef><apiDesc> Ereignis-Typ für DamageEvent </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageAbsoluteStart:get"><apiName>damageAbsoluteStart</apiName><shortdesc>
		 Absoluter Beginn des Schadens 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Absoluter Beginn der Schadens 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:damageLength:get"><apiName>damageLength</apiName><shortdesc>
		 Länge des Schadens 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 Länge des Schadens 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:DamageEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow, zu dem der Schaden gehört 
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow, zu dem der Schaden gehört 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis aus, wenn sich der Status eines FlowElement ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis aus, wenn sich der Status eines FlowElement ändert. Dieses Ereignis kann verwendet werden, um zu ermitteln, wann ein Inline-Grafikelement vollständig geladen ist. Sie können Ihre Ereignisprozedur verwenden, um den Textfluss, basierend auf der Anwesenheit eines neu geladenen Inline-Grafikelements, erneut zusammensetzen zu lassen.
	 
	 </apiDesc><example conref="examples\StatusChangeEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:StatusChangeEvent:StatusChangeEvent"><apiName>StatusChangeEvent</apiName><shortdesc> Erstellt ein Ereignisobjekt, das Informationen über Statusänderungen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	Der Ereignistyp. Ereignis-Listener können über die übernommene <codeph>type</codeph>-Eigenschaft auf diese Informationen zugreifen. Es gibt nur einen Typ von StatusChangeEvent: <codeph>StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, ob ein Ereignis ein propagiert werden kann. Dieses Ereignis propagiert nicht.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann. Dieses Ereignis kann nicht abgebrochen werden.
		 </apiDesc></apiParam><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flashx.textLayout.elements:FlowElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Die FlowElement-Instanz, deren Status geändert wurde.
		 </apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der neue Status der FlowElement-Instanz.
		 </apiDesc></apiParam><apiParam><apiItemName>errorEvent</apiItemName><apiType value="flash.events:ErrorEvent"/><apiData>null</apiData><apiDesc>Das ErrorEvent-Objekt (sofern vorhanden), das mit dem Status verknüpft ist.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Erstellt ein Ereignisobjekt, das Informationen über Statusänderungen enthält.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:StatusChangeEvent:INLINE_GRAPHIC_STATUS_CHANGE"><apiName>INLINE_GRAPHIC_STATUS_CHANGE</apiName><shortdesc> 
	     Definiert den Wert der type-Eigenschaft eines inlineGraphicStatusChanged-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>inlineGraphicStatusChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>inlineGraphicStatusChanged</codeph>-Ereignisobjekts.
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:element:get"><apiName>element</apiName><shortdesc> 
		 Die FlowElement-Instanz, deren Status geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:FlowElement</apiValueClassifier></apiValueDef><apiDesc> 
		 Die FlowElement-Instanz, deren Status geändert wurde. 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#FlowElement"><linktext>flashx.textLayout.elements.FlowElement</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:errorEvent:get"><apiName>errorEvent</apiName><shortdesc> 
		 Das ErrorEvent-Objekt, das als Ergebnis der Statusänderung ausgelöst wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:ErrorEvent"/></apiValueDef><apiDesc> 
		 Das ErrorEvent-Objekt, das als Ergebnis der Statusänderung ausgelöst wurde. 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.ErrorEvent.xml"><linktext>flash.events.ErrorEvent</linktext></link></related-links></apiValue><apiValue id="flashx.textLayout.events:StatusChangeEvent:status:get"><apiName>status</apiName><shortdesc>
		 Der neue Status des FlowElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
		 Der neue Status des FlowElement. Die möglichen Werte dieser Eigenschaft werden von der InlineGraphicElementStatus-Klasse definiert. Fünf statische Konstanten sind in der InlineGraphicElementStatus-Klasse verfügbar:
		 <ul>
		   <li>ERROR : String = "error". Beim Laden einer referenzierten Grafik ist ein Fehler aufgetreten.</li>
		   <li>LOADING : String = "loading". Der Ladevorgang wurde für ein Grafikelement ausgelöst (aber nicht abgeschlossen), das eine URL ist.</li>
		   <li>LOAD_PENDING : String = "loadPending". Das Grafikelement ist eine URL, die nicht geladen wurde.</li>
		   <li>READY : String = "ready". Die Grafik wurde vollständig geladen und die Größe richtig festgelegt.</li>
		   <li>SIZE_PENDING : String = "sizePending". Das Laden des Grafikelements mit einer automatischen oder prozentualen Breite/Höhe wurde abgeschlossen, aber es wurde nicht wieder zusammengestellt.</li>
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.elements.xml#InlineGraphicElementStatus"><linktext>flashx.textLayout.elements.InlineGraphicElementStatus</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
	 Eine TextFlow-Instanz löst ein SelectionEvent-Objekt aus, wenn ein EditManager oder SelectionManager einen Textbereich ändert oder auswählt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Eine TextFlow-Instanz löst ein SelectionEvent-Objekt aus, wenn ein EditManager oder SelectionManager einen Textbereich ändert oder auswählt. Beispiel: Dieses Ereignis wird nicht nur ausgelöst, wenn ein Textbereich ausgewählt wird, sondern auch, wenn sich die Auswahl ändert, weil der Benutzer an einer anderen Stelle in den Textfluss geklickt hat. Weiterhin wird dieses Ereignis ausgelöst, wenn ein EditManager den Text oder die Textformatierung innerhalb eines Textabschnitts verändert.
	 
	 </apiDesc><example conref="examples\SelectionEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:SelectionEvent:SelectionEvent"><apiName>SelectionEvent</apiName><shortdesc> 
		 Erstellt ein Ereignis-Objekt, das Informationen über einen flow-Vorgang enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	Der Ereignistyp. Ereignis-Listener können über die übernommene <codeph>type</codeph>-Eigenschaft auf diese Informationen zugreifen. Es gibt nur einen Typ von SelectionEvent: <codeph>SelectionEvent.SELECTION_CHANGE</codeph>; 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, ob ein Ereignis propagiert werden kann. Dieses Ereignis propagiert nicht.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann.
		 </apiDesc></apiParam><apiParam><apiItemName>selectionState</apiItemName><apiOperationClassifier>flashx.textLayout.edit:SelectionState</apiOperationClassifier><apiData>null</apiData><apiDesc>	Ein Objekt vom Typ ElementRange, das den Bereich des ausgewählten Textes beschreibt.
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> 
		 Erstellt ein Ereignis-Objekt, das Informationen über einen flow-Vorgang enthält.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:SelectionEvent:SELECTION_CHANGE"><apiName>SELECTION_CHANGE</apiName><shortdesc> 
		 Die SelectionEvent.SELECTION_CHANGE-Konstante definiert den Wert der type-Eigenschaft des Ereignisobjekts für ein selection-Ereignis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Die SelectionEvent.SELECTION_CHANGE-Konstante definiert den Wert der Type-Eigenschaft des Ereignisobjekts für ein selction-Ereignis. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:SelectionEvent:selectionState:get"><apiName>selectionState</apiName><shortdesc> 
		 Ein Objekt des Typs SelectionState, das den mit diesem SelectionEvent verknüpften ausgewählten Bereich darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.edit:SelectionState</apiValueClassifier></apiValueDef><apiDesc> 
		 Ein Objekt des Typs SelectionState, das den mit diesem SelectionEvent verknüpften ausgewählten Bereich darstellt.
		 
		 <p>Sie können diese Eigenschaft zusammen mit der ElementRange-Klasse verwenden, um eine ElementRange-Instanz zu erstellen, die den Bereich des ausgewählten Textes darstellt. Sie können die folgende Code-Zeile verwenden, um eine Instanz der ElementRange-Klasse zu erstellen, die den Bereich des ausgewählten Texts darstellt (die <codeph>ev</codeph>-Variable stellt das Ereignisobjekt dar und der Bedingungsoperator wird als Schutz gegen einen <codeph>null</codeph>-Wert für die<codeph>selectionState</codeph>-Eigenschaft verwendet):</p>
		 <codeblock>
		 // Find selected element range
		 var range:ElementRange = ev.selectionState ?  
		 	ElementRange.createElementRange(ev.selectionState.textFlow,
		 	ev.selectionState.absoluteStart, ev.selectionState.absoluteEnd) : null;</codeblock>
		 
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.edit.xml#ElementRange"><linktext>flashx.textLayout.edit.ElementRange</linktext></link><link href="flashx.textLayout.edit.xml#SelectionState"><linktext>flashx.textLayout.edit.SelectionState</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> Eine TextFlow-Instanz löst dieses Ereignis aus, direkt bevor ein Vorgang beginnt und direkt nachdem der Vorgang abgeschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> Eine TextFlow-Instanz löst dieses Ereignis aus, direkt bevor ein Vorgang beginnt und direkt nachdem der Vorgang abgeschlossen wurde. Obwohl das Ereignisobjekt, das in beiden Klassen ausgelöst wurde, eine Instanz von FlowOperationEvent ist, unterscheiden sich die vor und nach dem Vorgang ausgelösten Ereignisse in signifikanter Weise.
	 
	 <p>Bevor ein Vorgang durchgeführt wird, löst ein TextFlow-Objekt ein FlowOperationEvent aus, wobei dessen <codeph>type</codeph>-Eigenschaft auf Folgendes gesetzt ist: <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN.</codeph> Sie können bestimmen, welcher Vorgangstyp gerade beginnt, indem Sie die<codeph>operation</codeph>-Eigenschaft überprüfen. Ereignisse vom Typ FLOW_OPERATION_BEGIN können abgebrochen werden, d. h., wenn Sie entscheiden, dass dieser Vorgang abgebrochen werden soll, können Sie <codeph>Event.PreventDefault()</codeph> zum Abbruch des Vorgangs aufrufen. Wenn Sie den Vorgang abbrechen, wird der Vorgang nicht durchgeführt und das FLOW_OPERATION_END-Ereignis wird nicht ausgelöst. Sie können auch einen Rückruf in den EditManager ausführen, um einen weiteren Vorgang auszuführen, bevor der Vorgang, der das Ereignis ausgelöst hat, abgeschlossen ist. In diesem Fall werden die in Ihrer Ereignisprozedur gestarteten Vorgänge zusammen mit dem Vorgang, der das Ereignis ausgelöst hat, rückgängig gemacht.</p>
	 
	 <p>Wenn Sie den Vorgang fortsetzen, löst TextFlow nach Abschluss des Vorgangs ein FlowOperationEvent aus, wobei seine <codeph>type</codeph>-Eigenschaft auf <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph> gesetzt ist. Dieses Ereignis wird ausgelöst, bevor Flash Player Fehler ausgibt, die möglicherweise als Ergebnis des Vorgangs aufgetreten sind. Dies gibt Ihnen die Möglichkeit, den Fehler zu verarbeiten, bevor Flash Player ihn ausgibt. Sie können auf den Fehler über die<codeph>error</codeph>-Eigenschaft des Ereignisses zugreifen. Wenn Sie sich entscheiden, den Fehler in Ihrer Ereignisprozedur zu verarbeiten, können Sie Flash Player daran hindern, den Fehler auszugeben, indem Sie das FLOW_OPERATION_END-Ereignis durch Aufrufen von <codeph>Event.preventDefault()</codeph> abbrechen. Sie können auch einen Rückruf in den EditManager ausführen, um einige zusätzliche Vorgänge auszuführen. In diesem Fall werden die resultierenden Vorgänge als eine Einheit mit dem Vorgang, der das Ereignis ausgelöst hat, rückgängig gemacht.
	 </p> 
	 
	 </apiDesc><example conref="examples\FlowOperationEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:FlowOperationEvent:FlowOperationEvent"><apiName>FlowOperationEvent</apiName><shortdesc> Erstellt ein Ereignis-Objekt, das Informationen über einen flow-Vorgang enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>		Der Ereignistyp. Ereignis-Listener können über die übernommene <codeph>type</codeph>-Eigenschaft auf diese Informationen zugreifen. Es gibt zwei Typen: <codeph>FlowOperationEvent.FLOW_OPERATION_BEGIN</codeph>; <codeph>FlowOperationEvent.FLOW_OPERATION_END</codeph>.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>		Gibt an, ob ein Ereignis propagiert werden kann. Dieses Ereignis propagiert nicht.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann. Dieses Ereignis kann abgebrochen werden, indem Sie die <codeph>Event.preventDefault()</codeph>-Methode in Ihrer Ereignisprozedur-Funktion aufrufen.
		 </apiDesc></apiParam><apiParam><apiItemName>operation</apiItemName><apiOperationClassifier>flashx.textLayout.operations:FlowOperation</apiOperationClassifier><apiData>null</apiData><apiDesc>	Die FlowOperation, die aktuell startet oder gerade beendet wurde.
		 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>		Ein Fehler, der während des Vorgangs auftrat.
		 </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiType value="Error"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc> Erstellt ein Ereignis-Objekt, das Informationen über einen flow-Vorgang enthält.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_BEGIN"><apiName>FLOW_OPERATION_BEGIN</apiName><shortdesc> 
		 Definiert den Wert der type-Eigenschaft eines flowOperationBegin-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationBegin</apiData><apiType value="String"/></apiValueDef><apiDesc> 
		 Definiert den Wert einer <codeph>type</codeph>-Eigenschaft eines <codeph>flowOperationBegin</codeph>-Ereignisobjekts, das vor der Ausführung eines Vorgangs ausgelöst wird. Der Abbruch dieses Ereignisses blockt den Vorgang. 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_COMPLETE"><apiName>FLOW_OPERATION_COMPLETE</apiName><shortdesc>  
		 Definiert den Wert der type-Eigenschaft eines flowOperationComplete-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>flowOperationComplete</codeph>-Ereignisobjekts. Wird abgesetzt, nachdem alle Operationen einschließlich ausstehender und zusammengesetzter Operationen abgeschlossen sind, der Satz fertig gestellt und die Anzeige gescrollt wurde.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:FLOW_OPERATION_END"><apiName>FLOW_OPERATION_END</apiName><shortdesc>  
		 Definiert den Wert der type-Eigenschaft eines flowOperationEnd-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flowOperationEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>  
		 Definiert den Wert einer <codeph>type</codeph>-Eigenschaft eines <codeph>flowOperationEnd</codeph>-Ereignisobjekts, das nach der Beendigung eines Vorgangs ausgelöst wird. Fehler werden in <codeph>OperationEvent.error</codeph> gespeichert. Falls ein Fehler auftritt, blockiert der Abbruch dieses Ereignisses die erneute Ausgabe des Fehlers. Im Allgemeinen haben Fehler fatale Folgen.
	 	 <p>Das Ändern eines Vorgangs an dieser Stelle (nachdem er ausgeführt wurde) schlägt möglicherweise fehl.</p> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:error:get"><apiName>error</apiName><shortdesc> 
		 Der ggf. während eines Vorgangs ausgegebene Fehler.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Error"/></apiValueDef><apiDesc> 
		 Der ggf. während eines Vorgangs ausgegebene Fehler. Wenn während eines Vorgangs ein Fehler auftritt, wird ein Verweis zum error-Objekt an das FLOW_OPERATION_END-Event angefügt. Dies gibt Ihnen die Möglichkeit, den Fehler zu verarbeiten, bevor Flash Player ihn ausgibt. Wenn Sie das Ereignis abbrechen, gibt Flash Player keinen Fehler aus.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:level:get"><apiName>level</apiName><shortdesc> 
		 Operationen können durch Verschachteln zu zusammengesetzten Operationen  zusammengeführt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc> 
		 Operationen können durch Verschachteln zu zusammengesetzten Operationen  zusammengeführt werden. Dieser Kennzeichner beschreibt die Verschachtelungsebene der Operation.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:FlowOperationEvent:operation:get"><apiName>operation</apiName><shortdesc> 
		 Der Vorgang, der aktuell startet oder gerade abgeschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.operations:FlowOperation</apiValueClassifier></apiValueDef><apiDesc> 
		 Der Vorgang, der aktuell startet oder gerade beendet wurde.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flashx.textLayout.operations.xml#FlowOperation"><linktext>flashx.textLayout.operations.FlowOperation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis aus, nachdem einer ihrer Container eine Aktualisierung beendet hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>Note: the DamageEvent_example class contains a good example of 
	 using the UpdateCompleteEvent, so I have included it as the class example
	 instead of creating a new example. I've updated the description of the
	 DamageEvent_example file to include prominent mention of the UpdateCompleteEvent.
	 
	 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
	 Eine TextFlow-Instanz löst dieses Ereignis aus, nachdem einer ihrer Container eine Aktualisierung beendet hat. Bei jedem Textcontainer sind zwei Zustände möglich: Zusammenstellung und Anzeige. Dieses Ereignis benachrichtigt Sie, wenn die Anzeigephase beendet ist. Dies bietet die Möglichkeit, notwendige Änderungen am Container vorzunehmen, wenn dieser für die Anzeige bereit, aber noch nicht auf dem Bildschirm erschienen ist.
	 
	 </apiDesc><example conref="examples\DamageEvent_example.as"/></apiClassifierDetail><related-links><link href="flashx.textLayout.elements.xml#TextFlow"><linktext>flashx.textLayout.elements.TextFlow</linktext></link></related-links><apiConstructor id="flashx.textLayout.events:UpdateCompleteEvent:UpdateCompleteEvent"><apiName>UpdateCompleteEvent</apiName><shortdesc> Konstruktor
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>Ereignistyp - verwenden Sie die statische UPDATE_COMPLETE-Eigenschaft.
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob dieses Ereignis propagiert werden kann. Dieses Ereignis propagiert nicht.
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann. Dieses Ereignis kann nicht abgebrochen werden.
		 </apiDesc></apiParam><apiParam><apiItemName>textFlow</apiItemName><apiOperationClassifier>flashx.textLayout.elements:TextFlow</apiOperationClassifier><apiData>null</apiData><apiDesc>Der ContainerController, dessen Container aktualisiert wurde.
		 </apiDesc></apiParam><apiParam><apiItemName>controller</apiItemName><apiOperationClassifier>flashx.textLayout.container:ContainerController</apiOperationClassifier><apiData>null</apiData><apiDesc>Der aktualisierte TextFlow. 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc> Konstruktor
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:UPDATE_COMPLETE"><apiName>UPDATE_COMPLETE</apiName><shortdesc> 
	     Definiert den Wert der type-Eigenschaft eines UpdateCompleteEvent-Objekts. 
	     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>updateComplete</apiData><apiType value="String"/></apiValueDef><apiDesc> 
	     Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>UpdateCompleteEvent</codeph>-Objekts.  
	     </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:controller:get"><apiName>controller</apiName><shortdesc> 
		 Das Steuerelement des Containers, der aktualisiert wird.
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.container:ContainerController</apiValueClassifier></apiValueDef><apiDesc> 
		 Das Steuerelement des Containers, der aktualisiert wird.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flashx.textLayout.events:UpdateCompleteEvent:textFlow:get"><apiName>textFlow</apiName><shortdesc>
		 TextFlow, der aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flashx.textLayout.elements:TextFlow</apiValueClassifier></apiValueDef><apiDesc>
		 TextFlow, der aktualisiert wurde. 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flashx.textLayout.events:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
	 Eine TextLayoutEvent-Instanz stellt ein Ereignis dar, z. B. ein TextLayoutEvent.SCROLL-Event, das keine benutzerdefinierten Eigenschaften benötigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Eine TextLayoutEvent-Instanz stellt ein Ereignis dar, z. B. ein <codeph>TextLayoutEvent.SCROLL</codeph>-Event, das keine benutzerdefinierten Eigenschaften benötigt. 
	 <p>Ein Bildlaufereignis wird von einer TextLayoutEvent-Instanz dargestellt, wobei deren <codeph>type</codeph>-Eigenschaft auf <codeph>TextLayoutEvent.SCROLL</codeph> gesetzt ist. Eine spezielle Klasse für Bildlaufereignisse ist nicht nötig, da es keine benutzerdefinierten Eigenschaften für Bildlaufereignisse gibt, wie zum Beispiel für andere Ereignisse, die spezielle Ereignisklassen besitzen. Wenn ein neues Textlayout-Ereignis benötigt wird und das Ereignis keine benutzerdefinierten Eigenschaften benötigt, wird das neue Ereignis ebenfalls durch ein TextLayoutEvent-Objekt dargestellt, aber die <codeph>type</codeph>-Eigenschaft wird auf eine neue statische Konstante eingestellt.
	 </p>
	 
	 </apiDesc><example conref="examples\TextLayoutEvent_example.as"/></apiClassifierDetail><apiConstructor id="flashx.textLayout.events:TextLayoutEvent:TextLayoutEvent"><apiName>TextLayoutEvent</apiName><shortdesc>
		  Die TextLayoutEvent-Klasse stellt das Ereignisobjekt dar, das für viele TextLayout-Ereignisse an den Ereignis-Listener übergeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
		  Die TextLayoutEvent-Klasse stellt das Ereignisobjekt dar, das für viele TextLayout-Ereignisse an den Ereignis-Listener übergeben wird.
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flashx.textLayout.events:TextLayoutEvent:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	      Die TextLayoutEvent.SCROLL-Konstante definiert den Wert der type-Eigenschaft des Ereignisobjekts für ein scroll-Ereignis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
	      Die <codeph>ScrollEvent.SCROLL</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft des Ereignisobjekts für ein <codeph>scroll</codeph>-Ereignis.
	     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>