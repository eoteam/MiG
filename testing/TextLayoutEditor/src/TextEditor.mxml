<?xml version="1.0" encoding="utf-8"?>
<!--
ADOBE SYSTEMS INCORPORATED
 Copyright 2009 Adobe Systems Incorporated
 All Rights Reserved.

NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the 
terms of the Adobe license agreement accompanying it.  If you have received this file from a 
source other than Adobe, then your use, modification, or distribution of it requires the prior 
written permission of Adobe.
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" applicationComplete="init()" horizontalAlign="left">
<mx:Script>
	<![CDATA[
/**
 * @exampleText The following TextEditor MXML demonstrates how to use Squiggly API to check the block based text.
 * Note that the results from this example may differ based on dictionary file.
 * 
 * The following steps are taken:
 * <ol>
 *  <li>A <code>SpellingDictionary</code> object is created </li>
 *  <li>A <code>SpellChecker</code> object is created </li>
 *  <li>In the mx:application tag, add a function call to <code>init</code> for <code>applicationComplete</code> </li>
 *  <li>Create <code>init</code> function body: in the body, add an event listener for <code>SpellingDictionary</code> object. 
 * Then create a <code>URLRequest</code> object to specify the url of dictionary file. Then call the <code>SpellingDictionary</code> 
 *  object <code>load</load> method to load the dictionary from disk or remote URL.</li>
 *  <li> Finish the <code>handleLoadComplete</code> function to attach the <code>SpellingDictionary</code> object to a <code>SpellChecker</code> object</li>
 *  <li> Use the regular expression to break the block text to word string.
 *  </li>
 *  <li> Add a function to call the <code>CheckWord</code> method of <code>SpellChecker</code> object to verify the correctness of a word. </li>
 *  </li>
 *  <li>
 *  Use the <code>TextRange</code> to mark the mispelled word found by the last step.
 *  </li>
 *  <li>Add related MXML component tag and related property.
 * </li>
 * </ol>
 * 
 * Note: to make this example work properly, please make sure you have the proper dictionary file in the specified folder 
 * and put the Squiggly library(AdobeSpellingEngine.swc) in your libs folder. Please see the reference "How to generate Squiggly dictionary".
 */

		import com.adobe.linguistics.spelling.*;
		import mx.controls.textClasses.TextRange;
		
		private var _newdict:SpellingDictionary = new SpellingDictionary();
		private var sp:SpellChecker= new SpellChecker();
		private function init():void {
			_newdict.addEventListener(Event.COMPLETE, handleLoadComplete);
			var myUrl:URLRequest = new URLRequest("usa.zwl");
			_newdict.load(myUrl);
		}
		private function handleLoadComplete(evt:Event):void
		{
			sp.addDictionary(_newdict);
		}

		private function checkText():void {
			var wordPattern:RegExp =/\b\w+\b/; // match next word...
			var inputValue:String = inputText.text;
			var offset:int, curPos:int;
			for ( ; ; ) {
				var res:Array = inputValue.match( wordPattern); // lookup word by word....
				if ( res == null ) break;
				if ( !sp.checkWord(res[0]) ) {
					offset = inputText.text.length-inputValue.length;
					curPos = inputValue.indexOf(res[0]);
					var currentRange:TextRange = new TextRange(inputText, false, offset+ curPos, offset+ curPos+res[0].length); // mark mispelled word.
					currentRange.color = "red";
				}
				inputValue = inputValue.substr(inputValue.indexOf(res[0])+ res[0].length);
			}
		}
		
	]]>
</mx:Script>
	<mx:HBox>
		<mx:Button id="check" label="Check Text" click="checkText()"  />
	</mx:HBox>
	<mx:TextArea id="inputText" height="100%" width="100%"/>	
</mx:Application>
