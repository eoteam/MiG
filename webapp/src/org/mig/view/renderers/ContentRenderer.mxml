<?xml version="1.0" encoding="utf-8"?>
<treeClasses:TreeItemRenderer 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:treeClasses="mx.controls.treeClasses.*"
	creationComplete="handleCreationComplete(event)"
	mouseOver="handleMouseOver(event)"
	mouseDown="handleMouseOver(event)">
	<mx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.easing.Expo;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.Canvas;
			import mx.core.UITextField;
			import mx.events.FlexEvent;
			
			import org.mig.model.vo.ContentNode;
			import org.mig.model.vo.content.ContainerNode;
			import org.mig.model.vo.content.ContentData;
			import org.mig.model.vo.content.ContentStatus;
			
			private var bg:Canvas;
			private var overBg:Canvas;
			
			private var selected:Boolean = false;
			private var _isCreated:Boolean = false;
			[Bindable] private var _overAlpha:Number = 1;
			
			private function handleCreationComplete(event:FlexEvent):void {
				bg = new Canvas();
				bg.styleName = "treeContainerItem";
				BindingUtils.bindProperty(bg, "width", this, "width");
				BindingUtils.bindProperty(bg, "height", this, "height");
				//BindingUtils.bindProperty(bg, "alpha", this, this._overAlpha);
				bg.name = "bg";
				addChildAt(bg, 0);
				
				overBg = new Canvas();
				overBg.alpha = 0;
				overBg.styleName = "treeOverItem";
				BindingUtils.bindProperty(overBg, "width", this, "width");
				BindingUtils.bindProperty(overBg, "height", this, "height");
				overBg.name = "overBg";
				addChildAt(overBg, 1)
				if(data) {
					if(data.children.length == 0 && this.disclosureIcon != null)
						this.disclosureIcon.visible = false;
					this.toolTip = this.data.label;
				}
				_isCreated = true;
				this.label.truncateToFit('...');
				
			}

			private function handleMouseOver(event:MouseEvent):void  {	
				TweenMax.to(overBg,1, {alpha:_overAlpha,  ease:Expo.easeOut});
				TweenMax.to(this.getChildAt(3),1, {tint:null,  ease:Expo.easeOut});      		
				addEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
			}
			private function handleMouseOut(event:MouseEvent):void  {
				if(!selected) {
					TweenMax.to(overBg, 1,{alpha:0,  ease:Expo.easeOut});
					TweenMax.to(this.getChildAt(3),1, {tint:null,  ease:Expo.easeOut});
					removeEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
				}
			}
			private function selectedColorOff():void {
				selected = false;
				TweenMax.to(overBg,1, {alpha:0,ease:Expo.easeOut});
				TweenMax.to(this.getChildAt(3),1, {tint:null,  ease:Expo.easeOut});
				addEventListener(MouseEvent.ROLL_OVER, handleMouseOver);
			}
			private function setColorHalfOn():void {
				TweenMax.to(overBg,1, {alpha:0.5,  ease:Expo.easeOut});
				TweenMax.to(this.getChildAt(3),1, {tint:0xBD1E53,  ease:Expo.easeOut});
				removeEventListener(MouseEvent.ROLL_OVER, handleMouseOver);
				removeEventListener(MouseEvent.ROLL_OUT, handleMouseOut);
			}		
			private function setColorHalfOff():void {
				TweenMax.to(overBg,1, {alpha:0, ease:Expo.easeOut});
				TweenMax.to(this.getChildAt(3),1, {tint:null,  ease:Expo.easeOut});
				addEventListener(MouseEvent.ROLL_OVER, handleMouseOver);
			}				
			private function selectedColorOn():void {
				removeEventListener(MouseEvent.ROLL_OVER, handleMouseOver);
				selected = true;
				TweenMax.to(overBg,1, {alpha:_overAlpha, ease:Expo.easeOut});
				TweenMax.to(this.getChildAt(3),1, {tint:0xFFFFFF,  ease:Expo.easeOut});
			}
			private function toggle(state:Boolean):void {
				var bgAlpha:int = state ? 1:0;
				bg.visible = state;
				overBg.visible = state;
			}
			override public function set data(value:Object):void
			{
				super.data = value;
				if (super.listData && label != null)
				{
					super.label.gridFitType = "pixel";
					super.label.antiAliasType = "advanced";  
					this.label.truncateToFit('...');
				}
				checkData();
			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				checkData();
			}
			private function checkData():void {
				if(data!= null)
				{
					this.toolTip = ContainerNode(data).label;
					if(ContainerNode(data).data != null)
					{
						if(ContentData(ContainerNode(data).data).statusid == ContentStatus.DRAFT)
						{
							if(bg)bg.alpha = 0.65;
							_overAlpha = 0.65;
						}
						else
						{
							if(bg)bg.alpha = 1;
							_overAlpha = 1;					
						}     
					}
					if(ContainerNode(data).children.length == 0 && this.disclosureIcon != null)
						this.disclosureIcon.visible = false;
					
					if(_isCreated==true)
					{
						this.label.truncateToFit('...');
						if(!ContainerNode(data).isRoot)
						{
							this.getChildAt(4).visible = false;
							this.getChildAt(2).x = this.getChildAt(2).x-22;
						}
					}         
				}
			}
		]]>
	</mx:Script>
</treeClasses:TreeItemRenderer>
