<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark"  
					  xmlns:controls="org.mig.view.controls.*"
					  autoDrawBackground="false"  contentBackgroundAlpha="1"
					  dataChange="update()" creationComplete="created=true;update()"
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  width="100%" height="24">
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			
			import org.mig.model.vo.ContentNode;
			import org.mig.model.vo.media.DirectoryNode;
			import org.mig.utils.GlobalUtils;
			import org.mig.view.events.ContentViewEvent;
			
			public var columns:Array;
			private var created:Boolean = false;
			[Bindable] private var colorVisible:Boolean;
			[Bindable] private var bgColor:uint;
			
			override public function set data(value:Object):void {
				super.data = value;
				if(data) {
					if(data.data.color  != null) {
						colorVisible = true;
						bgColor = Number('0x'+String(data.data.color).substr(1,data.data.color.length));	
					}
					else {
						colorVisible = false;
					}
				}
				if(data && data.state == ContentNode.LOADING) {
					if (selected && hasState("selected"))
						currentState = "selectedAndLoading";	
					else if (hovered && hasState("hovered"))
						currentState = "hoveredAndLoading";
					else
						currentState =  "normalAndLoading";
				}
			}
			override protected  function getCurrentRendererState():String {
				if(data && data.state == ContentNode.LOADING) {
					if (selected && hasState("selected"))
						return "selectedAndLoading";
					
					if (hovered && hasState("hovered"))
						return "hoveredAndLoading";
					
					if (hasState("normal"))    
						return "normalAndLoading";
					
					// If none of the above states are defined in the item renderer,
					// we return the empty string. This means the user-defined renderer
					// will display but essentially be non-interactive visually. 
					return null;
				}
				else 
					return super.getCurrentRendererState();
			}
			private function update():void
			{
				if(created) {
					var i:int;
					var element:IVisualElement;
					var n:int = columns.length;
	
					holder.width = columns[0].width - 4;
					for (i = 1; i < n; i++)
					{
						element = holder2.getElementAt(i-1);
						element.width = columns[i].width - 4;
						//element[columns[i].valueProperty] = data[columns[i].dataField];
					} 
				}
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal" stateGroups="normalStates" />            
		<s:State name="hovered" stateGroups="hoveredStates" />
		<s:State name="selected" stateGroups="selectedStates" />
		<s:State name="normalAndLoading"  stateGroups="normalStates,loadingStates"/>
		<s:State name="hoveredAndLoading"  stateGroups="hoveredStates,loadingStates"/>
		<s:State name="selectedAndLoading"  stateGroups="selectedStates,loadingStates"/>
	</s:states>

	<s:Rect top="0" bottom="0" right="0" left="0" visible="{colorVisible}">
		<s:fill>
			<s:SolidColor color="{bgColor}" />
		</s:fill>
	</s:Rect>
	<s:HGroup top="0" bottom="0" right="0" left="0" verticalAlign="middle">
		<s:HGroup  top="0" bottom="0" minWidth="150" width="350" verticalAlign="middle" id="holder">
			
			<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
				<s:fill>
					<s:SolidColor color="0xFFFFFF" />
				</s:fill>
			</s:Rect>
			
			<s:Group id="disclosureGroup">
				<s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
			</s:Group>
			
			<s:BitmapImage id="iconImage" source="{data is DirectoryNode?treeListData.icon:null}" 
		    includeInLayout="{data is DirectoryNode?true:false}"  
		    visible="{data is DirectoryNode?true:false}" />
			
			<s:Label id="labelField"  text="{data.label}" paddingTop="2" styleName="boldCopy"  />
			<controls:Spinner includeIn="loadingStates"  id="spinner" 
			visible="{data.state == ContentNode.LOADING}"  tickColor="0xffffff" size="20" tickWidth="2" numTicks="10" autoPlay="true" 
			show="spinner.play()" hide="spinner.stop()"/>	
		</s:HGroup>		
		
		<s:HGroup top="0" bottom="0" verticalAlign="middle" id="holder2">
			<s:Label width="80" text="{GlobalUtils.tranlateSize(data.data.size)}" textAlign="center" styleName="boldCopy" color="0x666666"  />
			<s:Label width="80" text="{GlobalUtils.translateDate(data.data.createdate)}" styleName="boldCopy" color="0x666666" textAlign="center"/>
			<s:Label text="{data.data.createdby}" styleName="boldCopy" color="0x666666" textAlign="center" />
			<controls:Rating editable="true" id="ratingComponent" value="{data.data.rating}"
			mouseDown="this.owner.dispatchEvent(new ContentViewEvent(ContentViewEvent.MEDIA_RATING_SELECTED))"
			change="this.owner.dispatchEvent(new ContentViewEvent(ContentViewEvent.MEDIA_RATING_DESELECTED,data,ratingComponent.value))"/>
		</s:HGroup>
		
	</s:HGroup>
</s:MXTreeItemRenderer>
