<?xml version="1.0" encoding="utf-8"?>
<s:HGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	implements="org.mig.view.interfaces.ICustomFieldView"
	xmlns:containers="org.mig.view.containers.*"
	width="90%"  contentBackgroundAlpha="1"
	creationComplete="init()" >
	
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import org.mig.model.vo.ValueObject;
			import org.mig.model.vo.app.CustomField;
			import org.mig.model.vo.content.ContainerData;
			import org.mig.utils.GlobalUtils;
			import org.mig.view.interfaces.ICustomFieldView;
			
				
			private var _vo:ContainerData;
			private var _customfield:CustomField;
			[Bindable] public var headerLabel:String;
			[Bindable] public var summaryText:String;
				
			public function set vo(value:ValueObject):void {
				_vo = value as ContainerData
			}
			
			public function get vo():ValueObject {
				return _vo;
			}
			
			public function set customfield(value:CustomField):void {
				_customfield = value;
			}
			
			public function get customfield():CustomField {
				return _customfield;
			}
			
			public var modified:Boolean = false;
			
			private var child:UIComponent;	
			//[Bindable] public var maxH:Number = 30;
						
			private function init():void
			{	
				headerLabel = 	customfield.displayname;	
				var tmp:Array = GlobalUtils.createCustomField(this);
				this.summaryText = tmp[1];
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dateFormatter"  formatString="MM/DD/YY"/>	
	</fx:Declarations>
	<s:Label width="150" styleName="boldCopy" text="{headerLabel}" />
</s:HGroup>
<!-- 
Link Button
private function handleLinkButton(event:Event):void
{
mouseXInit = FlexGlobals.topLevelApplication.mouseX-linkButton.mouseX+linkButton.width/2;
mouseYInit = FlexGlobals.topLevelApplication.mouseY-linkButton.mouseY+linkButton.height/2;					
FlexGlobals.topLevelApplication.linkingMode = true;
FlexGlobals.topLevelApplication.showDrawingLayer();
FlexGlobals.topLevelApplication.stage.addEventListener(MouseEvent.MOUSE_MOVE,handleMouseMove);
FlexGlobals.topLevelApplication.stage.addEventListener(MouseEvent.MOUSE_UP,removeLine);		
}
private function handleMouseMove(event:MouseEvent):void
{
var drawingLayer:UIComponent = FlexGlobals.topLevelApplication.drawingLayer;
drawingLayer.graphics.clear(); 
drawingLayer.graphics.lineStyle(3, 0xFCEE21, 1); 
drawingLayer.graphics.moveTo(mouseXInit, mouseYInit); 
drawingLayer.graphics.lineTo(drawingLayer.mouseX, drawingLayer.mouseY);
drawingLayer.graphics.endFill();  
}
private function removeLine(event:Event):void
{
FlexGlobals.topLevelApplication.linkingMode = false; 
var currPoint:Point = new Point(FlexGlobals.topLevelApplication.mouseX,FlexGlobals.topLevelApplication.mouseY);
var mediaObjects:Array = FlexGlobals.topLevelApplication.mainView.rightMain.getObjectsUnderPoint(currPoint);
var treeObjects:Array = FlexGlobals.topLevelApplication.mainView.contentTree.getObjectsUnderPoint(currPoint);

if(treeObjects.length > 0)
{
var node:ContainerNode = FlexGlobals.topLevelApplication.mainView.contentTree.selectedItem;
TextInput(this.child).text = "event:content="+node.data.id.toString();
TextInput(this.child).setFocus();
TextInput(this.child).dispatchEvent(new Event(Event.CHANGE));					
}
else if(mediaObjects.length > 0)
{

if(FlexGlobals.topLevelApplication.mainView.editorsView.linkedResource != null)
{
/* 						var file:MediaContainerNode = FlexGlobals.topLevelApplication.mainView.editorsView.linkedResource;
var mediaPath:String = appModel.mediaURL+file.data.path.toString()+file.data.name.toString();					
var baseLink:String = appModel.publishedURL;	
MiGTextInput(this.child).text = baseLink+mediaPath;
MiGTextInput(this.child).setFocus();
MiGTextInput(this.child).dispatchEvent(new Event(Event.CHANGE));	 */
}
}
FlexGlobals.topLevelApplication.stage.removeEventListener(MouseEvent.MOUSE_MOVE,handleMouseMove);
FlexGlobals.topLevelApplication.stage.removeEventListener(MouseEvent.MOUSE_UP,removeLine);
FlexGlobals.topLevelApplication.hideDrawingLayer();
}		-->