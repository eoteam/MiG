<?xml version="1.0" encoding="utf-8"?>
<containers:MinMaxTray
	xmlns:mx="http://www.adobe.com/2006/mxml"
	 width="90%" maxHeight="{maxH}"
	 creationComplete="init()" xmlns:containers="org.mig.view.containers.*">
	
	
	<mx:Script>
		<![CDATA[
			import flexlib.containers.FlowContainer;
			
			import mx.controls.Button;
			import mx.controls.CheckBox;
			import mx.controls.ColorPicker;
			import mx.controls.ComboBase;
			import mx.controls.ComboBox;
			import mx.controls.DateChooser;
			import mx.controls.DateField;
			import mx.controls.List;
			import mx.controls.TextArea;
			import mx.core.Application;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			
			import org.mig.model.AppModel;
			import org.mig.model.vo.ContentNode;
			import org.mig.model.vo.CustomField;
			import org.mig.model.vo.CustomFieldTypes;
			import org.mig.model.vo.content.ContainerNode;
			import org.mig.model.vo.content.ContentData;
			import org.mig.model.vo.content.TemplateCustomField;
			import org.mig.model.vo.media.FileNode;
			import org.mig.view.controls.DateTimePicker;
			import org.mig.view.controls.MiGDateField;
			import org.mig.view.controls.MiGTLFTextArea;
			import org.mig.view.controls.MiGTextInput;
			import org.mig.view.controls.colorPicker;
			
			public var field:TemplateCustomField;
			public var vo:ContentData;
			private var customfield:CustomField;
			
			public var modified:Boolean = false;
			private var mouseXInit:Number;
			private var mouseYInit:Number;	
			private var linkButton:Button;		
			private var child:UIComponent;	
			[Bindable] private var maxH:Number = 30;
			
			[Inject]
			public var appModel:AppModel;
			
			private function init():void
			{
				customfield = field.customfield;
				this.headerLabel = 	customfield.displayname;			
				var option:Object;
				switch(customfield.typeid)
				{
					case CustomFieldTypes.BINARY:
						child = new CheckBox();
						CheckBox(child).selected = vo[customfield.name] == "true"?true:false;
						this.summaryText = vo[customfield.name].toString();
					break;
					case CustomFieldTypes.SELECT:
						child = new ComboBox();
						ComboBox(child).labelField = "value";
						ComboBox(child).dataProvider = customfield.optionsArray;
						for each(option in customfield.optionsArray)
						{
							if(option.index.toString() == vo[customfield.name])
							{
								ComboBox(child).selectedItem = option;
									this.summaryText = option.value;
								break;
							}
						}
					break;
					case CustomFieldTypes.STRING:
						child = new MiGTextInput();
						child.styleName = "inputFieldBlack";
						child.percentWidth = 100;
						MiGTextInput(child).text = vo[customfield.name].toString(); 
						this.summaryText = vo[customfield.name].toString().slice(0,150)+'...';
					break;
					case CustomFieldTypes.HTML_TEXT:
						child = new MiGTLFTextArea();
						MiGTLFTextArea(child).htmlText = vo[customfield.name];
						//child.styleName="sectionTextEditorTextArea";	
						child.percentWidth =100;
						maxH = child.height = 350;
						this.addEventListener('open',handleTray);
						this.addEventListener('closed',handleTray);		
						this.summaryText = vo[customfield.name].toString().slice(0,150)+'...';
					break;
					case CustomFieldTypes.TEXT:
						child = new TextArea();
						TextArea(child).text = vo[customfield.name];
						child.percentWidth =100;
						maxH = child.height = 200;
						child.styleName = "bodyCopy";
						child.setStyle("backgroundColor",0x0f0f0f);	
						this.summaryText = vo[customfield.name].toString().slice(0,150)+'...';
					break;					
					case CustomFieldTypes.COLOR:
						child = new org.mig.view.controls.colorPicker();
						child.addEventListener("dataChange",dataChangeProxy);	
						//colorPicker(child).dataProvider=Application.application.globalColors; 
						colorPicker(child).selectedColor= Number(vo[customfield.name]);		
						this.summaryText = Number(vo[customfield.name]).toString(16);		
					break;
					case CustomFieldTypes.MULTIPLE_SELECT:
						child = new FlowContainer();
						child.percentHeight=100;
						child.percentWidth=100;
						this.summaryText = vo[customfield.name].toString();
						for each(option in customfield.optionsArray)
						{
							var checkBox:CheckBox = new CheckBox();
							checkBox.label = option.value;
							checkBox.data = option;
							checkBox.addEventListener(Event.CHANGE,handleMultipleSelect);
							child.addChild(checkBox);
							if(vo[customfield.name].toString().search(option.value) != -1)
								checkBox.selected = true;
						}
					break;
					case CustomFieldTypes.INTEGER:
						child = new MiGTextInput();
						child.styleName = "inputFieldBlack";
						child.percentWidth = 100;
						MiGTextInput(child).restrict="0-9\\-";
						MiGTextInput(child).text = vo[customfield.name];
						this.summaryText = vo[customfield.name].toString().slice(0,150)+'...';								
					break;				
					case CustomFieldTypes.DATE:
						child = new DateTimePicker();
						if(vo[customfield.name].toString() != '0')
						{
							var date:Date = new Date();
							date.time = Number(vo[customfield.name].toString());
							DateTimePicker(child).selectedDate = date;
							this.summaryText =  dateFormatter.format(date);	
						}
						else
							DateTimePicker(child).selectedDate = null;
						
					break;
					case CustomFieldTypes.FILE_LINK:
						child = new MiGTextInput();
						child.styleName = "inputFieldBlack";
						child.percentWidth = 100;			
						MiGTextInput(child).text = vo[customfield.name];						
						this.summaryText = vo[customfield.name].toString().slice(0,150)+'...';
					break;	
					case CustomFieldTypes.MULTIPLE_SELECT_WITH_ORDER:
						var dp:Array = [];
						var summary:String = '';
						if(vo[customfield.name].toString() != '')
						{
							var selected:Array = vo[customfield.name].toString().split(',');
							for each(var index:String in selected)
							{
								var item:Object = customfield.optionsArray[Number(index)-1];
								item.selected = true;
								dp.push(item);
								summary += item.value+', ';
							}
						}
						summary = summary.substring(0,summary.length-2);
						this.summaryText = summary;
						for each(item in customfield.optionsArray)
						{
							if(dp.indexOf(item) == -1)
							{
								dp.push(item);
								item.selected = false;
							}
						}
						child = new List();
						child.percentHeight = 100;
						child.width = 300;
						List(child).styleName = 'customFieldsList';
						List(child).dataProvider = dp;
						List(child).labelField = "value";
						List(child).allowDragSelection = true;
						List(child).dragMoveEnabled = true;
						List(child).dragEnabled = true;
						List(child).dropEnabled = true;	
						var optionRenderer:ClassFactory = new ClassFactory(CFListCheckBox);						
						List(child).itemRenderer = optionRenderer;
						List(child).addEventListener(ListEvent.ITEM_CLICK,handleItemClick);
						List(child).addEventListener(DragEvent.DRAG_COMPLETE,handleItemClick);
						maxH = 200;
									
					break;							
				}
				container.addChild(child);
				child.addEventListener(Event.CHANGE,dataChangeProxy);		
				if(customfield.typeid == CustomFieldTypes.FILE_LINK)
				{
					linkButton = new Button();
					linkButton.styleName = "linkButtonUp";
					linkButton.toolTip = "Drag to a container to link";
					linkButton.addEventListener(MouseEvent.MOUSE_DOWN,handleLinkButton);
					linkButton.setStyle("right",2);
					linkButton.setStyle("top",0);
					container.addChild(linkButton);		
				}				
						
			}
			private function handleLinkButton(event:Event):void
			{
				mouseXInit = Application.application.mouseX-linkButton.mouseX+linkButton.width/2;
				mouseYInit = Application.application.mouseY-linkButton.mouseY+linkButton.height/2;					
				Application.application.linkingMode = true;
				Application.application.showDrawingLayer();
				Application.application.stage.addEventListener(MouseEvent.MOUSE_MOVE,handleMouseMove);
				Application.application.stage.addEventListener(MouseEvent.MOUSE_UP,removeLine);			
			}
			private function handleMouseMove(event:MouseEvent):void
			{
				var drawingLayer:UIComponent = Application.application.drawingLayer;
		 		drawingLayer.graphics.clear(); 
				drawingLayer.graphics.lineStyle(3, 0xFCEE21, 1); 
				drawingLayer.graphics.moveTo(mouseXInit, mouseYInit); 
				drawingLayer.graphics.lineTo(drawingLayer.mouseX, drawingLayer.mouseY);
				drawingLayer.graphics.endFill();  
			}
			private function removeLine(event:Event):void
			{
				Application.application.linkingMode = false; 
				var currPoint:Point = new Point(Application.application.mouseX,Application.application.mouseY);
				var mediaObjects:Array = Application.application.mainView.rightMain.getObjectsUnderPoint(currPoint);
				var treeObjects:Array = Application.application.mainView.contentTree.getObjectsUnderPoint(currPoint);
				
				if(treeObjects.length > 0)
				{
					var node:ContainerNode = Application.application.mainView.contentTree.selectedItem;
					MiGTextInput(this.child).text = "event:content="+node.data.id.toString();
					MiGTextInput(this.child).setFocus();
					MiGTextInput(this.child).dispatchEvent(new Event(Event.CHANGE));					
				}
				else if(mediaObjects.length > 0)
				{
					
					if(Application.application.mainView.editorsView.linkedResource != null)
					{
/* 						var file:MediaContainerNode = Application.application.mainView.editorsView.linkedResource;
						var mediaPath:String = appModel.mediaURL+file.data.path.toString()+file.data.name.toString();					
						var baseLink:String = appModel.publishedURL;	
						MiGTextInput(this.child).text = baseLink+mediaPath;
						MiGTextInput(this.child).setFocus();
						MiGTextInput(this.child).dispatchEvent(new Event(Event.CHANGE));	 */
					}
				}
				Application.application.stage.removeEventListener(MouseEvent.MOUSE_MOVE,handleMouseMove);
				Application.application.stage.removeEventListener(MouseEvent.MOUSE_UP,removeLine);
				Application.application.hideDrawingLayer();
			}						
			private function handleMultipleSelect(event:Event):void
			{
				var value:String = '';
				for each(var checkBox:CheckBox in FlowContainer(event.target.parent).getChildren())
				{
					if(checkBox.selected)
						value += checkBox.data.value+',';
				}
				vo[customfield.name] = value.substr(0,value.length-1);
				modified = true;
			}
			private function handleItemClick(event:Event):void
			{
				var summary:String = '';
				var ordereredItems:String = '';
				for each(var item:Object in List(child).dataProvider)
				{
					if(item.selected)
					{	
						ordereredItems += item.index + ',';
						summary += item.value+', ';
					}
				}	
				ordereredItems = ordereredItems.substr(0,ordereredItems.length-1);
				vo[customfield.name] = ordereredItems;
				summary = summary.substring(0,summary.length-2);
				this.summaryText = summary;				
				modified = true;
			}
			private function dataChangeProxy(event:Event):void
			{
				modified = true;
				switch(customfield.typeid)
				{
					case "binary":
						vo[customfield.name] = CheckBox(event.target).selected;
					break;
					case "select":
						vo[customfield.name] = ComboBox(event.target).selectedItem.index;
					break;
					case "string":
						vo[customfield.name] = MiGTextInput(event.target).text;
					break;
					case "html-text":
						vo[customfield.name] = MiGTLFTextArea(event.target).htmlText;
					break;
					case "text":
						vo[customfield.name] = TextArea(event.target).text;
					break;					
					case "image":
					break;
					case "color":
						vo[customfield.name] =  colorPicker(event.target).selectedColor.toString(16);
					break;
					case "integer":
						vo[customfield.name] = MiGTextInput(event.target).text;
					break;		
					case "date":
						if(DateTimePicker(event.target).selectedDate)
							vo[customfield.name] = DateTimePicker(event.target).selectedDate.time;			
						else
							vo[customfield.name] = ' ';
					case "multiple-select":
					break;	
					case "file-link":
					 	vo[customfield.name] = MiGTextInput(event.target).text;
					break;	
					case "multiple-select-with-order":					
					break;						
				}				
			}
			
			private function handleTray(event:Event):void
			{
				/* var tools:Tools = Tools(Application.application.mainView.editorsView);
				if(event.type == "open")
					tools.instantiateToolSet(["Browse","Preview","Metadata","Upload","Text"]);	
				else
					tools.instantiateToolSet(["Browse","Preview","Metadata","Upload"]);	 */
			}
			
		]]>
	</mx:Script>
	<mx:DateFormatter id="dateFormatter"  formatString="MM/DD/YY"/>
</containers:MinMaxTray>
