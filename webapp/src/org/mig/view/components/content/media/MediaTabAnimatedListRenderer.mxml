<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	doubleClickEnabled="false" contentBackgroundAlpha="1" 
	backgroundAlpha="1" backgroundColor="0x111111"
	implements="org.mig.view.interfaces.IContentListRenderer"	
	horizontalGap="0"  creationComplete="handleCreationComplete()"	
	paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
	click="dispatchSelectedEvent()">
	<mx:Script>
		<![CDATA[
			import org.mig.view.interfaces.IContentView;
			import flash.events.Event;
			
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			
			import org.mig.model.vo.ContentNode;
			import org.mig.model.vo.content.ContainerNode;
			import org.mig.model.vo.content.ContentData;
			import org.mig.model.vo.media.MimeTypes;
			import org.mig.model.vo.relational.ContentMedia;
			
			
			public var thumbURL:String;
			
			[Bindable] private var _data:ContentMedia;
			[Bindable] private var imageSource:String;
			[Bindable] private var _scalePercent:Number;
			
			
			private var _added:Boolean = false;
			private var _selected:Boolean = false;	
			private var edited:Boolean = false;
			private var bgColorSelected:uint;
			private var bgColorUnselected:uint;
			[Bindable] private var docIcon:Object;
			
			public var info:EditFileResourceView;
			
			[Embed(source='/migAssets/library.swf#youtubeIcon')]
			private var youtubeIcon:Class;	
			
			public function set url(value:String):void {
				thumbURL = value;
			}
			public function get selectionColor():uint
			{
				return bgColorSelected;
			}
			public function set scalePercent(newVal:Number):void
			{
				_scalePercent = newVal;
			}
			[Bindable]
			public function get scalePercent():Number
			{
				return _scalePercent;	
			}
			public var isImage:Boolean;
			/*public function get fileExtension():String{
			return imageSource;
			}*/
			override public function set data(value:Object):void {
				super.data = value;
				if(value) {
					_data = value as ContentMedia;
					this.added = _data.added;
					if(_data.mimetypeid == MimeTypes.IMAGE) {
						imageSource = thumbURL+_data.path.toString()+_data.name.toString();
						isImage = true;
					}
					else if(_data.mimetypeid == MimeTypes.VIDEO && _data.thumb) {
						imageSource =thumbURL+_data.path.toString()+_data.thumb.toString();
						isImage = true;		
					}
					else {
						if(_data.mimetypeid == MimeTypes.YOUTUBE) {
							docIcon = youtubeIcon;
							imageSource = '';
						}
						else
							docIcon="migAssets/images/docIcon.png";
						isImage = false;	
					}	
					if(imageHolder != null)
						imageHolder.source = imageSource;
					if(imageName != null)
						imageName.text = _data.name.toString();
				}
			}
			private function handleCreationComplete():void
			{
				if(isImage == true) {
					dragCanvas.visible = false;
					imageHolder.visible = true;
				}
				else {
					imageHolder.visible = false;
					dragCanvas.visible = true;
				}
			}
			public function set selected(value:Boolean):void {
				_selected = value;
				if(!value)
				{
					this.setStyle("backgroundColor", bgColorUnselected);
					if(info)
					{
						PopUpManager.removePopUp(info);
						info = null;
					}
				}
				else
				{	
					this.setStyle("backgroundColor", bgColorSelected);
				}	
			}
			public function get selected():Boolean
			{
				return _selected;
			}
			public function set added(value:Boolean):void
			{
				_added = value;
				if(!_added)
				{
					bgColorUnselected = 0x444444;
					bgColorSelected = 0xF491A9;
					this.setStyle("backgroundColor", bgColorUnselected);
				}
				else
				{
					bgColorUnselected = 0x111111;
					bgColorSelected = 0xED1C58;		
					this.setStyle("backgroundColor", bgColorUnselected);
					
				}
			}
			public function get added():Boolean
			{
				return _added;
			}
			public function dispatchInfoOpenedEvent():void
			{
				info = new EditFileResourceView();
				info.bgColor = bgColorSelected;
				//info.content = _content;
				info.file = this;
				info.x = FlexGlobals.topLevelApplication.mouseX-this.mouseX; 
				info.y = FlexGlobals.topLevelApplication.mouseY-this.mouseY+this.height;	
				PopUpManager.addPopUp(info,this,false,PopUpManagerChildList.POPUP);
			}
			public function dispatchSelectedEvent():void
			{
				this.dispatchEvent(new Event('selected'));
			}
			public function get viewname():String
			{
				return "FileResourceView";
			}	
		]]>
	</mx:Script>

	
	<mx:Canvas id="dragHolder" height="150"  width="150" scaleX="{_scalePercent}" scaleY="{_scalePercent}" verticalScrollPolicy="off" horizontalScrollPolicy="off" >
		<mx:Image doubleClickEnabled="false"  source="{imageSource}"  id="imageHolder"  scaleContent="false" width="100%" height="100%" />
		<mx:Canvas  visible="false" id="dragCanvas"  width="100%" height="100%">
			<mx:Image horizontalCenter="0" verticalCenter="0" width="100%" height="100%" id="fileImage"  source="{docIcon}" brokenImageSkin="@Embed(source='/migAssets/library.swf#noImageIcon')" />
			<mx:Label mouseEnabled="false"  width="{150*325/400}" styleName="boldCopy" color="0xffffff" text="{_data.extension}" textAlign="left" fontSize="40"  verticalCenter="0" />
		</mx:Canvas>		
	</mx:Canvas>	
	<mx:HBox id="imageTitle" horizontalScrollPolicy="off">
		<mx:Label width="{_scalePercent*102}"  buttonMode="true" mouseChildren="false" useHandCursor="true" 
			click="dispatchInfoOpenedEvent()" truncateToFit="true" styleName="bodyCopy" id="imageName"
			toolTip="{String(_data.name.toString())}" text="{String(_data.name.toString())}"  />
		<mx:SWFLoader  click="dispatchInfoOpenedEvent()" source="@Embed(source='/migAssets/flex_skins.swf#Tree_folderOpenIcon')" width="20"  />
	</mx:HBox>
	<mx:Binding source="imageHolder.contentWidth" destination="imageTitle.width" />
</mx:VBox>
	