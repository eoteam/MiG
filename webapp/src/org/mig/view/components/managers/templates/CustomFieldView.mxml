<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 contentBackgroundAlpha="1" contentBackgroundColor="0x00000"
		 implements="org.mig.view.interfaces.ICustomFieldView" autoDrawBackground="false"  focusEnabled="true"
		 xmlns:app="org.mig.model.vo.app.*" creationComplete="creationCompleteHandler(event)" 
		 xmlns:templates="org.mig.view.components.managers.templates.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.mig.collections.DataCollection;
			import org.mig.model.vo.ValueObject;
			import org.mig.model.vo.app.CustomField;
			import org.mig.model.vo.app.CustomFieldOption;
			import org.mig.model.vo.app.CustomFieldTypes;
			import org.mig.utils.GlobalUtils;
			import org.mig.view.events.ContentViewEvent;
			
			import spark.events.IndexChangeEvent;

			[Bindable] private var _customfield:CustomField;
			[Bindable] private var _defaultValueField:CustomField;
			[Bindable] private var typeSelectedIndex:int = -1;
			//private var element:UIComponent;
			
			private function creationCompleteHandler(event:FlexEvent):void {
				generateCustomField();
				optionsList.addEventListener("addCustomFieldOption",handleAddCustomField);
				optionsList.addEventListener("removeCustomFieldOption",handleRemoveCustomField);
				optionsList.addEventListener("changeCustomFieldOption",updateOptions);
			}	
			private function updateOptions(event:Event=null):void {
				for each(var option:CustomFieldOption in _customfield.optionsArray.source) {
					option.index = _customfield.optionsArray.getItemIndex(option)+1;
				}
				_customfield.updateData.options = _customfield.options;				
				optionsList.invalidateDisplayList();
				List(cfHolder.getElementAt(0)).invalidateDisplayList();
			}
			private function handleAddCustomField(event:Event):void {
				event.target.enableAddButton=false;
				var item:CustomFieldOption = new CustomFieldOption();
				_customfield.optionsArray.addItem(item);
				item.index =  _customfield.optionsArray.length;
				item.value = 'new';
				item.customfield = _defaultValueField;
				item.vo = _customfield;
				var lastOption:CustomFieldOptionRenderer = optionsList.dataGroup.getElementAt(0) as CustomFieldOptionRenderer;
				lastOption.enableRemoveButton = true;	
				updateOptions();
			}
			private function handleRemoveCustomField(event:Event):void {
				_customfield.optionsArray.removeItemAt(_defaultValueField.optionsArray.getItemIndex(event.target.data));
				
				var lastOption:CustomFieldOptionRenderer;
				if(_customfield.optionsArray.length == 1) {
					lastOption =  optionsList.dataGroup.getElementAt(0) as CustomFieldOptionRenderer;
					lastOption.enableAddButton = true;
					lastOption.enableRemoveButton = false;
				}
				else {
					lastOption = optionsList.dataGroup.getElementAt(_customfield.optionsArray.length-1) as CustomFieldOptionRenderer;
					lastOption.enableAddButton = true;
				}
				updateOptions();
			}
			public function set vo(value:ValueObject):void {
				_customfield = value as CustomField;
				if(_customfield) {
					for each(var item:Object in customFieldTypes.source) {
						if(item.typeid == _customfield.typeid) {
							typeSelectedIndex = customFieldTypes.getItemIndex(item);
						}
					}
					
					if(!_defaultValueField) {
						var dv:CustomField = new CustomField();
						dv.typeid = _customfield.typeid;
						dv.name = "defaultvalue";
						dv.optionsArray = _customfield.optionsArray;
						customfield = dv;
						for each(var option:CustomFieldOption in _customfield.optionsArray.source) {
							option.customfield = _defaultValueField;
							option.vo = _customfield;
						}
					}
				}
			}	
			public function get vo():ValueObject {
				return _customfield;
			}
			public function set customfield(value:CustomField):void {
				_defaultValueField = value;		
			}
			public function get customfield():CustomField {
				return _defaultValueField;
			}
			private function comboBoxBlack_changeHandler(event:IndexChangeEvent):void {
				_customfield.typeid = _defaultValueField.typeid = typesList.selectedItem.typeid;
				_customfield.defaultvalue = null;
				cfHolder.removeAllElements();
				generateCustomField();			
			}
			private function generateCustomField():void {
				_defaultValueField.typeid = _customfield.typeid;
				var tmp:Array = GlobalUtils.createCustomField(this);
				var element:UIComponent;
				if(tmp[0] != null) {
					element = tmp[0] as UIComponent;
					//trace(_defaultValueField.typeid , _customfield.typeid, _customfield.displayname,element.className);
					cfHolder.addElement(element);
					var listMode:Boolean = false;
					switch(_customfield.typeid) {
						case  CustomFieldTypes.SELECT:
							listMode = true;
						break;
						case  CustomFieldTypes.MULTIPLE_SELECT:
							listMode = true;
						break;
						case  CustomFieldTypes.MULTIPLE_SELECT_WITH_ORDER:
							listMode = true;	
						break;
						default:
							optionsList.dataProvider = null;
						break;
					}
				}
				if(listMode) {
					optionsList.dataProvider = _customfield.optionsArray;
					if(optionsList.dataProvider.length == 0) {
						var defaultOption:CustomFieldOption = new CustomFieldOption();
						defaultOption.value = "default";
						defaultOption.index = 1;
						defaultOption.customfield = _defaultValueField;
						defaultOption.vo = _customfield;
/* 						optionsList.dataProvider.addItem(defaultOption);
						List(element).dataProvider.addItem(defaultOption); */
						_customfield.optionsArray.addItem(defaultOption);
					}
				}
				//this.invalidateDisplayList();
			}
			private function handleDragButton(event:MouseEvent):void {
				owner.dispatchEvent(new ContentViewEvent(ContentViewEvent.CUSTOMFIELD_DRAG_START));
				blinkEffect.play();
			}
			private function button1_clickHandler(event:MouseEvent):void {
				var dp:IList = List(this.owner).dataProvider;
				dp.removeItemAt(dp.getItemIndex(this.data));
			}
			private function handleNameChange(event:Event):void {
				_customfield.displayname = nameInput.text;
				_customfield.name = GlobalUtils.sanitizeString(nameInput.text);	
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ArrayList id="customFieldTypes" />
		<s:Fade repeatCount="2" duration="150" id="blinkEffect" alphaFrom="0.5" alphaTo="1" target="{this}" />
	</fx:Declarations>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x333333" />
				<s:GradientEntry color="0x333333" />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
   
	<s:HGroup gap="4" verticalAlign="top" id="holder" width="100%" paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4">
		
		<s:TextInput styleName="inputFieldBlack" id="nameInput"  text="{_customfield.displayname}" width="180" change="handleNameChange(event)" />
		<s:Rect width="1" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
		
		<s:DropDownList id="typesList" styleName="comboBoxBlack" labelField="label" width="180" 
		dataProvider="{customFieldTypes}" prompt="Choose..." change="comboBoxBlack_changeHandler(event)" selectedIndex="{typeSelectedIndex}"  />
		<s:Rect width="1" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>

<!--		<s:SkinnableContainer contentBackgroundAlpha="0" backgroundColor="0x666666" width="100%" id="optionsHolder" height="{optionsList.height}"  enabled="false">-->
			<s:List id="optionsList" useVirtualLayout="false" width="100%"  labelField="value" >
				<s:itemRenderer>
					<fx:Component>
						<templates:CustomFieldOptionRenderer />
					</fx:Component>
				</s:itemRenderer>
				<s:layout>
					<s:VerticalLayout gap="2" />
				</s:layout>
			</s:List>
<!--		</s:SkinnableContainer>-->
		
		<s:Rect width="1" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
		
		<s:Group width="100%" id="cfHolder"  />
		
		<s:Rect width="1" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
		

		
<!--		<s:TextArea id="description" updateComplete="description.heightInLines=NaN"  text="{_customfield.description}"  width="100%"/>
		<s:Rect width="1" height="100%">
			<s:fill>
				<s:SolidColor color="0x333333"/>
			</s:fill>
		</s:Rect>
		-->
		<s:Button label="-" click="button1_clickHandler(event)" />
		<s:Rect width="1" height="100%">
			<s:fill>
				<s:SolidColor color="0"/>
			</s:fill>
		</s:Rect>
		<s:Button width="10" height="100%" label="..." mouseDown="handleDragButton(event)"/>
	</s:HGroup>

</s:ItemRenderer>
