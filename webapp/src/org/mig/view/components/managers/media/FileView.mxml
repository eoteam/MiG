<?xml version="1.0" encoding="utf-8"?>
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"  
	xmlns:assets="com.map.assets.*"
	xmlns:content="com.map.view.content.*"
	xmlns:controls="com.thanksmister.controls.*"	
	implements="com.map.view.content.IContentView, 
				com.map.view.mediaManager.IMediaContentView,
				mx.controls.listClasses.IDropInListItemRenderer" 
	creationComplete="handleCreatonComplete()"
	scaleX="{_scalePercent}" scaleY="{_scalePercent}"
	paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5"
	backgroundColor="0x333333" mouseChildren="false"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
<mx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.easing.Cubic;
			import com.map.controller.Constants;
			import com.map.model.ContentNode;
			import com.map.model.MediaCategoryNode;
			import com.map.controller.ControllerLocator;
			import mx.controls.listClasses.BaseListData;			

			private var _listData:BaseListData;
			public function get listData():BaseListData
			{
				return _listData;
			}
			
			// Define the setter method,
			public function set listData(value:BaseListData):void
			{
				_listData = value;
			}	
	        override public function get data():Object
	        {
	            return super.data;
	        }            
	        override public function set data(value:Object):void
	        {
	        	super.data = value;
	        	//if(content != value)
	        	content = value as ContentNode;  	
	        }						
			[Bindable] private var deleteEnable:Boolean = true;
			
			[Embed(source='/migAssets/library.swf#parentFolderIcon')]
			private var parentIcon:Class;
			[Embed(source='/migAssets/library.swf#folderIcon')]
			private var dirIcon:Class;
			[Embed(source='/migAssets/library.swf#youtubeIcon')]
			private var youtubeIcon:Class;			
						
			public function get content():ContentNode
			{
				return _content;
			}
			[Bindable]
			private var _content:ContentNode;
			
			[Bindable]
			private var _directory:String;
			
			public function set directory(newVal:String):void
			{
				_directory = newVal;
			}
			
			[Bindable]
			public function get directory():String
			{111
				return _directory;
			}	
			
			public function set content(contentNode:ContentNode):void
			{
				_content = contentNode;
				if(_content.data)
				{
					this.toolTip = _content.data.name.toString();
					fileSrc = _content.data.name.toString();
				}
				if(created)
					handleDataChange();
			}
			
			private var loadTimer:Timer = new Timer(200);

												
			[Bindable]
			private var _scalePercent:Number = 0.5;
			
			public function set scalePercent(newVal:Number):void
			{
				_scalePercent = newVal;
				//this.transform.matrix = new Matrix(newVal,0,0,newVal,0,0);
			}
			
			[Bindable]
			public function get scalePercent():Number
			{
				return _scalePercent;	
			}
			
			[Bindable]
			private var _fileSrc:String;
			public function get fileSrc():String
			{
				return _fileSrc;
			}
			[Bindable]
				private var _fileExtension:String;
				
			public function set fileSrc(newVal:String):void
			{		
				_fileSrc = newVal;	
				var arr:Array = newVal.split(".");
				_fileExtension = "."+arr[arr.length-1];
			}
			public function get fileExtension():String
			{
				return _fileExtension;
			}			
			[Bindable]
			private var _percentLoaded:Number = 0;
			
			public function set percentLoaded(newVal:Number):void
			{
				_percentLoaded = newVal;
			}
			
			[Bindable]
			public function get percentLoaded():Number
			{
				return _percentLoaded;
			}
			private var created:Boolean = false;
			public function handleCreatonComplete():void
			{
				created = true;
				//this.visible = true;
				//TweenMax.to(this, {alpha:1, time:2, transition:"easeOutExpo"});
				handleDataChange();			
			}
			private function handleDataChange():void
			{
				if(_content is MediaCategoryNode)
				{
					thumbLabel.visible = false;
					if(_content.label == "..")
					{
						thumbHolder.source = parentIcon;
						deleteEnable = false;
					}
					else
						thumbHolder.source = dirIcon;
					this.loader.visible = false;
					//thumbHolder.scaleX = 0.5;
					//thumbHolder.scaleY = 0.5;
					thumbHolder.alpha = 1;
				}	
				else if(_content.data.mimetype.toString() == "images")
				{
					thumbLabel.visible = false;
					thumbHolder.source = ControllerLocator.mediaManagerController.thumbURL+_content.data.path.toString()+_content.data.name.toString();	
				}			
				else if(_content.data.mimetype.toString() == "videos" && _content.data.thumb.toString() != "")
				{
					thumbLabel.visible = false;
					thumbHolder.source = ControllerLocator.mediaManagerController.thumbURL+_content.data.path.toString()+_content.data.thumb.toString();				
				}
				else if(_content.data.mimetype.toString() == "youtube")
				{
					thumbLabel.visible = false;
					thumbHolder.source = youtubeIcon;					
				}	
				else
				{
					thumbLabel.visible = true;
					thumbHolder.source = "migAssets/images/docIcon.png";
				}
			}

			private function handleError(event:*):void
			{
				TweenMax.to(loader, 1, {alpha:0, ease:Cubic.easeOut});
				TweenMax.to(thumbHolder, 1, {alpha:1, ease:Cubic.easeOut});
			}

			
			private function handleImageProgress(event:ProgressEvent):void
			{
				var loaded:Number = thumbHolder.bytesLoaded;
				var total:Number = thumbHolder.bytesTotal;
				percentLoaded = loaded/total;
				loader.width = 250 * percentLoaded;
			}
			
			private function handleImageComplete(event:Event):void
			{
				TweenMax.to(loader, 3, {alpha:0, ease:Cubic.easeOut});
				TweenMax.to(thumbHolder, 1, {alpha:1, ease:Cubic.easeOut});
			}
			private function handleDelete():void
			{
				_content.removeData();
			}
			public function get viewname():String
			{
				return "FileView";
			}
		]]>
	</mx:Script>
	<mx:Canvas width="250" height="250"  id="thumbCanvas" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:Canvas height="100%"  id="loader" backgroundColor="0x727376"/>
		<controls:ImageCache verticalCenter="0" alpha="0" horizontalCenter="0" 
		width="250" height="250" 
		id="thumbHolder" progress="handleImageProgress(event)" complete="handleImageComplete(event)"  
		brokenImageSkin="com.map.assets.NoImageIcon" />
		<mx:Label maxWidth="200" truncateToFit="true" visible="false"  id="thumbLabel" styleName="bodyMedium" 
			color="0xffffff" text="{_fileExtension}" textAlign="center" fontSize="50"  verticalCenter="0"  />
	</mx:Canvas>
		
	<mx:HBox width="100%" id="bottomContainer">
		<mx:Label fontSize="20" maxWidth="200" id="textHolder" 
			selectable="false"  text="{_content.label}" truncateToFit="true"  
			styleName="bodyMedium" color="0xffffff"/>	
	</mx:HBox>
</mx:VBox>