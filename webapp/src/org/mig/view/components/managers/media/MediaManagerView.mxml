<?xml version="1.0" encoding="utf-8"?>
<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:controls="org.mig.view.controls.*" 
	xmlns:renderers="org.mig.view.renderers.*"
	width="100%" height="100%"
	contentBackgroundAlpha="0"  creationComplete="vgroup1_creationCompleteHandler(event)"
	xmlns:assets="org.mig.view.components.assets.*" 
	xmlns:container="com.appdivision.view.container.*" 
	xmlns:layouts="org.mig.view.layouts.*" 
	xmlns:media="org.mig.view.components.managers.media.*"
	xmlns:utils="org.mig.utils.*">

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.HierarchicalData;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.core.Application;
			import mx.effects.easing.*;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import org.mig.model.vo.ContentNode;
			import org.mig.model.vo.media.FileNode;
			import org.mig.model.vo.user.User;
			import org.mig.utils.ColumnInfo;
			import org.mig.utils.ContentTreeDataDescriptor;
			import org.mig.view.constants.DraggableViews;
			
			
			[Bindable] public var scalePercent:Number = 1;
			[Bindable] public var currentLocation:String='';
			//[Bindable] public var listDP:;
			[Bindable] public var tileDP:ArrayCollection;
			[Bindable] public var thumbURL:String;
			
			public var user:User;
			private function handleSliderChange(event:Event):void
			{
				scalePercent = scaleSlider.value;
			}
			public function handleSizeField(data:Object):String {
				var label:String = '';
				if(data.data) {
					if (data.data.size < 1024)
						label = data.data.size + " B";
					else if ((data.data.size > 1024) && (data.data.size < 1048576))
						label = Math.round(data.data.size / 1024).toString() + " KB";
					else if (data.data.size > 1048576)
						label = Math.round(data.data.size / 1048576).toString() + " MB";	
				} 
				return label;	
			}
			public function handleDateField(data:Object):String {
				var label:String ="";
				if(data.data) {
					if(data.data is FileNode) {
						var d:Date = new Date();
						d.time = data.data.createdate;
						label=d.toDateString()	;
					}
				}
				return label;
			}
			public function handleExtensionField(data:Object):String {
				var label:String='';
				if(data.data) {
					label = data.data.extension;
				}
				return label;
			}	
			public function handleUserField(data:Object):String {
				var label:String ='';
				if(data.data) {
/* 					if(data.data.createdby != undefined && data.createdby != 0) {
						//var userName:String =  UserManager(ManagerBase.getInstance(UserManager)).findUserById(Number(data.createdby));
						//label = userName;
					} */
				}
				return label;
			}			
			private function searchInput_changeHandler(event:Event):void {
				if(searchInput.text == '')
					clearSearch.visible = false;
				else
					clearSearch.visible = true;
			}

			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				this.testDataGridHeader.dataProvider= new ArrayList(columns);
				var n:int = columns.length;
				for (var i:int = 0; i < n; i++)
				{
					var sep:HeaderSeparator = new HeaderSeparator();
					sep.columns = columns;
					sep.top = 0;
					sep.bottom = 0;
					sep.addEventListener("columnResize", refresh);
					separators.addElement(sep);
				}
				updateSeparators();
			}
			private function refresh(event:Event = null):void
			{
				testDataGridHeader.dataProvider.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.RESET));
				listView.dataProvider.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.RESET));
				updateSeparators();
			}
			private function updateSeparators():void
			{
				var n:int = separators.numElements;//columns.length;
				var ww:Number = 0;
				for (var i:int = 0; i < n; i++)
				{
					var sep:HeaderSeparator = separators.getElementAt(i) as HeaderSeparator;
					if (sep)
					{
						ww += columns[i].width;
						sep.x = ww;
						
						// don't show renderers if they'd cover the border or be off screen
						if (listView && (sep.x >= listView.width - 2))
							sep.visible = false;
						else
							sep.visible = true;
					}
				}
			} 
			
			private var lastSortIndex:int;
			private function sortDG(event:Event):void
			{
				var s:Sort;
				
				if (testDataGridHeader.selectedIndex == -1)
					return;
				
				var col:ColumnInfo = columns[testDataGridHeader.selectedIndex];
				if (lastSortIndex == testDataGridHeader.selectedIndex)
				{
					col.descending = !col.descending;
				}
			 	s = new Sort(); 
				s.fields = [new SortField(col.dataField, col.caseInsensitive, col.descending, col.numeric)];
				s.compareFunction = listCompare;
				ArrayCollection(listView.dataProvider).sort = s;
				ArrayCollection(listView.dataProvider).refresh();
				//listView.invalidateDisplayList();
				lastSortIndex = testDataGridHeader.selectedIndex;
				//testDataGridHeader.selectedIndex = -1;
				//testDataGridHeader.dataProvider.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.RESET)); */
				
			}
			private function listCompare(a:ContentNode,b:ContentNode,fields:Array):int {
				var field:SortField = fields[0] as SortField;
				var valueA:* = a.data[field.name];
				var valueB:* = b.data[field.name];
				var result:int;
				if(field.numeric) {
					result =  ObjectUtil.numericCompare(valueA,valueB);
				}
				else {
					result =   ObjectUtil.stringCompare(valueA,valueB,field.caseInsensitive);
				}
				return result;
			}

		]]>
	</fx:Script>
	
	<!--Control Bar-->
	<container:FlowContainer  direction="horizontal"  width="100%" horizontalGap="8" verticalAlign="middle" accentColor="0" contentBackgroundAlpha="1">
	
<!--	<s:Group width="100%" accentColor="0" contentBackgroundAlpha="1">
		<s:layout>
			<layouts:FlowLayout gap="8"  typicalLayoutElement="{searchInput"/>
		</s:layout>
	-->
		<mx:Canvas>
			<controls:IconButton left="8" icon="@Embed(source='/migAssets/library.swf#folderIcon')" mouseChildren="false"  buttonMode="true" useHandCursor="true" /><!--   width="18" height="16" -->	
		</mx:Canvas>
		<mx:Text htmlText="{currentLocation}" id="locationText" styleName="boldCopy" />
		
		<!--Search -->
		<s:ToggleButton  skinClass="org.mig.view.skins.buttons.SearchButtonSkin" mouseChildren="false" buttonMode="true"  toolTip="Search" selected="false" />
		<s:TextInput  styleName="inputFieldBlack" id="searchInput" change="searchInput_changeHandler(event)"/>
		<mx:Spacer width="-25"/>
		<controls:IconButton id="clearSearch" icon="@Embed(source='/migAssets/library.swf#plus')"
		rotation="45" toolTip="Clear Search" mouseChildren="false" buttonMode="true" visible="false"   />
		
		<!--Views-->
		<controls:IconButton  icon="@Embed(source='/migAssets/library.swf#thumbViewIcon')" id="thumbButton"
		buttonMode="true" useHandCursor="true" mouseChildren="false" toolTip="Image View"   />
		<controls:IconButton  icon="@Embed(source='/migAssets/library.swf#listViewIcon')"  id="listButton"
		buttonMode="true" useHandCursor="true" mouseChildren="false" toolTip="List View" />
		<mx:Spacer width="5" />
		<controls:MiGHSlider id="scaleSlider" minimum="0.25" maximum="2" change="handleSliderChange(event)" mouseChildren="false" />
		
		<!-- Directory -->
		<controls:IconButton  icon="@Embed(source='/migAssets/library.swf#parentFolderIcon')"  
		mouseChildren="false" id="parentdirButton" alpha="1" toolTip="Up 1 Folder" buttonMode="true" useHandCursor="true" />
		<mx:Canvas>
			<controls:IconButton   mouseChildren="false" id="addDirectoryButton" alpha="1" toolTip="New Folder" top="6"
			icon="@Embed(source='/migAssets/library.swf#addFolderIcon')" buttonMode="true" useHandCursor="true"/>
		</mx:Canvas>
		<controls:IconButton  icon="@Embed(source='/migAssets/library.swf#trashUp')"  toolTip="Delete"  id="trashButton" mouseChildren="false"  buttonMode="true" />			
	</container:FlowContainer>
	<!--</s:Group>-->
	
	<s:Group width="100%" height="100%">
		<mx:ViewStack width="100%" height="100%" id="stack" visible.loading="false" visible.loaded="true">
			<s:NavigatorContent width="100%" height="100%">

				<s:List id="testDataGridHeader" width="100%" labelField="headerText"  change="sortDG(event)" 
				dragDrop="callLater(updateSeparators)" updateComplete="updateSeparators()" visible="false"
				requireSelection="false" dragEnabled="true" dropEnabled="false" dragMoveEnabled="false">
					<s:layout>
						<s:HorizontalLayout gap="0"/>
					</s:layout>
					<s:itemRenderer>
						<fx:Component>
							<s:ItemRenderer dataChange="update()" height="22">
								<fx:Script>
									<![CDATA[
										import spark.components.List;
										import mx.collections.ICollectionView;
											import mx.collections.Sort;
										import mx.collections.SortField;
										
										// show correct sort arrow if appropriate
										private function update():void
										{
											if (!data)
												return;
											
											width = data.width;
											var s:Sort = ICollectionView(outerDocument.listView.dataProvider).sort;
											var isSortColumn:Boolean;
											var descending:Boolean;
											if (s)
											{
												if (s.fields.length == 1)
												{
													if (s.fields[0].name == data.dataField)
													{
														isSortColumn = true;
														descending = s.fields[0].descending;
													}
												}
											}
											sortArrowDown.visible = isSortColumn && descending;
											sortArrowDown.includeInLayout = isSortColumn && descending;
											sortArrowUp.visible = isSortColumn && !descending;
											sortArrowUp.includeInLayout = isSortColumn && !descending;
										}
									]]>
								</fx:Script>
								<s:Group clipAndEnableScrolling="true" width="100%" minWidth="0" 
								top="2" bottom="1" left="2" right="2">
									<s:Button styleName="defaultGrayButton" label="{data.headerText}" width="100%" />
									<s:Path id="sortArrowDown" data="M 0 0 L 8 0 L 4 8 L 0 0" right="2" verticalCenter="0">
										<s:fill>
											<s:SolidColor color="0" />
										</s:fill>
									</s:Path>
									<s:Path id="sortArrowUp" data="M 0 8 L 8 8 L 4 0 L 0 8" right="2" verticalCenter="0">
										<s:fill>
											<s:SolidColor color="0" />
										</s:fill>
									</s:Path>
								</s:Group>
								
							</s:ItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:List>
				<controls:MigTree styleName="mediaTree" id="listView"
			    allowDragSelection="true"  top="26"
			    dragEnabled="true" color="0xffffff"
			    dropEnabled="true"  allowMultipleSelection="true"
			    dragMoveEnabled="true"  labelField="label"
			    width="100%" height="100%" 
				doubleClickEnabled="true"  dragFormat="{DraggableViews.MEDIA_ITEMS}"
				dataDescriptor="{new ContentTreeDataDescriptor(listView)}"
			    dataProvider="{tileDP}">
					<controls:itemRenderer>
						<fx:Component>
							<renderers:MediaTreeRenderer columns="{outerDocument.columns}" />
						</fx:Component>
					</controls:itemRenderer>
				</controls:MigTree>
			    
				<s:Group id="separators" top="0" bottom="0" left="0" right="0"  visible="false"/>
				<s:Label styleName="bodyCopy" text="{tileDP.length + ' items'}" bottom="0" textAlign="center" width="100%"/>
			</s:NavigatorContent>	

			<s:NavigatorContent width="100%" height="100%">
				<s:layout>
					<s:VerticalLayout clipAndEnableScrolling="false" />
				</s:layout>
				<controls:MiGList width="100%" height="100%" id="thumbView" dataProvider="{tileDP}" 
						rollOverColor="0xed1c58" 
						creationComplete="this.dispatchEvent(new Event('thumbViewCreated'))"
						selectionColor="0xed1c58"  
						 doubleClickEnabled="true" requireSelection="false"
						allowMultipleSelection="true" borderVisible="false"
						dragEnabled="true">
					<controls:itemRenderer>
						<fx:Component>
							<media:MediaManagerTileListRenderer doubleClickEnabled="true"  scalePercent="{outerDocument.scalePercent}" thumbURL="{outerDocument.thumbURL}"  />
						</fx:Component>
					</controls:itemRenderer>
					<controls:layout>
						<s:TileLayout  verticalGap="4" horizontalGap="4" clipAndEnableScrolling="true" useVirtualLayout="true" orientation="rows" rowHeight="{250*scalePercent}" columnWidth="{250*scalePercent}" />
					</controls:layout>
				</controls:MiGList>
				<s:Label styleName="bodyCopy" text="{tileDP.length + ' items'}" textAlign="center" width="100%" bottom="5"/>
			</s:NavigatorContent>
		</mx:ViewStack>	
		
		
		<s:SkinnableContainer id="loadingScreen" backgroundColor="0x000000" backgroundAlpha="0" 
		width="100%" height="100%" visible.loading="true" visible.loaded="false">
			<s:layout>
				<s:VerticalLayout verticalAlign="middle" horizontalAlign="center" />
			</s:layout>			
				<assets:MigLoaderSmall percentLoaded="1" scaleX=".75" scaleY=".75" rotation="45"/>
				<s:Rect height="150" />
				<controls:Spinner tickWidth="4" size="40" numTicks="10" tickColor="0xffffff" autoPlay="true" id="pendingSpinner" />					
		</s:SkinnableContainer>
	</s:Group>


	
	
	<fx:Declarations>
		<fx:Number id="lastRollOverIndex" />		
		<mx:Sequence repeatCount="4"  id="blink">
			<mx:Fade id="fadeOut" alphaFrom="1" alphaTo=".5" duration="200" /><!-- effectEnd="handleEffectEnd()" -->
			<mx:Fade id="fadeIn" alphaFrom="0.5" alphaTo="1" duration="200" />
		</mx:Sequence>
		<fx:Array id="columns" >
			<utils:ColumnInfo dataField="name" headerText="Name"  valueProperty="text"  />
			<utils:ColumnInfo dataField="size" headerText="Size" numeric="true"  valueProperty="text"  width="150" />
			<utils:ColumnInfo dataField="extension" headerText="Extension" numeric="false"  valueProperty="text"  width="150" />
		</fx:Array>
		<fx:Component className="HeaderSeparator">
			<s:Group mouseDown="startDragColumn(event)" mouseOver="showCursor(event)" mouseOut="hideCursor(event)"
					 alpha="0.8">
				<fx:Script>
					<![CDATA[
						import mx.events.SandboxMouseEvent;
						
						import org.mig.view.skins.controls.ColumnDragCursor;
						
						import spark.components.Group;
						
						private var dragCursorID:int;
						public var columns:Array;
						
						private function showCursor(event:MouseEvent):void
						{
							if (inDrag)
								return;
							
							dragCursorID = cursorManager.setCursor(ColumnDragCursor);
						}
						
						private function hideCursor(event:MouseEvent):void
						{
							if (inDrag)
								return;
							
							if (dragCursorID != -1)
								cursorManager.removeCursor(dragCursorID);
							dragCursorID = -1;
						}
						
						private var inDrag:Boolean;
						
						private function startDragColumn(event:MouseEvent):void
						{
							inDrag = true;
							
							systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, stopDragColumn);
							systemManager.getSandboxRoot().addEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, stopDragColumn);
							systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, dragColumn);
							//trace("startDragColumn");
						}
						
						private function stopDragColumn(event:Event):void
						{
							inDrag = false;
							
							if (dragCursorID != -1)
								cursorManager.removeCursor(dragCursorID);
							dragCursorID = -1;
							
							systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, stopDragColumn);
							systemManager.getSandboxRoot().removeEventListener(SandboxMouseEvent.MOUSE_UP_SOMEWHERE, stopDragColumn);
							systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, dragColumn);
							
							//trace("stopDragColumn");
						}
						
						private function dragColumn(event:MouseEvent):void
						{
							//trace("dragColumn");
							var pt:Point = parent.globalToLocal(new Point(event.stageX, event.stageY));
							x = pt.x;
							
							var index:int = Group(parent).getElementIndex(this);
							var ww:Number = 0;
							for (var i:int = 0; i < index; i++)
								ww += columns[i].width;
							
							columns[i].width = x - ww;
							dispatchEvent(new Event("columnResize"));
						}
						
					]]>
				</fx:Script>
				<s:Rect width="2" top="0" bottom="0" >
					<s:fill>
						<s:SolidColor color="0" />
					</s:fill>
				</s:Rect>
			</s:Group>
		</fx:Component>
	</fx:Declarations>

	<s:states>
		<s:State id="loading" name="loading"/>
		<s:State id="loaded" name="loaded"/>
	</s:states>
	
	<s:transitions>
		<s:Transition toState="loading"> 
			<s:Sequence>
				<s:Fade target="{loadingScreen}" alphaTo="1" duration="1000" />
			</s:Sequence>
		</s:Transition>
		<s:Transition toState="loaded">
			<s:Sequence>
				<s:Fade target="{loadingScreen}" alphaTo="0" duration="500"/>
				<s:Fade target="{stack}" alphaFrom="0" alphaTo="1" duration="1000" />
			</s:Sequence>
		</s:Transition>
	</s:transitions>

<!--<mx:Binding source="this.linkedResource" destination="Application.application.mainView.editorsView.linkedResource" />	
<mx:Binding source="Application.application.linkingMode"  destination="this.linkingMode" />-->
</s:VGroup>