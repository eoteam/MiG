<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	horizontalScrollPolicy="off" 
	paddingRight="10" paddingLeft="10" paddingBottom="10"
	height="200" width="300" 
	title="{'Rename '+_content.label}" styleName="bodyCopy"
	xmlns:content="com.mapx.view.content.*"
	xmlns:controls="com.mapx.view.controls.*">
<mx:Script>
	<![CDATA[
		import com.map.controller.ControllerLocator;
		import com.map.model.MediaContainerNode;
		import com.mapx.view.content.SystemPopup;
		import mx.collections.ArrayCollection;
		import com.map.model.ContainerNode;
		import com.map.services.XmlHttpOperation;
		import mx.events.ListEvent;
		import com.map.view.Tools;
		import mx.events.FlexEvent;
		import com.map.model.ContentNode;
		import mx.core.Application;
		import mx.managers.PopUpManager;
		import com.map.controller.Constants;
		import mx.binding.utils.BindingUtils;
		import mx.controls.Alert;
		import com.map.model.MediaCategoryNode;		
		import mx.managers.PopUpManagerChildList;
		[Bindable]
		private var _content:ContentNode;
		
		
		public function set content(contentNode:ContentNode):void
		{
			_content = contentNode;
		}
		
		[Bindable]
		private var _data:Object;
				
		public function cancel():void
		{
			PopUpManager.removePopUp(this);
		}
		private var totalCount:int;
		private var trackerCount:int;
		public function submitData():void
		{
			var operation:XmlHttpOperation;
			var params:Object;
			totalCount = 0;
			trackerCount = 0;
			if(_content is MediaContainerNode)
			{
				totalCount++;
				operation = new XmlHttpOperation(Constants.EXECUTE);
				params = new Object();
				params.action = "updateRecord";
				params.tablename = "media";
				params.id = _content.data.id.toString();
				params.name = input.text;
				operation.params = params;
				operation.addEventListener(Event.COMPLETE, handleComplete);
				operation.execute(); 
	
				operation = new XmlHttpOperation(Constants.EXECUTE);
				params = new Object();
				params.action = "renameFile";
				params.oldname = MediaContainerNode(_content).path+_content.label;
				params.newname = MediaContainerNode(_content).path+input.text;
				if(MediaContainerNode(_content).mimetype == "images")
					params.thumb = 1;
				else
					params.thumb = 0;
				operation.params = params;
				operation.addEventListener(Event.COMPLETE, handleRename);
				operation.execute(); 					
			}	
			else if(_content is MediaCategoryNode)
			{
				var arr:Array = MediaCategoryNode(_content).directoryMapping.split("/");
				var basePath:String = '';
				for (var i:int=0;i<arr.length-1;i++)
				{
					basePath = arr[i] + '/';
				}
				totalCount++;
				operation = new XmlHttpOperation(Constants.EXECUTE);
				params = new Object();
				params.action = "updateRelatedRecords";
				params.tablename = "media";
				params.setField = "path";
				params.setValue =  '/'+basePath+input.text+'/';
				params.paramField = "path";
				params.paramValue = '/'+MediaCategoryNode(_content).directoryMapping+'/';
				operation.params = params;
				operation.addEventListener(Event.COMPLETE, handleComplete);
				operation.execute();
				renameChildren(_content);
				
				operation = new XmlHttpOperation(Constants.EXECUTE);
				params = new Object();
				params.action = "renameFile";
				params.oldname = MediaCategoryNode(_content).directoryMapping;
				params.newname = basePath+input.text;
				params.thumb = 1;
				operation.params = params;
				operation.addEventListener(Event.COMPLETE, handleRename);
				operation.execute(); 				 				
			}	
		}
		private function renameChildren(node:ContentNode):void
		{
			var operation:XmlHttpOperation;
			var params:Object;
			var basePath:String = '';
			basePath = MediaCategoryNode(_content).directoryMapping;
			//_content must be a folder
			basePath = MediaCategoryNode(_content).directoryMapping;	
			for each(var item:ContentNode in node.children)
			{
				if(item is MediaCategoryNode)
				{			
					totalCount++;
					var newDir:String = MediaCategoryNode(item).directoryMapping.replace(basePath,input.text);
					operation = new XmlHttpOperation(Constants.EXECUTE);
					params = new Object();
					params.action = "updateRelatedRecords";
					params.tablename = "media";
					params.setField = "path";
					params.setValue =  '/'+ newDir + '/';
					params.paramField = "path";
					params.paramValue = '/' + MediaCategoryNode(item).directoryMapping + '/';
					operation.params = params;
					operation.addEventListener(Event.COMPLETE, handleComplete);	
					operation.execute();					
				}
				if(item.children && item.children.length > 0)
				{
					renameChildren(item);
				}
			}
		}
		private function handleRename(event:Event):void
		{
			
		}
		private function checkData():void
		{
			if(validInput)
				submitData();
		}
		private function handleComplete(event:Event):void
		{
			var _data:XMLList = event.target.xml.children();
			var popup:SystemPopup;
        	if(_data != null)
        	{
        		if(_data.errorName != null && _data.errorName != "" && _data.errorName != undefined)
        		{
        			//Alert.show(("Server-side Error:<br></br>Error:" + _data.errorName + "   Error Msg: " + _data.errorMsg));
        			popup = new SystemPopup();
					popup.type = 1;
					popup.message = "Server-side Error:<br></br>Error:" + _data.errorName + "   Error Msg: " + _data.errorMsg;
					PopUpManager.addPopUp(popup,Application.application.mainView,true,PopUpManagerChildList.POPUP);	
					
        		}
        		else if(_data.success != null && _data.success != "" && _data.success != undefined)
        		{
    				Application.application.mainView.statusMod.updateStatus("Update Successful.");
    				PopUpManager.removePopUp(this);
    				_content._baseLabel = input.text;
    				_content.updateLabel();
    				trackerCount++;
    				if(trackerCount == totalCount)
    				{    				
	    				if(_content is MediaContainerNode)
	    				{
	    					MediaContainerNode(_content).name = input.text;
	    					MediaContainerNode(_content).data.name = XML("<name>"+input.text+"</name>");
	    				}
	    				else if(_content is MediaCategoryNode)
	    				{
							MediaCategoryNode(_content).directoryMapping = input.text;
							_content.refreshData();
	    				}
	    				callLater(refreshMediaManager);
    				}
        		}	
        		else
        		{
            		//Alert.show("Error Connecting To The Database. Try Again Later.");
            		popup = new SystemPopup();
					popup.type = 1;
					popup.message = "Error Connecting To The Database. Try Again Later.";
					PopUpManager.addPopUp(popup,Application.application.mainView,true,PopUpManagerChildList.POPUP);	
            	}
        	}
		}
		private function refreshMediaManager():void
		{
			MediaManager.getInstance().selectedContent = ControllerLocator.mediaManagerController.selectedContent;
		}
	]]>
</mx:Script>

<mx:Form maxWidth="750" paddingLeft="0" indicatorGap="2" verticalGap="15" styleName="removeButton" horizontalScrollPolicy="off">
	<mx:HBox paddingLeft="5">
		<controls:MiGTextInput styleName="inputFieldGray"  text="" width="200" id="input" restrict="a-z\A-Z\0-9\_\-\."/>						
	</mx:HBox>
</mx:Form>

<mx:HBox horizontalGap="3" paddingTop="10" paddingLeft="5">
		<mx:Button  styleName="defaultButton" label="Submit" enabled="{validInput}" click="checkData()"/>
		<mx:Button styleName="defaultButton" label="Cancel" click="cancel()"/>
</mx:HBox>

<mx:StringValidator id="inputValidator" invalid="validInput=false" valid="validInput=true" source="{input}" property="text" minLength="4" maxLength="60" required="true"/>
<mx:Boolean id="validInput">false</mx:Boolean>
	
</mx:TitleWindow>
