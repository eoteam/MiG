<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				scaleX="{scalePercent}" scaleY="{scalePercent}"
				scaleX.dragging="1" scaleY.dragging="1"
				creationComplete="handleCreatonComplete()"
				doubleClickEnabled="true" doubleClick="itemrenderer1_doubleClickHandler(event)"
				mouseChildren="false"
				autoDrawBackground="true" xmlns:controls="com.thanksmister.controls.*">
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenMax;
			import com.greensock.easing.Cubic;
			
			import mx.controls.listClasses.BaseListData;
			import mx.events.FlexEvent;
			
			import org.mig.model.vo.ContentNode;
			import org.mig.model.vo.media.DirectoryNode;
			import org.mig.model.vo.media.FileNode;
			import org.mig.model.vo.media.MediaData;
			import org.mig.model.vo.media.MimeTypes;
			import org.mig.view.events.ListItemEvent;
			
			import spark.components.List;			
			
			[Embed(source='/migAssets/library.swf#parentFolderIcon')]
			private var parentIcon:Class;
			[Embed(source='/migAssets/library.swf#folderIcon')]
			private var dirIcon:Class;
			[Embed(source='/migAssets/library.swf#youtubeIcon')]
			private var youtubeIcon:Class;	
			

			private var created:Boolean = false;
			private var loadTimer:Timer = new Timer(200);
			
			public var thumbURL:String;
			[Bindable] private var _content:ContentNode;
			[Bindable] public var directory:String;
			[Bindable] public var scalePercent:Number = 1;
			[Bindable] public var fileSrc:String;
			[Bindable] public var percentLoaded:Number = 0;
			[Bindable] public var fileExtension:String;
			
	
			override public function get data():Object {
				return super.data;
			}            
			override public function set data(value:Object):void {
				super.data = value;
				_content = value as ContentNode;
				fileSrc  = toolTip = _content.label;
				fileExtension = '.'+MediaData(_content.data).extension;
				if(created)
					handleDataChange();
			}								
			public function handleCreatonComplete():void {
				created = true;
				handleDataChange();			
			}
			private function handleDataChange():void {
				var fileData:MediaData = _content.data as MediaData;
				if(_content is DirectoryNode) {
					thumbLabel.visible = false;
					thumbHolder.source = dirIcon;
					loader.visible = false;
					thumbHolder.alpha = 1;
				}	
				else if(fileData.mimetypeid ==  MimeTypes.IMAGE) {
					thumbLabel.visible = false;
					thumbHolder.source = thumbURL+fileData.path.toString()+fileData.name.toString();	
				}			
				else if(fileData.mimetypeid == MimeTypes.VIDEO && fileData.thumb != null) {
					thumbLabel.visible = false;
					thumbHolder.source = thumbURL+fileData.path.toString()+fileData.thumb.toString();				
				}
				else if(fileData.mimetypeid == MimeTypes.YOUTUBE) {
					thumbLabel.visible = false;
					thumbHolder.source = youtubeIcon;					
				}	
				else {
					thumbLabel.visible = true;
					thumbHolder.source = "migAssets/images/docIcon.png";
				}
			}
			private function handleError(event:*):void {
				TweenMax.to(loader, 1, {alpha:0, ease:Cubic.easeOut});
				TweenMax.to(thumbHolder, 1, {alpha:1, ease:Cubic.easeOut});
			}
			private function handleImageProgress(event:ProgressEvent):void {
				var loaded:Number = thumbHolder.bytesLoaded;
				var total:Number = thumbHolder.bytesTotal;
				percentLoaded = loaded/total;
				loader.width = 250 * percentLoaded;
			}
			private function handleImageComplete(event:Event):void {
				TweenMax.to(loader, 3, {alpha:0, ease:Cubic.easeOut});
				TweenMax.to(thumbHolder, 1, {alpha:1, ease:Cubic.easeOut});
			}
			public function get viewname():String
			{
				return "FileView";
			}

			protected function itemrenderer1_doubleClickHandler(event:MouseEvent):void {
				var e:ListItemEvent = new ListItemEvent(ListItemEvent.ITEM_DOUBLE_CLICK);
				e.list = this.owner as List;
				e.itemIndex = this.itemIndex;
				this.owner.dispatchEvent(e);
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal" />            
		<s:State name="hovered" />
		<s:State name="selected" />
		<s:State name="normalAndShowsCaret"/>
		<s:State name="hoveredAndShowsCaret"/>
		<s:State name="selectedAndShowsCaret"/>
		<s:State name="dragging"/>
	</s:states>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5" clipAndEnableScrolling="false" />
	</s:layout>
	<s:Group  width="100%" height="100%" >
		<s:Rect height="100%" id="loader" visible="false">
			<s:fill>
				<s:SolidColor color="0x727376" />
			</s:fill>
		</s:Rect>
		<controls:ImageCache verticalCenter="0" alpha="0"  width="100%" height="100%" 
		 id="thumbHolder" progress="handleImageProgress(event)" complete="handleImageComplete(event)"  
		 brokenImageSkin="org.mig.view.assets.NoImageIcon" />
		<s:Label text="{fileExtension}" id="thumbLabel" fontSize="22" horizontalCenter="0" verticalCenter="0" width="100%"/>		
	</s:Group>


	<s:Label fontSize="16" width="100%" id="textHolder" textAlign="center"   text="{_content.label}" maxDisplayedLines="1"  
	styleName="bodyMedium"  scaleX="{1/scalePercent}" scaleY="{1/scalePercent}"/>
</s:ItemRenderer>
