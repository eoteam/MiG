<?xml version="1.0" encoding="utf-8"?>
<!--

	ADOBE SYSTEMS INCORPORATED
	Copyright 2008 Adobe Systems Incorporated
	All Rights Reserved.
	
	NOTICE:  Adobe permits you to use, modify, and distribute this file 
	in accordance with the terms of the Adobe license agreement 
	accompanying it.  If you have received this file from a source 
	other than Adobe, then your use, modification, or distribution 
	of it requires the prior written permission of Adobe.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns:textEditBar="textEditBar.*"
		 xmlns:controls="org.mig.view.controls.*"
		 verticalAlign="middle" horizontalScrollPolicy="off" verticalScrollPolicy="off" 
		 addedToStage="onAddedToStage()" removedFromStage="onRemovedFromStage()" >
	
	<mx:Script>
		<![CDATA[
			import flashx.textLayout.edit.ElementRange;
			import flashx.textLayout.edit.IEditManager;
			import flashx.textLayout.elements.InlineGraphicElement;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.formats.FormatValue;
			import flashx.textLayout.tlf_internal;
			
			use namespace tlf_internal;
			
			public var activeFlow:TextFlow;
			
			protected function applyChange():void
			{
				changeForeignElement(imageURL.text, imageWidth.text, imageHeight.text, "none", doChangeImage);				
			}
			
	  		protected function changeForeignElement(foreignElementUrl:String, width:String, height:String, float:String, changeCurrent:Boolean):void
	 		{
	 			if (activeFlow && activeFlow.interactionManager is IEditManager)
	 			{
					if (changeCurrent)
	 					IEditManager(activeFlow.interactionManager).modifyInlineGraphic(foreignElementUrl, width, height, float);
					else
						IEditManager(activeFlow.interactionManager).insertInlineGraphic(foreignElementUrl, width, height, float);
	 				activeFlow.interactionManager.setFocus();
	 			}
	 		}
		
			protected var doChangeImage:Boolean = false;
			
			public function update(range:ElementRange):void
 			{
 				if (onStage)
 				{
 					if (range ==  null)
 						visible = false;
 					else
 					{
 						if (!visible)
 							visible = true;

	 					var makeItTheChangeButton:Boolean = false;
	 					
	 					// this logic is a complicated by the fact that we extend the end of the selection because the FE is at the end of the paragraph
	 					if (range && range.firstLeaf is InlineGraphicElement && range.absoluteStart == range.firstLeaf.getAbsoluteStart())
	 					{
	 						// two cases just the FE and just the FE plus the paragraph terminator
	 						if (range.absoluteEnd == range.absoluteStart+1 || (range.firstParagraph == range.lastParagraph && range.absoluteEnd == range.absoluteStart+2 && range.absoluteEnd == range.lastParagraph.getAbsoluteStart() + range.lastParagraph.textLength))
	 							makeItTheChangeButton = true; 
	 					}
	 					
	 					// block selection of just the FE
	 					if (makeItTheChangeButton)
	 						updateForChange(InlineGraphicElement(range.firstLeaf));
	 					else
	 						updateForInsert(range)
 					}
 				}
				lastRange = range;	
 			}
 			
 			protected function updateForChange(inlineElement:InlineGraphicElement):void
 			{
				var sourceString:String = inlineElement.source.toString()
				var widthString:String = inlineElement.width === undefined ? FormatValue.AUTO : inlineElement.width.toString();
				var heightString:String = inlineElement.height === undefined ? FormatValue.AUTO : inlineElement.height.toString();
 				doUpdate(sourceString, widthString, heightString, true, true);
 			}
			
 			protected function updateForInsert(range:ElementRange):void
 			{
 				doUpdate("", 
 					InlineGraphicElement.tlf_internal::widthPropertyDefinition.defaultValue.toString(),
 					InlineGraphicElement.tlf_internal::heightPropertyDefinition.defaultValue.toString(),
 					false, range && range.firstLeaf);
	 		}
	 		
 			private function doUpdate(url:String, width:String, height:String, modify:Boolean, enableImage:Boolean):void
 			{
  				imageURL.text = url;
 				imageWidth.text = width;
 				imageHeight.text = height;
 				imageButton.label = modify ? "Change" : "Insert";
 				doChangeImage = modify;
 				imageButton.enabled = enableImage;			
 			}

			private var onStage:Boolean = false;
			private var addedFrameEventListener:Boolean = false;
			protected var lastRange:ElementRange = null;
			private function onAddedToStage():void
			{
				// the dataProviders aren't set up yet - delay to the frame
				onStage = true;
				if (!addedFrameEventListener)
				{
					addedFrameEventListener = true;
					addEventListener("enterFrame",onEnterFrame);
				}
			}
				
			private function onEnterFrame(p:Event):void
			{
				this.removeEventListener("enterFrame",onEnterFrame);
				addedFrameEventListener = false;	
				
				var temp:ElementRange = lastRange;
				lastRange = null;
				update(temp);
					
			}
			
			private function onRemovedFromStage():void
			{
				onStage = false;
			}
		]]>
	</mx:Script>
	<mx:Canvas width="100%">
		<mx:Label text="Image URL:" width="97" verticalCenter="0"/>
		<controls:MiGTextInput id="imageURL" width="100%" styleName = "inputFieldBlack" verticalCenter="0" left="104"/>		
	</mx:Canvas>
	
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Label text="Width:" width="97"/>
		<controls:MiGTextInput id="imageWidth" width="60" styleName = "inputFieldBlack"/>
		<mx:Label text="Height:" width="97"/>
		<controls:MiGTextInput id="imageHeight" width="60" styleName = "inputFieldBlack"/>			
		<mx:Button id="imageButton" label="Insert Image" 
		click="applyChange();" />
	</mx:HBox>	
</mx:VBox>
