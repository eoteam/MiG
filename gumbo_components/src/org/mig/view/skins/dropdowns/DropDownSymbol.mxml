<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the Spark Button component.  

       @see spark.components.Button
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabled="0.5" xmlns:mx="library://ns.adobe.com/flex/mx">
    
    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Button")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /* Define the skin elements that should not be colorized. 
            For button, the graphics are colorized but the label is not. */
            static private const exclusions:Array = ["graphic","fill"];
            
            /** 
             * @private
             */     
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }  
     
        ]]>        
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" />
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
	<s:transitions>
		<s:Transition  toState="over">
			<s:AnimateColor targets="{[gradientEntry1,gradientEntry2]}" duration="500" />
		</s:Transition>
	</s:transitions>
	<s:Rect left="1" right="1" top="1" bottom="1" id="fill">
		<s:fill>
			<s:LinearGradient rotation="90" interpolationMethod="rgb" spreadMethod="pad">
				<s:GradientEntry color="0x808080" color.over="0xED1C58"  alpha="1" id="gradientEntry1"/>
				<s:GradientEntry color="0x595959" color.over="0xBD1E53"   alpha="1" id="gradientEntry2"/>
			</s:LinearGradient>			
		</s:fill>	
	</s:Rect>
	
	<s:HGroup id="holder" left="10" right="10" top="2" bottom="2" horizontalCenter="0" verticalCenter="1" verticalAlign="middle" contentBackgroundAlpha="0"> 
		<s:Label id="labelDisplay" textAlign="left" verticalAlign="middle" maxDisplayedLines="1" width="100%"/>
		<mx:SWFLoader source="@Embed(source='../../../../../../webapp/src/migAssets/library.swf#Tree_folderOpenIcon')" id="graphic" />
    </s:HGroup>
</s:SparkSkin>
